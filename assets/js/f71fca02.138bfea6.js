"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["591"],{15883:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>l,default:()=>h,toc:()=>c,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"guides/components/scene-objects/mesh/index","title":"Mesh","description":"Learn how to create and manipulate meshes in PixiJS v8, including custom geometry, shaders, and built-in mesh types like MeshSimple, MeshRope, and PerspectiveMesh.","source":"@site/docs/guides/components/scene-objects/mesh/index.md","sourceDirName":"guides/components/scene-objects/mesh","slug":"/guides/components/scene-objects/mesh/","permalink":"/8.x/guides/components/scene-objects/mesh/","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/scene-objects/mesh/index.md","tags":[],"version":"current","frontMatter":{"description":"Learn how to create and manipulate meshes in PixiJS v8, including custom geometry, shaders, and built-in mesh types like MeshSimple, MeshRope, and PerspectiveMesh."},"sidebar":"guidesSidebar","previous":{"title":"Text Style","permalink":"/8.x/guides/components/scene-objects/text/style"},"next":{"title":"Particle Container","permalink":"/8.x/guides/components/scene-objects/particle-container"}}'),r=n(85893),t=n(50065);let l={description:"Learn how to create and manipulate meshes in PixiJS v8, including custom geometry, shaders, and built-in mesh types like MeshSimple, MeshRope, and PerspectiveMesh."},a="Mesh",o={},c=[{value:"<strong>What Is a Mesh?</strong>",id:"what-is-a-mesh",level:2},{value:"<strong>MeshGeometry</strong>",id:"meshgeometry",level:2},{value:"Built-in Mesh Types",id:"built-in-mesh-types",level:2},{value:"MeshSimple",id:"meshsimple",level:3},{value:"MeshRope",id:"meshrope",level:3},{value:"MeshPlane",id:"meshplane",level:3},{value:"PerspectiveMesh",id:"perspectivemesh",level:3},{value:"<strong>API Reference</strong>",id:"api-reference",level:2}];function d(e){let s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"mesh",children:"Mesh"})}),"\n",(0,r.jsxs)(s.p,{children:["PixiJS v8 offers a powerful ",(0,r.jsx)(s.code,{children:"Mesh"})," system that provides full control over geometry, UVs, indices, shaders, and WebGL/WebGPU state. Meshes are ideal for custom rendering effects, advanced distortion, perspective manipulation, or performance-tuned rendering pipelines."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"import { Texture, Mesh, MeshGeometry, Shader } from 'pixi.js';\n\nconst geometry = new MeshGeometry({\n  positions: new Float32Array([0, 0, 100, 0, 100, 100, 0, 100]),\n  uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n  indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\nconst shader = Shader.from({\n  gl: {\n    vertex: `\n            attribute vec2 aPosition;\n            attribute vec2 aUV;\n            varying vec2 vUV;\n            void main() {\n                gl_Position = vec4(aPosition / 100.0 - 1.0, 0.0, 1.0);\n                vUV = aUV;\n            }\n        `,\n    fragment: `\n            precision mediump float;\n            varying vec2 vUV;\n            uniform sampler2D uSampler;\n            void main() {\n                gl_FragColor = texture2D(uSampler, vUV);\n            }\n        `,\n  },\n  resources: {\n    uSampler: Texture.from('image.png').source,\n  },\n});\n\nconst mesh = new Mesh({ geometry, shader });\napp.stage.addChild(mesh);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"what-is-a-mesh",children:(0,r.jsx)(s.strong,{children:"What Is a Mesh?"})}),"\n",(0,r.jsx)(s.p,{children:"A mesh is a low-level rendering primitive composed of:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Geometry"}),": Vertex positions, UVs, indices, and other attributes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Shader"}),": A GPU program that defines how the geometry is rendered"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"State"}),": GPU state configuration (e.g. blending, depth, stencil)"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"With these elements, you can build anything from simple quads to curved surfaces and procedural effects."}),"\n",(0,r.jsx)(s.h2,{id:"meshgeometry",children:(0,r.jsx)(s.strong,{children:"MeshGeometry"})}),"\n",(0,r.jsxs)(s.p,{children:["All meshes in PixiJS are built using the ",(0,r.jsx)(s.code,{children:"MeshGeometry"})," class. This class allows you to define the vertex positions, UV coordinates, and indices that describe the mesh's shape and texture mapping."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const geometry = new MeshGeometry({\n  positions: Float32Array, // 2 floats per vertex\n  uvs: Float32Array, // matching number of floats\n  indices: Uint32Array, // 3 indices per triangle\n  topology: 'triangle-list',\n});\n"})}),"\n",(0,r.jsx)(s.p,{children:"You can access and modify buffers directly:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"geometry.positions[0] = 50;\ngeometry.uvs[0] = 0.5;\ngeometry.indices[0] = 1;\n"})}),"\n",(0,r.jsx)(s.h2,{id:"built-in-mesh-types",children:"Built-in Mesh Types"}),"\n",(0,r.jsx)(s.h3,{id:"meshsimple",children:"MeshSimple"}),"\n",(0,r.jsxs)(s.p,{children:["A minimal wrapper over ",(0,r.jsx)(s.code,{children:"Mesh"})," that accepts vertex, UV, and index arrays directly. Suitable for fast static or dynamic meshes."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const mesh = new MeshSimple({\n  texture: Texture.from('image.png'),\n  vertices: new Float32Array([0, 0, 100, 0, 100, 100, 0, 100]),\n  uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n  indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"autoUpdate = true"})," to update geometry per frame."]}),"\n",(0,r.jsxs)(s.li,{children:["Access ",(0,r.jsx)(s.code,{children:"mesh.vertices"})," to read/write data."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"meshrope",children:"MeshRope"}),"\n",(0,r.jsx)(s.p,{children:"Bends a texture along a series of control points, often used for trails, snakes, and animated ribbons."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const points = [new Point(0, 0), new Point(100, 0), new Point(200, 50)];\nconst rope = new MeshRope({\n  texture: Texture.from('snake.png'),\n  points,\n  textureScale: 1, // optional\n});\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"textureScale > 0"})," repeats texture; ",(0,r.jsx)(s.code,{children:"0"})," stretches it."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"autoUpdate = true"})," re-evaluates geometry each frame."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"meshplane",children:"MeshPlane"}),"\n",(0,r.jsx)(s.p,{children:"A flexible subdivided quad mesh, suitable for distortion or grid-based warping."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const plane = new MeshPlane({\n  texture: Texture.from('image.png'),\n  verticesX: 10,\n  verticesY: 10,\n});\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Automatically resizes on texture update when ",(0,r.jsx)(s.code,{children:"autoResize = true"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"perspectivemesh",children:"PerspectiveMesh"}),"\n",(0,r.jsxs)(s.p,{children:["A special subclass of ",(0,r.jsx)(s.code,{children:"MeshPlane"})," that applies perspective correction by transforming the UVs."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const mesh = new PerspectiveMesh({\n  texture: Texture.from('image.png'),\n  verticesX: 20,\n  verticesY: 20,\n  x0: 0,\n  y0: 0,\n  x1: 300,\n  y1: 30,\n  x2: 280,\n  y2: 300,\n  x3: 20,\n  y3: 280,\n});\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Set corner coordinates via ",(0,r.jsx)(s.code,{children:"setCorners(...)"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"Ideal for emulating 3D projection in 2D."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"api-reference",children:(0,r.jsx)(s.strong,{children:"API Reference"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.Mesh.html",children:"Mesh"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.MeshGeometry.html",children:"MeshGeometry"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.MeshSimple.html",children:"MeshSimple"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.MeshRope.html",children:"MeshRope"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.MeshPlane.html",children:"MeshPlane"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/scene.PerspectiveMesh.html",children:"PerspectiveMesh"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/rendering.Shader.html",children:"Shader"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://pixijs.download/release/docs/rendering.Texture.html",children:"Texture"})}),"\n"]})]})}function h(e={}){let{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);