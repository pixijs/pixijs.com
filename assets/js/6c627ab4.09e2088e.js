"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["6664"],{62249:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>s,default:()=>c,toc:()=>l,metadata:()=>i,assets:()=>p,contentTitle:()=>u});var i=JSON.parse('{"id":"examples/filters-advanced/mouse-blending","title":"Mouse Blending","description":"<ExampleEditor","source":"@site/docs/examples/filters-advanced/mouse-blending.mdx","sourceDirName":"examples/filters-advanced","slug":"/examples/filters-advanced/mouse-blending","permalink":"/8.x/examples/filters-advanced/mouse-blending","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":0,"custom_edit_url":null,"title":"Mouse Blending"},"sidebar":"examplesSidebar","previous":{"title":"Displacement Map Flag","permalink":"/8.x/examples/filters-basic/displacement-map-flag"},"next":{"title":"Custom","permalink":"/8.x/examples/filters-advanced/custom"}}'),r=t(85893),o=t(50065),a=t(31531);let s={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:0,custom_edit_url:null,title:"Mouse Blending"},u=void 0,p={},l=[];function d(e){return(0,r.jsx)(a.N,{files:{"index.js":"import { Application, Assets, Container, Filter, GlProgram, Point, Rectangle, Sprite } from 'pixi.js';\nimport fragment from './mouseBlending.frag';\nimport vertex from './mouseBlending.vert';\n\n/**\n * https://github.com/pixijs/pixi.js/wiki/v5-Creating-Filters\n */\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ preference: 'webgl', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // Load the grass texture\n  const texture = await Assets.load('https://pixijs.com/assets/bg_grass.jpg');\n\n  // Create background image\n  const background = new Sprite(texture);\n\n  background.width = app.screen.width;\n  background.height = app.screen.height;\n  app.stage.addChild(background);\n\n  // NOTE: this shader wont work on old devices where mediump precision is forced in fragment shader\n  // because v5 default vertex shader uses `inputSize` in it. Same uniform in fragment and vertex shader\n  // cant have different precision :(\n\n  const container = new Container();\n\n  container.filterArea = new Rectangle(100, 100, app.screen.width - 200, app.screen.height - 200);\n  app.stage.addChild(container);\n\n  const filter = new Filter({\n    glProgram: new GlProgram({ vertex, fragment }),\n    resources: {\n      localUniforms: {\n        uMouse: { value: new Point(), type: 'vec2<f32>' },\n      },\n    },\n  });\n\n  container.filters = [filter];\n\n  app.stage.hitArea = app.screen;\n  app.stage.eventMode = 'static';\n  app.stage.on('pointermove', (event) => {\n    filter.resources.localUniforms.uniforms.uMouse.copyFrom(event.global);\n  });\n})();\n","mouseBlending.vert":"in vec2 aPosition;\nout vec2 vTextureCoord;\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}","mouseBlending.frag":" precision highp float;\nin vec2 vTextureCoord;\nout vec4 finalColor;\n\nuniform vec2 uMouse;\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform float uTime;\n\nvoid main() {\n    vec2 screenPos = vTextureCoord * uInputSize.xy + uOutputFrame.xy;\n    if (length(uMouse - screenPos) < 25.0) {\n        finalColor = vec4(1.0, 1.0, 0.0, 1.0) * 0.7; //yellow circle, alpha=0.7\n    } else {\n        // blend with underlying image, alpha=0.5\n        finalColor = vec4( sin(uTime), (uMouse.xy - uOutputFrame.xy) / uOutputFrame.zw, 1.0) * 0.5;\n    }\n}"}})}function c(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);