"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["968"],{9998:function(e,n,t){t.r(n),t.d(n,{assets:function(){return v},contentTitle:function(){return g},default:function(){return T},frontMatter:function(){return m},metadata:function(){return o},toc:function(){return w}});var o=t(76081),i=t(85893),r=t(50065),a=t(20888),s=t(56447),l=t(57020),c=t(96302),u=t(50358),d=t(29021),h=t(12605),p=t(16211),x=t(51882),f=t(19995);let m={title:"PixiJS Update - v8.10.0",description:"A look at the 8.10.0 release of PixiJS.",slug:"8.10.0",authors:"zyie",tags:["PixiJS","Updates","Documentation"],hide_table_of_contents:!0,keywords:["PixiJS","Updates","Documentation","Text Features"]},g=void 0,v={authorsImageUrls:[void 0]},w=[{value:"Documentation Overhaul",id:"documentation-overhaul",level:2},{value:"New Website Documentation",id:"new-website-documentation",level:3},{value:"Enhanced API Documentation",id:"enhanced-api-documentation",level:3},{value:"Public vs Internal APIs",id:"public-vs-internal-apis",level:3},{value:"New Features  \uD83C\uDF89",id:"new-features--",level:2},{value:"Baked Text Filters",id:"baked-text-filters",level:3},{value:"Text Trimming",id:"text-trimming",level:3},{value:"Texture Scale Modes",id:"texture-scale-modes",level:3},{value:"Highlights from v8.9.0 and v8.8.0",id:"highlights-from-v890-and-v880",level:2},{value:"DOM Container",id:"dom-container",level:3},{value:"NineSlice Sprite Anchor",id:"nineslice-sprite-anchor",level:3},{value:"Looking Ahead",id:"looking-ahead",level:2}];function y(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"PixiJS v8.10.0 introduces a major overhaul of our documentation along with several updates that enhance text rendering and developer control. Here's what's new:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complete Documentation Overhaul"}),": Improved guides, API docs, and better organization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text Trimming"}),": Optimize text rendering with automatic whitespace trimming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text Filters"}),": Apply filters directly in text style configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adjustable TextureStyle For Text"}),": Fine-tune how a text's texture is rendered with new texture style options"]}),"\n"]}),"\n","\n",(0,i.jsx)(n.h2,{id:"documentation-overhaul",children:"Documentation Overhaul"}),"\n",(0,i.jsx)(n.p,{children:"With this release, we are making a significant investment in our documentation to make PixiJS more accessible and easier to use for both new and experienced developers."}),"\n",(0,i.jsx)(n.p,{children:"This change is driven by the survey results we gathered last year, which highlighted the need for clearer, more organized documentation. We want to ensure that developers can quickly find the information they need, whether they are just starting out or looking to deepen their understanding of PixiJS. With that in mind, we have completely revamped our documentation structure and content."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/8.x/guides/getting-started/intro",children:"New Guides"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://pixijs.download/release/docs/index.html",children:"New API Documentation"})}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"info",children:(0,i.jsx)(n.p,{children:"As with any major change, there are areas that need refinement. We welcome your feedback as we continue to improve the documentation."})}),"\n",(0,i.jsx)(n.h3,{id:"new-website-documentation",children:"New Website Documentation"}),"\n",(0,i.jsxs)(n.p,{children:["We've expanded and restructured our ",(0,i.jsx)(n.a,{href:"/8.x/guides/getting-started/intro",children:"guides"})," to now cover all core areas of PixiJS with improved getting started. The goal is to provide clearer entry points for new users and more comprehensive resources for experienced developers."]}),"\n",(0,i.jsx)(n.h3,{id:"enhanced-api-documentation",children:"Enhanced API Documentation"}),"\n",(0,i.jsxs)(n.p,{children:["We've transitioned from WebDoc to ",(0,i.jsx)(n.strong,{children:"TypeDoc"})," for our API generation. This change brings improved support for TypeScript and allows us to provide more detailed and accurate information throughout the documentation."]}),"\n",(0,i.jsxs)(n.p,{children:["Alongside this technical shift, we've also rethought how the ",(0,i.jsx)(n.a,{href:"https://pixijs.download/release/docs/index.html",children:"API Documentation"})," is organized. Rather than presenting everything in a single, monolithic reference, we've categorized the APIs into two sections: ",(0,i.jsx)(n.strong,{children:"Standard"})," and ",(0,i.jsx)(n.strong,{children:"Advanced"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standard"})," APIs cover the most commonly used features\u2014these are the essentials for building most PixiJS applications."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Advanced"})," APIs include more complex or specialized tools that are valuable for specific use cases, but not necessary for all users."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This new structure is designed to reduce cognitive load for newcomers. Developers can focus on the most relevant APIs without being overwhelmed by the full scope of the library."}),"\n",(0,i.jsxs)(n.p,{children:["For those who need access to more advanced features, there's a simple toggle in the top-right corner of the API documentation labeled ",(0,i.jsx)(n.strong,{children:'"Advanced"'}),". Enabling it reveals the full API surface when needed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"API Documentation Screenshot",src:t(39724).Z+"",width:"1549",height:"235"})}),"\n",(0,i.jsxs)(n.p,{children:["We've also taken this opportunity to improve the clarity of the documentation itself. For each ",(0,i.jsx)(n.strong,{children:"Standard"})," API, we aim to provide:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A clear explanation of its purpose"}),"\n",(0,i.jsx)(n.li,{children:"Practical usage examples"}),"\n",(0,i.jsx)(n.li,{children:"Links to related APIs for easier exploration"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These improvements are intended to help developers better understand how to use PixiJS effectively\u2014whether they're just getting started or looking to dig deeper."}),"\n",(0,i.jsx)(n.h3,{id:"public-vs-internal-apis",children:"Public vs Internal APIs"}),"\n",(0,i.jsx)(n.p,{children:"To help define a clearer boundary between what developers should rely on and what is meant for internal use, we've audited the entire codebase and marked APIs accordingly. Internal methods are now excluded from the API docs. This makes the public API surface more stable and reduces the risk of unintentional dependency on internal behaviors."}),"\n",(0,i.jsx)(n.h2,{id:"new-features--",children:"New Features  \uD83C\uDF89"}),"\n",(0,i.jsx)(n.p,{children:"Now that we've covered the documentation overhaul, let's dive into the new features introduced in PixiJS v8.10.0:"}),"\n",(0,i.jsx)(n.h3,{id:"baked-text-filters",children:"Baked Text Filters"}),"\n",(0,i.jsx)(n.p,{children:"Text filters can now be applied at creation time, baking the effect directly into the texture. This avoids runtime filter costs and allows more expressive styles, such as outlines and drop shadows, without performance penalties."}),"\n",(0,i.jsxs)(n.p,{children:["To use this feature, you can now specify filters directly in the ",(0,i.jsx)(n.code,{children:"TextStyle"})," configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const style = new TextStyle({\n  fontFamily: 'Arial',\n  fontSize: 36,\n  fill: '#ffffff',\n  filters: [new BlurFilter()],\n});\nconst text = new PIXI.Text({ text: 'Hello, PixiJS!', style });\n"})}),"\n",(0,i.jsx)(a.k,{files:{"index.js":l.Z,"CartoonTextFilter.js":c.Z,"cartoonText.vert":u.Z,"cartoonText.frag":d.Z,"cartoonText.wgsl":h.Z}}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, a new ",(0,i.jsx)(n.code,{children:"generateFilteredTexture"})," method has been added to ",(0,i.jsx)(n.code,{children:"filterSystem"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const blurFilter = new BlurFilter();\nconst filteredTexture = renderer.filters.generateFilteredTexture({\n  texture,\n  filters: [blurFilter],\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"text-trimming",children:"Text Trimming"}),"\n",(0,i.jsx)(n.p,{children:"Automatically remove unnecessary whitespace around text."}),"\n",(0,i.jsx)(n.admonition,{title:"PERFORMANCE WARNING",type:"warning",children:(0,i.jsxs)(n.p,{children:["This is a costly operation as it requires scanning pixel alpha values.\nAvoid using ",(0,i.jsx)(n.code,{children:"trim: true"})," for dynamic text, as it could significantly impact performance."]})}),"\n",(0,i.jsxs)(n.p,{children:["To enable text trimming, simply set the ",(0,i.jsx)(n.code,{children:"trim"})," property in the ",(0,i.jsx)(n.code,{children:"TextStyle"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const style = new TextStyle({\n  fontFamily: 'Arial',\n  fontSize: 36,\n  fill: '#ffffff',\n  trim: true, // Enable text trimming\n});\nconst text = new Text({ text: '   Hello, PixiJS!   ', style });\n"})}),"\n",(0,i.jsx)(a.k,{files:{"index.js":s.Z}}),"\n",(0,i.jsx)(n.p,{children:"This method applies one or more filters to a texture and returns a new, filtered result."}),"\n",(0,i.jsx)(n.h3,{id:"texture-scale-modes",children:"Texture Scale Modes"}),"\n",(0,i.jsx)(n.p,{children:"You can now explicitly set texture filtering for text, useful when rendering pixel fonts or when you need control over how the texture is sampled."}),"\n",(0,i.jsxs)(n.p,{children:["To adjust the texture scale mode, use the ",(0,i.jsx)(n.code,{children:"textureStyle"})," property in the ",(0,i.jsx)(n.code,{children:"TextStyle"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const style = new TextStyle({\n  fontFamily: 'Arial',\n  fontSize: 36,\n  fill: '#ffffff',\n  textureStyle: {\n    scaleMode: 'nearest', // Set the texture scale mode\n  },\n});\nconst text = new Text({ text: 'Hello, PixiJS!', style });\n"})}),"\n",(0,i.jsx)(a.k,{files:{"index.js":p.Z}}),"\n",(0,i.jsx)(n.h2,{id:"highlights-from-v890-and-v880",children:"Highlights from v8.9.0 and v8.8.0"}),"\n",(0,i.jsx)(n.p,{children:"We missed highlighting the previous two releases, so here are some key features from v8.9.0 and v8.8.0:"}),"\n",(0,i.jsx)(n.h3,{id:"dom-container",children:"DOM Container"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DOMContainer"})," lets developers transform and animate DOM elements in sync with PixiJS scenes. This is useful for overlaying native inputs, textareas, or other HTML controls while retaining control over their positioning and rotation."]}),"\n",(0,i.jsx)(a.k,{files:{"index.js":f.Z}}),"\n",(0,i.jsx)(n.h3,{id:"nineslice-sprite-anchor",children:"NineSlice Sprite Anchor"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"NineSliceSprite"})," now supports the ",(0,i.jsx)(n.code,{children:"anchor"})," property, allowing rotation and scaling behaviors to work as they do for other sprites."]}),"\n",(0,i.jsx)(a.k,{files:{"index.js":x.Z}}),"\n",(0,i.jsx)(n.h2,{id:"looking-ahead",children:"Looking Ahead"}),"\n",(0,i.jsx)(n.p,{children:"Starting with v8.10.0, we're moving to a monthly release cadence for PixiJS. This will allow us to ship improvements, bug fixes, and new features more predictably and keep the project evolving at a steady pace."}),"\n",(0,i.jsx)(n.p,{children:"While the size and scope of each release may vary, the goal is to provide incremental updates that are easier to adopt and integrate into projects."}),"\n",(0,i.jsxs)(n.p,{children:["You can review the complete changelog ",(0,i.jsx)(n.a,{href:"https://github.com/pixijs/pixijs/releases/tag/v8.10.0",children:"here"}),", or join the discussion on ",(0,i.jsx)(n.a,{href:"https://discord.gg/QrnxmQUPGV",children:"Discord"})," or ",(0,i.jsx)(n.a,{href:"https://github.com/pixijs/pixijs/discussions/new/choose",children:"GitHub"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Thank you for using PixiJS, and we look forward to seeing what you create with these new features!"})]})}function T(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},19995:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Application, DOMContainer } from 'pixi.js';\n\n(async () =>\n{\n    const app = new Application();\n\n    await app.init({ backgroundColor: 0x1099bb, resizeTo: window });\n    document.body.appendChild(app.canvas);\n    document.body.style = 'margin: 0; overflow: hidden';\n\n    // Create a DOM element\n    const element = document.createElement('textarea');\n\n    element.value = 'Type here...';\n\n    // Create a DOM container\n    const domContainer = new DOMContainer({\n        element,\n        x: app.screen.width / 2,\n        y: app.screen.height / 2,\n        anchor: 0.5\n    });\n\n    // Add it to your scene\n    app.stage.addChild(domContainer);\n\n    app.ticker.add(() =>\n    {\n        // Rotate the DOM container\n        domContainer.rotation += 0.01;\n    });\n})();\n"},51882:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Application, Assets, NineSliceSprite, Text } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // Load the bunny texture\n    const texture = await Assets.load('https://pixijs.com/assets/nine-slice/panel-031.png');\n\n    // Create a NineSliceSprite\n    const bunny = new NineSliceSprite({\n        texture,\n        leftWidth: 30, // Width of the left edge\n        rightWidth: 30, // Width of the right edge\n        topHeight: 30, // Height of the top edge\n        bottomHeight: 30, // Height of the bottom edge\n\n        anchor: 0.5, // Center the sprite's anchor point\n\n        x: app.screen.width / 2, // Move the sprite to the center of the screen\n        y: app.screen.height / 2,\n    });\n\n    bunny.width = app.screen.width / 2; // Set the width of the sprite\n    bunny.height = app.screen.height / 2; // Set the height of the sprite\n\n    app.stage.addChild(bunny);\n\n    app.ticker.add((time) =>\n    {\n        bunny.rotation += 0.01; // Rotate the sprite over time from the center\n    });\n})();\n"},96302:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Color, Filter, GlProgram, GpuProgram, UniformGroup } from 'pixi.js';\nimport fragment from './cartoonText.frag?raw';\nimport vertex from './cartoonText.vert?raw';\nimport source from './cartoonText.wgsl?raw';\n\nconst defaultOptions = {\n    thickness: 1,\n    borderColor: 0xFFFFFF,\n    topColor: 0xed427c,\n    bottomColor: 0xe91e63,\n};\n\n/**\n * CartoonTextFilter creates a cartoon-style text effect with outlines, shadows, and gradients.\n *\n * @example\n * ```js\n * import { CartoonTextFilter } from './CartoonTextFilter';\n *\n * const cartoonFilter = new CartoonTextFilter({\n *   thickness: 2.0,\n *   borderColor: 0x000000,\n *   topColor: 0xFFFFFF,\n *   bottomColor: 0x888888\n * });\n * text.filters = [cartoonFilter];\n * ```\n */\nexport class CartoonTextFilter extends Filter\n{\n    constructor(options)\n    {\n        const { thickness, borderColor, topColor, bottomColor } = { ...defaultOptions, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'cartoon-text-filter'\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            padding: thickness * 2.1,\n            resources: {\n                cartoonTextUniforms: new UniformGroup({\n                    uThickness: { value: thickness, type: 'f32' },\n                    uBorderColor: { value: new Color(borderColor), type: 'vec3<f32>' },\n                    uTopColor: { value: new Color(topColor), type: 'vec3<f32>' },\n                    uBottomColor: { value: new Color(bottomColor), type: 'vec3<f32>' },\n                }),\n            }\n        });\n    }\n\n    /**\n     * The thickness of the outline effect.\n     * @default 2.0\n     */\n    get thickness()\n    {\n        const uniforms = this.resources.cartoonTextUniforms.uniforms;\n\n        return uniforms.uThickness;\n    }\n\n    set thickness(value)\n    {\n        const uniforms = this.resources.cartoonTextUniforms.uniforms;\n\n        uniforms.uThickness = value;\n    }\n}\n\nfunction getAngleStep(quality)\n{\n    return parseFloat(((Math.PI * 2) / Math.max(\n        quality * 100,\n        1,\n    )).toFixed(7));\n}\n"},29021:function(e,n,t){t.d(n,{Z:function(){return o}});let o="precision highp float;\nin vec2 vTextureCoord;\nout vec4 finalColor;\n\nuniform sampler2D uTexture;\nuniform float uThickness;\nuniform vec3 uBorderColor;\nuniform vec3 uTopColor;\nuniform vec3 uBottomColor;\n\nin vec2 vOut;\n\nuniform vec4 uInputClamp;\nuniform vec4 uInputSize;\n\nconst float DOUBLE_PI = 6.28318530718; // 2 * PI\nconst float ANGLE_STEP = 0.0628319;\n\nfloat outlineMaxAlphaAtPos(vec2 pos) {\n    vec2 thickness = vec2(uThickness) / uInputSize.xy;\n    float maxAlpha = 0.0;\n\n    for (float angle = 0.0; angle <= DOUBLE_PI; angle += ANGLE_STEP) {\n        vec2 displacedPos = pos + thickness * vec2(cos(angle), sin(angle));\n        vec4 displacedColor = texture(uTexture, clamp(displacedPos, uInputClamp.xy, uInputClamp.zw));\n        maxAlpha = max(maxAlpha, displacedColor.a);\n    }\n\n    return maxAlpha;\n}\n\nvoid main(void) {\n    vec4 contentColor = texture(uTexture, vTextureCoord);\n    vec2 thickness = uThickness / uInputSize.xy;\n    vec2 offset = vec2(0.0, thickness.y * 0.6);\n\n    float outlineAlpha = outlineMaxAlphaAtPos(vTextureCoord) * (1.0 - contentColor.a);\n    vec4 outlineColor = vec4(uBorderColor * outlineAlpha, outlineAlpha);\n\n    float outlineBaseAlpha = outlineMaxAlphaAtPos(vTextureCoord - offset);\n    vec4 outlineBaseColor = vec4(mix(uBorderColor, vec3(0.0), 0.35) * outlineBaseAlpha, outlineBaseAlpha);\n    outlineBaseColor *= (1.0 - outlineAlpha) * (1.0 - contentColor.a);\n\n    float outlineDropShadowAlpha = outlineMaxAlphaAtPos(vTextureCoord - (offset * 2.0));\n    vec4 outlineDropShadowColor = vec4(vec3(0.0) * outlineDropShadowAlpha, outlineDropShadowAlpha) * 0.3;\n    outlineDropShadowColor *= (1.0 - outlineAlpha) * (1.0 - contentColor.a);\n\n    vec4 innerShadowAlpha = texture(uTexture, vTextureCoord + vec2(0.0, -thickness.y * 0.35));\n    innerShadowAlpha.a = (1.0 - innerShadowAlpha.a) * contentColor.a;\n    vec4 innerShadowColor = vec4(vec3(0.0) * innerShadowAlpha.a, innerShadowAlpha.a) * 0.3;\n\n    float curveAmount = -0.05;\n    float horizonY = 0.54 + curveAmount * sin(vOut.x * 3.14159);\n    float gradientStart = horizonY - 0.005;\n    float gradientEnd = horizonY + 0.005;\n    float gradientRatio = smoothstep(gradientStart, gradientEnd, vOut.y);\n\n    vec4 gradientColor = mix(vec4(uTopColor, 1.0), vec4(uBottomColor, 1.0), gradientRatio);\n    gradientColor *= contentColor.a;\n\n    finalColor = mix(gradientColor, innerShadowColor, innerShadowColor.a) + outlineColor + outlineBaseColor + outlineDropShadowColor;\n}"},50358:function(e,n,t){t.d(n,{Z:function(){return o}});let o="in vec2 aPosition;\nout vec2 vTextureCoord;\nout vec2 vOut;\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\nvec4 filterVertexPosition( void ) {\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n    return vec4(position, 0.0, 1.0);\n}\nvec2 filterTextureCoord( void ) {\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\nvoid main(void) {\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n    vOut = aPosition;\n}\n"},12605:function(e,n,t){t.d(n,{Z:function(){return o}});let o="struct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\nstruct CartoonTextUniforms {\n  uThickness:f32,\n  uBorderColor:vec3<f32>,\n  uTopColor:vec3<f32>,\n  uBottomColor:vec3<f32>,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler : sampler;\n\n@group(1) @binding(0) var<uniform> cartoonTextUniforms : CartoonTextUniforms;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) vOut : vec2<f32>,\n};\n\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n) -> VSOutput {\n  return VSOutput(\n   filterVertexPosition(aPosition),\n   filterTextureCoord(aPosition),\n   aPosition,\n  );\n}\n\nconst DOUBLE_PI: f32 = 6.28318530718; // 2 * PI\nconst ANGLE_STEP: f32 = 0.0628319;\n\nfn outlineMaxAlphaAtPos(pos: vec2<f32>) -> f32 {\n    let thickness = vec2<f32>(cartoonTextUniforms.uThickness) / gfu.uInputSize.xy;\n    var maxAlpha: f32 = 0.0;\n\n    for (var angle: f32 = 0.0; angle <= DOUBLE_PI; angle += ANGLE_STEP) {\n        let displacedPos = pos + thickness * vec2<f32>(cos(angle), sin(angle));\n        let displacedColor = textureSample(uTexture, uSampler, clamp(displacedPos, gfu.uInputClamp.xy, gfu.uInputClamp.zw));\n        maxAlpha = max(maxAlpha, displacedColor.a);\n    }\n\n    return maxAlpha;\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) vOut: vec2<f32>,\n) -> @location(0) vec4<f32> {\n\n    let contentColor = textureSample(uTexture, uSampler, uv);\n    let thickness = cartoonTextUniforms.uThickness / gfu.uInputSize.xy;\n    let offset = vec2<f32>(0.0, thickness.y * 0.6);\n\n    let outlineAlpha = outlineMaxAlphaAtPos(uv) * (1.0 - contentColor.a);\n    let outlineColor = vec4<f32>(cartoonTextUniforms.uBorderColor * outlineAlpha, outlineAlpha);\n\n    let outlineBaseAlpha = outlineMaxAlphaAtPos(uv - offset);\n    var outlineBaseColor = vec4<f32>(mix(cartoonTextUniforms.uBorderColor, vec3<f32>(0.0), 0.35) * outlineBaseAlpha, outlineBaseAlpha);\n    outlineBaseColor *= (1.0 - outlineAlpha) * (1.0 - contentColor.a);\n\n    let outlineDropShadowAlpha = outlineMaxAlphaAtPos(uv - (offset * 2.0));\n    var outlineDropShadowColor = vec4<f32>(vec3<f32>(0.0) * outlineDropShadowAlpha, outlineDropShadowAlpha) * 0.3;\n    outlineDropShadowColor *= (1.0 - outlineAlpha) * (1.0 - contentColor.a);\n\n    let innerShadowAlpha = textureSample(uTexture, uSampler, uv + vec2<f32>(0.0, -thickness.y * 0.35));\n    let innerShadowAlphaValue = (1.0 - innerShadowAlpha.a) * contentColor.a;\n    let innerShadowColor = vec4<f32>(vec3<f32>(0.0) * innerShadowAlphaValue, innerShadowAlphaValue) * 0.3;\n\n    let curveAmount: f32 = -0.05;\n    let horizonY = 0.54 + curveAmount * sin(vOut.x * 3.14159);\n    let gradientStart = horizonY - 0.005;\n    let gradientEnd = horizonY + 0.005;\n    let gradientRatio = smoothstep(gradientStart, gradientEnd, vOut.y);\n\n    var gradientColor = mix(vec4<f32>(cartoonTextUniforms.uTopColor, 1.0), vec4<f32>(cartoonTextUniforms.uBottomColor, 1.0), gradientRatio);\n    gradientColor *= contentColor.a;\n\n    return mix(gradientColor, innerShadowColor, innerShadowColor.a) + outlineColor + outlineBaseColor + outlineDropShadowColor;\n} "},57020:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Application, Assets, Text } from 'pixi.js';\nimport { CartoonTextFilter } from './CartoonTextFilter';\n\n(async () =>\n{\n    const app = new Application();\n\n    await app.init({\n        resizeTo: window,\n        backgroundColor: '#1099bb',\n        autoDensity: true,\n        antialias: true,\n    });\n    document.body.appendChild(app.canvas);\n\n    await Assets.load('https://pixijs.com/assets/webfont-loader/Grandstander-ExtraBold.ttf');\n\n    const filter = new CartoonTextFilter({\n        thickness: 7,\n    });\n\n    const text = new Text({\n        text: 'Hello World!',\n        style: {\n            fontFamily: 'Grandstander ExtraBold',\n            fontSize: 70,\n            fill: 0xFFFFFF,\n            padding: 0,\n            filters: [filter],\n            fontWeight: '800',\n        },\n        x: app.screen.width / 2,\n        y: app.screen.height / 2,\n        anchor: 0.5,\n    });\n\n    app.stage.addChild(text);\n})();\n"},16211:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Application, Assets, BitmapFont, BitmapText, Text } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    await Assets.load('https://pixijs.com/assets/webfont-loader/PixelifySans.ttf');\n\n    BitmapFont.install({\n        name: 'Custom',\n        style: {\n            fontFamily: 'PixelifySans',\n            fontSize: 140,\n            fill: '#ffffff',\n        },\n        chars: [['a', 'z'], ['A', 'Z'], ['0', '9']],\n        resolution: 2,\n        padding: 4,\n        textureStyle: {\n            scaleMode: 'nearest'\n        }\n    });\n\n    const text = new BitmapText({\n        text: 'Nearest',\n        style: {\n            fontFamily: 'Custom',\n            fontSize: 70,\n            fill: 'white',\n            align: 'center',\n        },\n        scale: 2,\n        anchor: 0.5,\n        position: { x: window.innerWidth / 2, y: window.innerHeight / 2 - 75 },\n    });\n\n    const text2 = new Text({\n        text: 'Linear',\n        style: {\n            fontFamily: 'PixelifySans',\n            fontSize: 70,\n            fill: 'white',\n            align: 'center',\n        },\n        scale: 2,\n        textureStyle: {\n            scaleMode: 'linear',\n        },\n        anchor: 0.5,\n        position: { x: window.innerWidth / 2, y: window.innerHeight / 2 + 75 },\n    });\n\n    app.stage.addChild(text, text2);\n})();\n"},56447:function(e,n,t){t.d(n,{Z:function(){return o}});let o="import { Application, Graphics, Text } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    const text = new Text({\n        text: 'UNTRIMMED TEXT',\n        style: {\n            fontFamily: 'Arial',\n            fontSize: 60,\n            fill: 'white',\n        },\n        anchor: 0.5,\n        position: { x: window.innerWidth / 2, y: window.innerHeight / 2 - 50 },\n    });\n\n    app.stage.addChild(text);\n\n    const text2 = new Text({\n        text: 'TRIMMED TEXT',\n        style: {\n            fontFamily: 'Arial',\n            fontSize: 60,\n            fill: 'white',\n            trim: true, // Enable text trimming\n        },\n        anchor: 0.5,\n        position: { x: window.innerWidth / 2, y: window.innerHeight / 2 + text.height + 10 },\n    });\n\n    app.stage.addChild(text2);\n\n    const tb = text.getBounds();\n    const textRect = new Graphics();\n\n    textRect.rect(tb.x, tb.y, tb.width, tb.height);\n    textRect.stroke({ width: 2, color: '#FFD600' });\n    app.stage.addChild(textRect);\n\n    const tb2 = text2.getBounds();\n    const textRect2 = new Graphics();\n\n    textRect2.rect(tb2.x, tb2.y, tb2.width, tb2.height);\n    textRect2.stroke({ width: 2, color: '#FFD600' });\n    app.stage.addChild(textRect2);\n})();\n"},39724:function(e,n,t){t.d(n,{Z:function(){return o}});let o=t.p+"assets/images/typedoc-advanced-a102a629a39f8549797a1b026ba8d767.png"},20888:function(e,n,t){t.d(n,{k:function(){return r}});var o=t(85893),i=t(3105);function r(e){return(0,o.jsx)(i.M,{height:400,width:700,viewType:"preview",...e})}},76081:function(e){e.exports=JSON.parse('{"permalink":"/blog/8.10.0","source":"@site/blog/2025-06-05-pixi-v8.10.0.mdx","title":"PixiJS Update - v8.10.0","description":"A look at the 8.10.0 release of PixiJS.","date":"2025-06-05T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Documentation","permalink":"/blog/tags/documentation"}],"readingTime":5.45,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - v8.10.0","description":"A look at the 8.10.0 release of PixiJS.","slug":"8.10.0","authors":"zyie","tags":["PixiJS","Updates","Documentation"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Documentation","Text Features"]},"unlisted":false,"nextItem":{"title":"PixiJS Layout v3 is here! \uD83C\uDF89","permalink":"/blog/layout-v3"}}')}}]);