"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["1801"],{74192:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>o,default:()=>h,toc:()=>p,metadata:()=>t,assets:()=>m,contentTitle:()=>d});var t=JSON.parse('{"id":"examples/mesh-and-shaders/shared-shader","title":"Shared Shader","description":"<ExampleEditor","source":"@site/docs/examples/mesh-and-shaders/shared-shader.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/shared-shader","permalink":"/8.x/examples/mesh-and-shaders/shared-shader","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":7,"custom_edit_url":null,"title":"Shared Shader"},"sidebar":"examplesSidebar","previous":{"title":"Shared Geometry","permalink":"/8.x/examples/mesh-and-shaders/shared-geometry"},"next":{"title":"Instanced Geometry","permalink":"/8.x/examples/mesh-and-shaders/instanced-geometry"}}'),r=a(85893),s=a(50065),i=a(31531);let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:7,custom_edit_url:null,title:"Shared Shader"},d=void 0,m={},p=[];function l(e){return(0,r.jsx)(i.N,{files:{"index.js":"import { Application, Assets, Geometry, Mesh, Shader } from 'pixi.js';\nimport fragment from './sharedShader.frag';\nimport vertex from './sharedShader.vert';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({\n    resizeTo: window,\n    preference: 'webgl',\n  });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const quadGeometry = new Geometry({\n    attributes: {\n      aPosition: [\n        -100,\n        -100, // x, y\n        100,\n        -100, // x, y\n        100,\n        100, // x, y,\n        -100,\n        100, // x, y,\n      ],\n      aUV: [0, 0, 1, 0, 1, 1, 0, 1],\n    },\n    indexBuffer: [0, 1, 2, 0, 2, 3],\n  });\n\n  const geometry = new Geometry({\n    attributes: {\n      aPosition: [\n        -100,\n        -100, // x, y\n        100,\n        -100, // x, y\n        100,\n        100, // x, y,\n      ],\n      aUV: [0, 0, 1, 0, 1, 1],\n    },\n  });\n\n  const shader = Shader.from({\n    gl: {\n      vertex,\n      fragment,\n    },\n    resources: {\n      uTexture: (await Assets.load('https://pixijs.com/assets/bg_rotate.jpg')).source,\n    },\n  });\n\n  const quad = new Mesh({\n    geometry: quadGeometry,\n    shader,\n  });\n\n  const triangle = new Mesh({\n    geometry,\n    shader,\n  });\n\n  quad.position.set(400, 300);\n  triangle.position.set(400, 300);\n  triangle.scale.set(2);\n\n  app.stage.addChild(quad, triangle);\n\n  app.ticker.add(() => {\n    triangle.rotation += 0.01;\n    quad.rotation -= 0.01;\n  });\n})();\n","sharedShader.vert":"in vec2 aPosition;\nin vec2 aUV;\n\nout vec2 vUV;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\n\nuniform mat3 uTransformMatrix;\n\n\nvoid main() {\n\n    mat3 mvp = uProjectionMatrix * uWorldTransformMatrix * uTransformMatrix;\n    gl_Position = vec4((mvp * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n\n    vUV = aUV;\n}","sharedShader.frag":"in vec2 vUV;\n\nuniform sampler2D uTexture;\n\nvoid main() {\n    gl_FragColor = texture2D(uTexture, vUV).bgra;\n}"}})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);