"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["393"],{57864:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,default:()=>h,toc:()=>d,metadata:()=>s,assets:()=>l,contentTitle:()=>a});var s=JSON.parse('{"id":"guides/components/scene-objects/text/bitmap","title":"Bitmap Text","description":"Learn how to use BitmapText in PixiJS for high-performance text rendering with pre-generated texture atlases.","source":"@site/docs/guides/components/scene-objects/text/bitmap.md","sourceDirName":"guides/components/scene-objects/text","slug":"/guides/components/scene-objects/text/bitmap","permalink":"/8.x/guides/components/scene-objects/text/bitmap","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/scene-objects/text/bitmap.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Learn how to use BitmapText in PixiJS for high-performance text rendering with pre-generated texture atlases."},"sidebar":"guidesSidebar","previous":{"title":"Text (Canvas)","permalink":"/8.x/guides/components/scene-objects/text/canvas"},"next":{"title":"HTML Text","permalink":"/8.x/guides/components/scene-objects/text/html"}}'),i=n(85893),r=n(50065);let o={sidebar_position:1,description:"Learn how to use BitmapText in PixiJS for high-performance text rendering with pre-generated texture atlases."},a="Bitmap Text",l={},d=[{value:"<strong>Why Use <code>BitmapText</code>?</strong>",id:"why-use-bitmaptext",level:2},{value:"<strong>How to Load and Use Bitmap Fonts</strong>",id:"how-to-load-and-use-bitmap-fonts",level:2},{value:"Font Loading",id:"font-loading",level:3},{value:"MSDF and SDF Fonts",id:"msdf-and-sdf-fonts",level:3},{value:"\u274C Cannot Update Resolution",id:"-cannot-update-resolution",level:3},{value:"\u26A0\uFE0F Large Character Sets Not Practical",id:"\uFE0F-large-character-sets-not-practical",level:3},{value:"<strong>API Reference</strong>",id:"api-reference",level:2}];function c(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"bitmap-text",children:"Bitmap Text"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"BitmapText"})," is a high-performance text rendering solution in PixiJS. Unlike the ",(0,i.jsx)(t.code,{children:"Text"})," class, which rasterizes each string into a new texture, ",(0,i.jsx)(t.code,{children:"BitmapText"})," draws characters from a pre-generated texture atlas. This design allows you to render tens of thousands of text objects with minimal overhead."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { Assets, BitmapText } from 'pixi.js';\n\nawait Assets.load('fonts/MyFont.fnt');\n\nconst text = new BitmapText({\n  text: 'Loaded font!',\n  style: {\n    fontFamily: 'MyFont',\n    fontSize: 32,\n    fill: '#ffcc00',\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"why-use-bitmaptext",children:(0,i.jsxs)(t.strong,{children:["Why Use ",(0,i.jsx)(t.code,{children:"BitmapText"}),"?"]})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\u2705 ",(0,i.jsx)(t.strong,{children:"Fast rendering"}),": Perfect for HUDs, score counters, timers, etc."]}),"\n",(0,i.jsxs)(t.li,{children:["\u2705 ",(0,i.jsx)(t.strong,{children:"No per-frame rasterization"}),": Text changes are cheap."]}),"\n",(0,i.jsxs)(t.li,{children:["\u2705 ",(0,i.jsx)(t.strong,{children:"Efficient memory usage"}),": Shares glyph textures across all instances."]}),"\n",(0,i.jsxs)(t.li,{children:["\u2705 ",(0,i.jsx)(t.strong,{children:"Supports MSDF/SDF fonts"}),": Crisp scaling without blurring."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Ideal use cases"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Frequently updating text"}),"\n",(0,i.jsx)(t.li,{children:"Large numbers of text instances"}),"\n",(0,i.jsx)(t.li,{children:"High-performance or mobile projects"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"how-to-load-and-use-bitmap-fonts",children:(0,i.jsx)(t.strong,{children:"How to Load and Use Bitmap Fonts"})}),"\n",(0,i.jsx)(t.h3,{id:"font-loading",children:"Font Loading"}),"\n",(0,i.jsxs)(t.p,{children:["PixiJS supports AngelCode BMFont format and MSDF-compatible ",(0,i.jsx)(t.code,{children:".fnt"})," and ",(0,i.jsx)(t.code,{children:".xml"})," files. You can load these files using the ",(0,i.jsx)(t.code,{children:"Assets"})," API."]}),"\n",(0,i.jsxs)(t.p,{children:["Once loaded, you can create a ",(0,i.jsx)(t.code,{children:"BitmapText"})," instance with the loaded font using the ",(0,i.jsx)(t.code,{children:"fontFamily"})," property."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { Assets, BitmapText } from 'pixi.js';\n\nawait Assets.load('fonts/MyFont.fnt');\n\nconst text = new BitmapText({\n  text: 'Loaded font!',\n  style: {\n    fontFamily: 'MyFont',\n    fontSize: 32,\n    fill: '#ffcc00',\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"msdf-and-sdf-fonts",children:"MSDF and SDF Fonts"}),"\n",(0,i.jsxs)(t.p,{children:["PixiJS supports ",(0,i.jsx)(t.strong,{children:"MSDF"})," (multi-channel signed distance field) and ",(0,i.jsx)(t.strong,{children:"SDF"})," formats for crisp, resolution-independent text. These fonts remain sharp at any size and scale."]}),"\n",(0,i.jsxs)(t.p,{children:["You can generate MSDF/SDF fonts using tools like ",(0,i.jsx)(t.a,{href:"https://pixijs.io/assetpack/",children:"AssetPack"})," which can take a ",(0,i.jsx)(t.code,{children:".ttf"})," or ",(0,i.jsx)(t.code,{children:".otf"})," font and generate a bitmap font atlas with MSDF/SDF support."]}),"\n",(0,i.jsx)(t.p,{children:"Using MSDF/SDF fonts is similar to using regular bitmap fonts and just requires you to load the appropriate font file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { Assets, BitmapText } from 'pixi.js';\n\nawait Assets.load('fonts/MyMSDFFont.fnt');\n\nconst text = new BitmapText({\n  text: 'Loaded MSDF font!',\n  style: {\n    fontFamily: 'MyMSDFFont',\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h1,{id:"limitations-and-caveats",children:(0,i.jsx)(t.strong,{children:"Limitations and Caveats"})}),"\n",(0,i.jsx)(t.h3,{id:"-cannot-update-resolution",children:"\u274C Cannot Update Resolution"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"BitmapText.resolution"})," is not mutable. It must be handled by the ",(0,i.jsx)(t.code,{children:"BitmapFont"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"text.resolution = 2;\n// \u26A0\uFE0F [BitmapText] dynamically updating the resolution is not supported.\n"})}),"\n",(0,i.jsx)(t.h3,{id:"\uFE0F-large-character-sets-not-practical",children:"\u26A0\uFE0F Large Character Sets Not Practical"}),"\n",(0,i.jsxs)(t.p,{children:["Bitmap fonts are limited by texture size. CJK or emoji-rich sets may require too much memory. Use ",(0,i.jsx)(t.code,{children:"Text"})," or ",(0,i.jsx)(t.code,{children:"HTMLText"})," for dynamic internationalization or emoji support."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"api-reference",children:(0,i.jsx)(t.strong,{children:"API Reference"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/scene.BitmapText.html",children:"BitmapText"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/text.BitmapFont.html",children:"BitmapFont"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/assets.Assets.html",children:"Assets"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/text.TextStyle.html",children:"TextStyle"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/scene.FillStyle.html",children:"FillStyle"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://pixijs.download/release/docs/scene.StrokeStyle.html",children:"StrokeStyle"})}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);