"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["3737"],{18706:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>o,metadata:()=>r,assets:()=>l,toc:()=>m,contentTitle:()=>d});var r=JSON.parse('{"id":"examples/mesh-and-shaders/shared-geometry","title":"Shared Geometry","description":"<ExampleEditor files={{","source":"@site/docs/examples/mesh-and-shaders/shared-geometry.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/shared-geometry","permalink":"/8.x/examples/mesh-and-shaders/shared-geometry","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":6,"custom_edit_url":null,"title":"Shared Geometry"},"sidebar":"examplesSidebar","previous":{"title":"Triangle Textured","permalink":"/8.x/examples/mesh-and-shaders/triangle-textured"},"next":{"title":"Shared Shader","permalink":"/8.x/examples/mesh-and-shaders/shared-shader"}}'),a=t("85893"),s=t("50065"),i=t("43076");let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:6,custom_edit_url:null,title:"Shared Geometry"},d=void 0,l={},m=[];function p(e){return(0,a.jsx)(i.N,{files:{"index.js":"import { Application, Assets, Geometry, GlProgram, Mesh, Shader } from 'pixi.js';\nimport fragment from './sharedGeometry.frag';\nimport vertex from './sharedGeometry.vert';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({\n        resizeTo: window,\n        preference: 'webgl',\n    });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    const geometry = new Geometry({\n        attributes: {\n            aPosition: [\n                -100,\n                -100, // x, y\n                100,\n                -100, // x, y\n                100,\n                100, // x, y,\n            ],\n            aUV: [0, 0, 1, 0, 1, 1],\n        },\n    });\n\n    const glProgram = GlProgram.from({\n        vertex,\n        fragment,\n    });\n\n    const triangle = new Mesh({\n        geometry,\n        shader: new Shader({\n            glProgram,\n            resources: {\n                uTexture: (await Assets.load('https://pixijs.com/assets/bg_scene_rotate.jpg')).source,\n            },\n        }),\n    });\n\n    const triangle2 = new Mesh({\n        geometry,\n        shader: new Shader({\n            glProgram,\n            resources: {\n                uTexture: (await Assets.load('https://pixijs.com/assets/bg_rotate.jpg')).source,\n            },\n        }),\n    });\n\n    const triangle3 = new Mesh({\n        geometry,\n        shader: new Shader({\n            glProgram,\n            resources: {\n                uTexture: (await Assets.load('https://pixijs.com/assets/bg_displacement.jpg')).source,\n            },\n        }),\n    });\n\n    triangle.position.set(400, 300);\n    triangle.scale.set(2);\n\n    triangle2.position.set(200, 100);\n\n    triangle3.position.set(500, 400);\n    triangle3.scale.set(3);\n\n    app.stage.addChild(triangle3, triangle2, triangle);\n\n    app.ticker.add(() =>\n    {\n        triangle.rotation += 0.01;\n        triangle2.rotation -= 0.01;\n        triangle3.rotation -= 0.005;\n    });\n})();\n","sharedGeometry.vert":"in vec2 aPosition;\nin vec2 aUV;\n\nout vec2 vUV;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\n\nuniform mat3 uTransformMatrix;\n\n\nvoid main() {\n\n    mat3 mvp = uProjectionMatrix * uWorldTransformMatrix * uTransformMatrix;\n    gl_Position = vec4((mvp * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n\n    vUV = aUV;\n}","sharedGeometry.frag":"in vec2 vUV;\n\nuniform sampler2D uTexture;\n\nvoid main() {\n    gl_FragColor = texture2D(uTexture, vUV);\n}"}})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);