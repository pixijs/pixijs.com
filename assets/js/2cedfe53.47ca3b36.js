"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["714"],{59213:function(n,a,e){e.r(a),e.d(a,{frontMatter:()=>s,default:()=>d,toc:()=>l,metadata:()=>t,assets:()=>p,contentTitle:()=>c});var t=JSON.parse('{"id":"examples/graphics/dynamic","title":"Dynamic","description":"","source":"@site/docs/examples/graphics/dynamic.mdx","sourceDirName":"examples/graphics","slug":"/examples/graphics/dynamic","permalink":"/8.x/examples/graphics/dynamic","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":2,"custom_edit_url":null,"title":"Dynamic"},"sidebar":"examplesSidebar","previous":{"title":"Advanced","permalink":"/8.x/examples/graphics/advanced"},"next":{"title":"Svg Texture Large","permalink":"/8.x/examples/graphics/svg-texture-large"}}'),i=e(85893),o=e(50065),r=e(31531);let s={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:2,custom_edit_url:null,title:"Dynamic"},c=void 0,p={},l=[];function h(n){return(0,i.jsx)(r.N,{files:{"index.js":"import { Application, Graphics } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  app.stage.eventMode = 'static';\n  app.stage.hitArea = app.screen;\n\n  const graphics = new Graphics();\n\n  // Draw a shape\n  graphics\n    .moveTo(50, 50)\n    .lineTo(250, 50)\n    .lineTo(100, 100)\n    .lineTo(250, 220)\n    .lineTo(50, 220)\n    .lineTo(50, 50)\n    .fill({ color: 0xff3300 })\n    .stroke({ width: 10, color: 0xffd900 });\n\n  // Draw a second shape\n  graphics\n    .moveTo(210, 300)\n    .lineTo(450, 320)\n    .lineTo(570, 350)\n    .quadraticCurveTo(600, 0, 480, 100)\n    .lineTo(330, 120)\n    .lineTo(410, 200)\n    .lineTo(210, 300)\n    .fill({ color: 0xff700b })\n    .stroke({ width: 10, color: 0xff0000, alpha: 0.8 });\n\n  // Draw a rectangle\n  graphics.rect(50, 250, 100, 100);\n  graphics.stroke({ width: 2, color: 0x0000ff });\n\n  // Draw a circle\n  graphics.circle(470, 200, 100);\n  graphics.fill({ color: 0xffff0b, alpha: 0.5 });\n\n  graphics.moveTo(30, 30);\n  graphics.lineTo(600, 300);\n  graphics.stroke({ width: 20, color: 0x33ff00 });\n\n  app.stage.addChild(graphics);\n\n  // Let's create a moving shape\n  const thing = new Graphics();\n\n  app.stage.addChild(thing);\n  thing.x = 800 / 2;\n  thing.y = 600 / 2;\n\n  let count = 0;\n\n  // Just click on the stage to draw random lines\n  window.app = app;\n  app.stage.on('pointerdown', () => {\n    graphics.moveTo(Math.random() * 800, Math.random() * 600);\n    graphics.bezierCurveTo(\n      Math.random() * 800,\n      Math.random() * 600,\n      Math.random() * 800,\n      Math.random() * 600,\n      Math.random() * 800,\n      Math.random() * 600,\n    );\n    graphics.stroke({ width: Math.random() * 30, color: Math.random() * 0xffffff });\n  });\n\n  // Animate the moving shape\n  app.ticker.add(() => {\n    count += 0.1;\n\n    thing.clear();\n\n    thing\n      .moveTo(-120 + Math.sin(count) * 20, -100 + Math.cos(count) * 20)\n      .lineTo(120 + Math.cos(count) * 20, -100 + Math.sin(count) * 20)\n      .lineTo(120 + Math.sin(count) * 20, 100 + Math.cos(count) * 20)\n      .lineTo(-120 + Math.cos(count) * 20, 100 + Math.sin(count) * 20)\n      .lineTo(-120 + Math.sin(count) * 20, -100 + Math.cos(count) * 20)\n      .fill({ color: 0xffff00, alpha: 0.5 })\n      .stroke({ width: 10, color: 0xff0000 });\n\n    thing.rotation = count * 0.1;\n  });\n})();\n"}})}function d(n={}){let{wrapper:a}={...(0,o.a)(),...n.components};return a?(0,i.jsx)(a,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}}}]);