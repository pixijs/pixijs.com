"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["5524"],{5865:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"8.12.0","metadata":{"permalink":"/blog/8.12.0","source":"@site/blog/2025-08-06-pixi-v8.12.0.mdx","title":"PixiJS Update - v8.12.0","description":"A look at the 8.12.0 release of PixiJS and updates to the PixiJS ecosystem.","date":"2025-08-06T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Bug Fixes","permalink":"/blog/tags/bug-fixes"},{"inline":true,"label":"Bug Hunt Month","permalink":"/blog/tags/bug-hunt-month"},{"inline":true,"label":"Bug Bounty","permalink":"/blog/tags/bug-bounty"},{"inline":true,"label":"Text Improvements","permalink":"/blog/tags/text-improvements"},{"inline":true,"label":"Layout","permalink":"/blog/tags/layout"}],"readingTime":5.3,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - v8.12.0","description":"A look at the 8.12.0 release of PixiJS and updates to the PixiJS ecosystem.","slug":"8.12.0","authors":"zyie","tags":["PixiJS","Updates","Bug Fixes","Bug Hunt Month","Bug Bounty","Text Improvements","Layout"],"hide_table_of_contents":true,"keywords":["PixiJS","PixiJS Layout","Updates","Bug Fixes","Bug Hunt Month","Bug Bounty","Text"]},"unlisted":false,"nextItem":{"title":"PixiJS Update - v8.11.0","permalink":"/blog/8.11.0"}},"content":"import { EmbeddedEditor } from \'@site/src/components/Editor/EmbeddedEditor\';\\nimport OriginIndexFile from \'!!raw-loader!../docs/examples/basic/container-origin\';\\n\\nPixiJS v8.12.0 is out, and it brings with it the results of our first-ever Bug Hunt Month.\\n\\nThroughout July, we put our focus entirely on bugs, fixing them, triaging them, closing stale ones, and adding bounties for critical ones. The result? One of our most productive maintenance months to date:\\n\\n- 45 bugs fixed\\n- 250+ issues closed\\n- Dozens of triaged and clarified issues\\n- Several bounties assigned and paid out\\n\\nA big thank-you to everyone who helped report, debug, test, or fix problems during the month. We had several new contributors jump in and make meaningful improvements to the engine.\\n\\nLet\'s take a look at what\'s changed in this release.\\n\\n{/* truncate */}\\n\\n## A Few Helpful Additions\\n\\nWhile this was mostly a bug-fix release, we did sneak in a few useful additions:\\n\\n- You can now control the `scaleMode` when using `cacheAsTexture`\\n  ```ts\\n  container.cacheAsTexture({\\n    scaleMode: \'nearest\',\\n  });\\n  ```\\n- We\'ve exposed a `maxAnisotropy` property on `TextureSource` to align with other `TextureStyle` properties being passed through.\\n  ```ts\\n  texture.source.maxAnisotropy = 16;\\n  ```\\n- New `DomAdapter.createImage()` function for creating image elements. This allows environments such as Node to create things like SVG\'s.\\n  ```ts\\n  const image = DomAdapter.get().createImage();\\n  image.src = \'path/to/image.svg\';\\n  ```\\n- You can now share a WebGPU adapter/device between PixiJS and other rendering engines\\n  ```ts\\n  const adapter = await navigator.gpu.requestAdapter();\\n  const device = await adapter.requestDevice();\\n\\n  const app = new Application();\\n  await app.init({ gpu: { adapter, device } });\\n  ```\\n- Asset `loadParser` has been deprecated and replaced with `parser` and the names of the parsers have been deprecated and simplified\\n  ```ts\\n  // Old way\\n  await Assets.load({ src: \'path/to/asset\', data: { loadParser: \'loadJson\' } });\\n  // New way\\n  await Assets.load({ src: \'path/to/asset\', data: { parser: \'json\' } });\\n\\n  // Name changes\\n  // \'loadJson\' -> \'json\'\\n  // \'loadSvg\' -> \'svg\'\\n  // \'loadTxt\' -> \'text\'\\n  // \'loadVideo\' -> \'video\'\\n  // \'loadWebFont\' -> \'web-font\'\\n  // \'loadBitmapFont\' -> \'bitmap-font\'\\n  // \'spritesheetLoader\' -> \'spritesheet\'\\n  // \'loadTextures\' -> \'texture\'\\n  // \'loadBasis\' -> \'basis\'\\n  // \'loadDds\' -> \'dds\'\\n  // \'loadKtx2\' -> \'ktx2\'\\n  // \'loadKtx\' -> \'ktx\'\\n  ```\\n- A new `WorkerManager.reset()` method helps release memory and reset the worker pool, which is useful for long-running applications that need to clear out old workers.\\n  ```ts\\n  app.destroy(true, true); // Destroy the app\\n  WorkerManager.reset(); // Reset the worker pool\\n  ```\\n\\n## Over 35 Bug Fixes\\n\\nThis release includes targeted fixes across a wide range of areas:\\n\\n- Masks now render correctly when outside the viewport\\n- `AnimatedSprite.destroy()` now behaves correctly\\n- HTMLText tags and styles are handled more reliably\\n- Pattern and gradient fills render as expected for installed `BitmapText`\\n- `BitmapFont` gets multiple layout and rendering fixes\\n- Several issues with masking, transform origin, and culling were resolved\\n- Accessibility and scaling quirks are addressed\\n\\nYou can view the full changelog [on GitHub](https://github.com/pixijs/pixijs/releases/v8.12.0) if you\'re interested in the details.\\n\\n## Internal Tools and Dev Experience\\n\\nBeyond the fixes and features, we also made a number of internal improvements:\\n\\n- Added StackBlitz integration to make sharing and testing easier. You can check it out here: [StackBlitz Example](https://stackblitz.com/edit/pixijs-v8?file=src%2Fmain.js)\\n- Improved our GitHub issue templates and automation around reproduction steps. We are now requiring a reproduction for new issues to help us address them more effectively. If no reproduction is provided, the issue will be closed automatically after 7 days.\\n- Updated Node compatibility to support Node 24 when building the project.\\n\\nThese changes aren\'t user-facing, but they should make contributing and debugging a smoother experience.\\n\\n---\\n\\n## Bug Bounty Program\\n\\nAs part of Bug Hunt Month, we officially launched our [bug bounty program](https://pixijs.com/8.x/bug-bounty). If you\'re a contributor, this means some issues may come with a small reward for fixing them, especially bugs that are tough to reproduce or critical to users.\\n\\nIf you\'re looking to contribute to PixiJS, this is a great way to get started. You can find all current bounty-tagged issues [here](https://github.com/pixijs/pixijs/issues?q=is%3Aissue%20state%3Aopen%20label%3A%F0%9F%92%B0Bounty).\\n\\n### Why We\'re Doing This\\n\\nWe believe in the power of open source and community collaboration. Our bug bounty program is designed to:\\n\\n- Encourage contributors to tackle important, impactful issues.\\n- Recognize the hard work involved in debugging and fixing complex problems.\\n- Acknowledge that the PixiJS core team is small and often focused on other critical tasks, your contributions help get issues resolved faster.\\n- Make PixiJS even better for everyone.\\n\\n### Sponsoring Bounties\\n\\nIf you are a developer or company working on a project and would like to sponsor a one-off bounty, please contact **Matt Karl** [@bigtimebuddy](https://github.com/bigtimebuddy) at [hello@mattkarl.com](mailto:hello@mattkarl.com) to arrange the details.\\n\\nSponsors can make one-time donations directly to our [Open Collective](https://opencollective.com/pixijs) to fund the bounty.\\n\\n---\\n\\n## PixiJS Layout v3.1.0\\n\\nAlongside the main engine update, we also shipped a new version of **PixiJS Layout**.\\n\\nThis update includes a few key quality-of-life improvements:\\n\\n- You can now define a custom default Yoga config\\n  ```ts\\n  const config = getYoga().Config.create();\\n\\n  config.setExperimentalFeatureEnabled(ExperimentalFeature.WebFlexBasis, true);\\n  setYogaConfig(config);\\n  ```\\n- New options make drag easing more controllable\\n  ```ts\\n  const container = new LayoutContainer({\\n      layout: {\\n          overflow: \'scroll\',\\n      },\\n      trackpad: {\\n          // Constrain scrolling within bounds\\n          constrain: true,\\n          // Percentage of overflow allowed when dragging beyond x-axis limit\\n          xConstrainPercent: 0.2,\\n          // Percentage of overflow allowed when dragging beyond y-axis limit\\n          yConstrainPercent: 0.2\\n      },\\n  });\\n  ```\\n\\nWe also fixed several bugs related to layout updates, reparenting, visibility, and container sizing. These fixes make layout behavior more predictable and align better with how developers expect Flexbox-style layouts to behave.\\n\\nWe\'ve also improved StackBlitz integration and our bug reporting flow here as well.\\n\\nDocumentation is available at [layout.pixijs.io](https://layout.pixijs.io)\\n\\nInstall with:\\n\\n```bash\\nnpm install @pixi/layout@3.1.0\\n```\\n\\n---\\n\\n## Get the Latest PixiJS\\n\\nInstall via npm:\\n\\n```bash\\nnpm install pixi.js@8.12.0\\n```\\n\\nOr use via CDN:\\n\\n**Development builds:**\\n\\n- https://cdn.jsdelivr.net/npm/pixi.js@8.12.0/dist/pixi.js\\n- https://cdn.jsdelivr.net/npm/pixi.js@8.12.0/dist/pixi.mjs\\n\\n**Production builds:**\\n\\n- https://cdn.jsdelivr.net/npm/pixi.js@8.12.0/dist/pixi.min.js\\n- https://cdn.jsdelivr.net/npm/pixi.js@8.12.0/dist/pixi.min.mjs\\n\\n**Documentation:** [https://pixijs.download/v8.12.0/docs/index.html](https://pixijs.download/v8.12.0/docs/index.html)\\n\\n---\\n\\n## **Conclusion**\\n\\nThat wraps up our July update. If you\'re interested in contributing, we\'re always looking for help on open issues, bounty-tagged or otherwise.\\n\\nThanks again to everyone who made Bug Hunt Month a success. We\'re excited to see what you build next!\\n\\n- [See the full release notes on GitHub](https://github.com/pixijs/pixijs/releases/v8.12.0)\\n- [Sponsor PixiJS on GitHub](https://github.com/sponsors/pixijs)\\n- [Submit your project to the Showcase](https://pixijs.com/showcase)\\n- join the discussion on [Discord](https://discord.gg/QrnxmQUPGV)\\n\\nHappy creating!\\n\\n**The PixiJS Team**"},{"id":"8.11.0","metadata":{"permalink":"/blog/8.11.0","source":"@site/blog/2025-07-03-pixi-v8.11.0.mdx","title":"PixiJS Update - v8.11.0","description":"A look at the 8.11.0 release of PixiJS.","date":"2025-07-03T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"SplitText","permalink":"/blog/tags/split-text"},{"inline":true,"label":"SplitBitmapText","permalink":"/blog/tags/split-bitmap-text"},{"inline":true,"label":"Container Origin","permalink":"/blog/tags/container-origin"},{"inline":true,"label":"replaceChild","permalink":"/blog/tags/replace-child"},{"inline":true,"label":"llms.txt","permalink":"/blog/tags/llms-txt"},{"inline":true,"label":"PixiJS Showcase","permalink":"/blog/tags/pixi-js-showcase"},{"inline":true,"label":"Sponsorship Updates","permalink":"/blog/tags/sponsorship-updates"}],"readingTime":5.18,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - v8.11.0","description":"A look at the 8.11.0 release of PixiJS.","slug":"8.11.0","authors":"zyie","tags":["PixiJS","Updates","SplitText","SplitBitmapText","Container Origin","replaceChild","llms.txt","PixiJS Showcase","Sponsorship Updates"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","SplitText","SplitBitmapText","Container Origin","replaceChild","llms.txt","PixiJS Showcase","Sponsorship Updates"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - v8.12.0","permalink":"/blog/8.12.0"},"nextItem":{"title":"PixiJS Update - v8.10.0","permalink":"/blog/8.10.0"}},"content":"import { EmbeddedEditor } from \'@site/src/components/Editor/EmbeddedEditor\';\\nimport OriginIndexFile from \'!!raw-loader!../docs/examples/basic/container-origin\';\\nimport BitmapBreakIndexFile from \'!!raw-loader!../docs/examples/text/bitmap-text-break\';\\nimport BitmapOverlapIndexFile from \'!!raw-loader!../docs/examples/text/text-split-bitmap-overlap\';\\n\\nPixiJS v8.11.0 introduces powerful new text tools for creating advanced animations and several quality-of-life improvements. Here\'s what\'s new:\\n\\n- **SplitText & SplitBitmapText:** Split text into lines, words, and characters for fine-grained control and advanced animations\\n- **New `origin` Property for Containers:** Rotate and scale around a defined point without affecting position\\n- **`replaceChild` Method:** Seamlessly swap display objects while preserving transforms\\n- **BitmapText Word Breaking:** `breakWords` now works with `BitmapText` for better layout control\\n- **llms.txt Support:** We\'ve added official support for the `llms.txt` standard to help AI tools discover and respect PixiJS v8 content.\\n- **PixiJS Showcase:** Submit your project and get featured on our new community gallery\\n- **Sponsorship Updates:** We\'re now live on [GitHub Sponsors](https://github.com/sponsors/pixijs) with new and improved sponsorship tiers\\n\\nLet\'s dive into the details.\\n\\n{/* truncate */}\\n\\n## **SplitText & SplitBitmapText**\\n\\n:::warning\\nThis feature is experimental and may change in future releases.\\nIf you encounter any issues, please report them on our [GitHub Issues page](https://github.com/pixijs/pixijs/issues).\\n:::\\n\\nWe all love animated text, but until now, breaking text into individual characters, words, or lines was a pain. With the new `SplitText` and `SplitBitmapText` classes, you can control text at any level with ease.\\n\\nYou can:\\n\\n- Animate each segment independently using tweening libraries like GSAP.\\n- Define independent \\"anchor\\" points for characters, words, and lines.\\n- Dynamically update text or style at runtime.\\n- Split existing `Text` or `BitmapText`.\\n\\n```ts\\nimport { SplitText } from \'pixi.js\';\\n\\n// Create new SplitText instance\\nconst newSplitText = new SplitText({ text: \'Hello Pixi\', style: { fontSize: 36 } });\\n\\n// Split existing Text object\\nconst myText = new Text(\'Hello Pixi\', { fontSize: 36 });\\nconst splitText = SplitText.from(myText);\\n```\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': BitmapOverlapIndexFile,\\n  }}\\n  dependencies={{ gsap: \'latest\', \'pixi.js\': \'latest\' }}\\n/>\\n\\n<br/>\\nSee full examples and usage guide [here](/8.x/guides/components/scene-objects/text/split-text).\\n\\n:::warning\\nHeads-up: When splitting characters, browser kerning is lost, so spacing may differ slightly compared to standard text. This trade-off gives you creative flexibility, but it\'s something to be aware of for pixel-perfect layouts.\\n:::\\n\\n---\\n\\n## **New `container.origin` Property**\\n\\nThe new `origin` property allows you to control where a container rotates or scales from, without shifting its position in the scene.\\n\\n```ts\\nnew Container({ origin: { x: 100, y: 100 } });\\nnew Container({ origin: 50 }); // Same as { x: 50, y: 50 }\\n```\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': OriginIndexFile,\\n  }}\\n/>\\n\\n**Why not use `pivot`?**\\n\\nWhile `pivot` changes the transform origin, it also modifies the container\u2019s position, making layout and animation logic more complex.\\n\\nThe `origin` property provides a predictable, position-stable alternative for transform control.\\n\\n---\\n\\n## **New `container.replaceChild` Method**\\n\\nThis new method allows you to swap out one display object for another within a container and the new child inherits the local transform of the old one. This means you can replace objects without losing their index, position, scale, rotation, or any other local transforms.\\n\\n```ts\\ncontainer.replaceChild(oldChild, newChild);\\n```\\n\\nThis is perfect for use cases like swapping static text with a `SplitText` version for dynamic effects.\\n\\n```ts\\nconst myText = new BitmapText({\\n  text: \'Hello Pixi\',\\n  style: {...},\\n  scale: 2,\\n  skew: { x: 0.1, y: 0.2 },\\n  anchor: { x: 0.5, y: 0.5 },\\n});\\nconst segmented = SplitBitmapText.from(myText);\\n\\n// Use the new replaceChild method to swap text\\ncontainer.replaceChild(myText, segmented);\\n```\\n\\n---\\n\\n## **Better Word Breaking for BitmapText**\\n\\nThe `breakWords` option now works with `BitmapText`. This improves layout control for projects using bitmap fonts, making it easier to manage dynamic text, labels, and UI elements.\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': BitmapBreakIndexFile,\\n  }}\\n/>\\n\\n---\\n\\n## `llms.txt` Support\\n\\nWe now officially support the `llms.txt` convention to help AI tools access accurate PixiJS documentation.\\nWe provide several documentation files for different context window sizes:\\n\\n| File                                                     | Description                                                                       |\\n| -------------------------------------------------------- | --------------------------------------------------------------------------------- |\\n| [`/llms.txt`](https://pixijs.com/llms.txt)               | Index of available documentation files                                            |\\n| [`/llms-full.txt`](https://pixijs.com/llms-full.txt)     | Complete API documentation including all classes, methods, and examples           |\\n| [`/llms-medium.txt`](https://pixijs.com/llms-medium.txt) | Compressed documentation optimized for AI tools with medium-sized context windows |\\n\\nThese files are generated automatically from our TypeScript definitions and documentation sources. They update daily to ensure LLMs and AI-powered tools can reference the most accurate, up-to-date PixiJS information.\\n\\nThis helps coding assistants, search tools, and documentation bots provide correct suggestions and avoids outdated or incorrect information being used.\\n\\n---\\n\\n## **PixiJS Showcase is Live**\\n\\nWe love seeing what you build with PixiJS. The new [PixiJS Showcase](https://pixijs.com/showcase) highlights games, websites, apps, tools, and experiments created by the community.\\n\\n<div\\n  style={{\\n    display: \'flex\',\\n    justifyContent: \'center\',\\n    alignItems: \'center\',\\n    paddingBottom: \'24px\',\\n    maxWidth: 700,\\n    margin: \'0 auto\',\\n  }}\\n>\\n  <img\\n    src={\'/images/blog/showcase.webp\'}\\n    alt=\\"Tags Example\\"\\n    style={{\\n      borderRadius: \'12px\',\\n      boxShadow: \'0 0 20px hsla(340, 82%, 52%, 0.15)\',\\n    }}\\n  />\\n</div>\\n\\nIf you\'ve made something cool, we\'d love to show it off. Just fill out the submission form on the page. We\'re always amazed by the creativity of the Pixi community!\\n\\n---\\n\\n## **Sponsorship Updates**\\n\\nPixiJS is now live on [Github Sponsors](https://github.com/sponsors/pixijs) and we\'ve revamped our sponsorship tiers to provide more value and visibility for our supporters.\\n\\nWe rely on sponsorships to keep PixiJS development sustainable, and your support helps us continue improving the library, fixing bugs, and adding new features.\\n\\n### Sponsorship Tiers\\n\\n| Tier         | Monthly | Benefits                                                                                          |\\n| ------------ | ------- | ------------------------------------------------------------------------------------------------- |\\n| **Bronze**   | \\\\$100   | Logo on our website with a link to your site                                                      |\\n| **Silver**   | \\\\$250   | Bronze benefits plus logo in release blog posts and a sponsored link in the showcase              |\\n| **Gold**     | \\\\$500   | Silver benefits plus logo on all documentation pages and in the GitHub README                     |\\n| **Gold++**   | \\\\$1000  | Gold benefits plus two sponsored links in the showcase and priority bug fixes                     |\\n| **Platinum** | \\\\$2000  | Gold++ benefits plus the most prominent logo placement, highest priority bug fixes, roadmap input |\\n\\nYou can find all the details on our [Sponsors page](/sponsor).\\n\\n---\\n\\n## **Conclusion**\\n\\nPixiJS 8.11.0 adds subtle but powerful improvements for building interactive content, including segmented text animations, better layout tools, and improved ecosystem support.\\n\\nWe\'re excited to see what you build next, and even more excited to build PixiJS with all of you.\\n\\n- [See the full release notes on GitHub](https://github.com/pixijs/pixijs/releases)\\n- [Sponsor PixiJS on GitHub](https://github.com/sponsors/pixijs)\\n- [Submit your project to the Showcase](https://pixijs.com/showcase)\\n- join the discussion on [Discord](https://discord.gg/QrnxmQUPGV)\\n\\nHappy creating!\\n**The PixiJS Team**"},{"id":"8.10.0","metadata":{"permalink":"/blog/8.10.0","source":"@site/blog/2025-06-05-pixi-v8.10.0.mdx","title":"PixiJS Update - v8.10.0","description":"A look at the 8.10.0 release of PixiJS.","date":"2025-06-05T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Documentation","permalink":"/blog/tags/documentation"}],"readingTime":5.69,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - v8.10.0","description":"A look at the 8.10.0 release of PixiJS.","slug":"8.10.0","authors":"zyie","tags":["PixiJS","Updates","Documentation"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Documentation","Text Features"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - v8.11.0","permalink":"/blog/8.11.0"},"nextItem":{"title":"PixiJS Layout v3 is here! \uD83C\uDF89","permalink":"/blog/layout-v3"}},"content":"import { EmbeddedEditor } from \'@site/src/components/Editor/EmbeddedEditor\';\\nimport TrimIndexFile from \'!!raw-loader!../docs/examples/text/text-trim\';\\nimport FiltersIndexFile from \'!!raw-loader!../docs/examples/text/text-filters\';\\nimport CartoonFile from \'!!raw-loader!../docs/examples/text/text-filters/CartoonTextFilter\';\\nimport vert from \'!!raw-loader!../docs/examples/text/text-filters/cartoonText.vert\';\\nimport frag from \'!!raw-loader!../docs/examples/text/text-filters/cartoonText.frag\';\\nimport wgsl from \'!!raw-loader!../docs/examples/text/text-filters/cartoonText.wgsl\';\\nimport TextureStyleIndexFile from \'!!raw-loader!../docs/examples/text/text-texture-style\';\\nimport NineSliceIndexFile from \'!!raw-loader!../docs/examples/sprite/nine-slice-sprite-anchor\';\\nimport DomContainerIndexFile from \'!!raw-loader!../docs/examples/basic/dom-container\';\\n\\nPixiJS v8.10.0 introduces a major overhaul of our documentation along with several updates that enhance text rendering and developer control. Here\'s what\'s new:\\n\\n- **Complete Documentation Overhaul**: Improved guides, API docs, and better organization\\n- **Text Trimming**: Optimize text rendering with automatic whitespace trimming\\n- **Text Filters**: Apply filters directly in text style configuration\\n- **Adjustable TextureStyle For Text**: Fine-tune how a text\'s texture is rendered with new texture style options\\n\\n{/* truncate */}\\n\\n## Documentation Overhaul\\n\\nWith this release, we are making a significant investment in our documentation to make PixiJS more accessible and easier to use for both new and experienced developers.\\n\\nThis change is driven by the survey results we gathered last year, which highlighted the need for clearer, more organized documentation. We want to ensure that developers can quickly find the information they need, whether they are just starting out or looking to deepen their understanding of PixiJS. With that in mind, we have completely revamped our documentation structure and content.\\n\\n- [New Guides](/8.x/guides/getting-started/intro)\\n- [New API Documentation](https://pixijs.download/release/docs/index.html)\\n\\n:::info Note\\nAs with any major change, there are areas that need refinement. We welcome your feedback as we continue to improve the documentation.\\n:::\\n\\n### New Website Documentation\\n\\nWe\'ve expanded and restructured our [guides](/8.x/guides/getting-started/intro) to now cover all core areas of PixiJS with improved getting started. The goal is to provide clearer entry points for new users and more comprehensive resources for experienced developers.\\n\\n### Enhanced API Documentation\\n\\nWe\'ve transitioned from WebDoc to **TypeDoc** for our API generation. This change brings improved support for TypeScript and allows us to provide more detailed and accurate information throughout the documentation.\\n\\nAlongside this technical shift, we\'ve also rethought how the [API Documentation](https://pixijs.download/release/docs/index.html) is organized. Rather than presenting everything in a single, monolithic reference, we\'ve categorized the APIs into two sections: **Standard** and **Advanced**.\\n\\n- **Standard** APIs cover the most commonly used features\u2014these are the essentials for building most PixiJS applications.\\n- **Advanced** APIs include more complex or specialized tools that are valuable for specific use cases, but not necessary for all users.\\n\\nThis new structure is designed to reduce cognitive load for newcomers. Developers can focus on the most relevant APIs without being overwhelmed by the full scope of the library.\\n\\nFor those who need access to more advanced features, there\'s a simple toggle in the top-right corner of the API documentation labeled **\\"Advanced\\"**. Enabling it reveals the full API surface when needed.\\n\\n![API Documentation Screenshot](/images/blog/typedoc-advanced.png)\\n\\nWe\'ve also taken this opportunity to improve the clarity of the documentation itself. For each **Standard** API, we aim to provide:\\n\\n- A clear explanation of its purpose\\n- Practical usage examples\\n- Links to related APIs for easier exploration\\n\\nThese improvements are intended to help developers better understand how to use PixiJS effectively\u2014whether they\'re just getting started or looking to dig deeper.\\n\\n### Public vs Internal APIs\\n\\nTo help define a clearer boundary between what developers should rely on and what is meant for internal use, we\'ve audited the entire codebase and marked APIs accordingly. Internal methods are now excluded from the API docs. This makes the public API surface more stable and reduces the risk of unintentional dependency on internal behaviors.\\n\\n## New Features \uD83C\uDF89\\n\\nNow that we\'ve covered the documentation overhaul, let\'s dive into the new features introduced in PixiJS v8.10.0:\\n\\n### Baked Text Filters\\n\\nText filters can now be applied at creation time, baking the effect directly into the texture. This avoids runtime filter costs and allows more expressive styles, such as outlines and drop shadows, without performance penalties.\\n\\nTo use this feature, you can now specify filters directly in the `TextStyle` configuration:\\n\\n```js\\nconst style = new TextStyle({\\n  fontFamily: \'Arial\',\\n  fontSize: 36,\\n  fill: \'#ffffff\',\\n  filters: [new BlurFilter()],\\n});\\nconst text = new PIXI.Text({ text: \'Hello, PixiJS!\', style });\\n```\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': FiltersIndexFile,\\n    \'CartoonTextFilter.js\': CartoonFile,\\n    \'cartoonText.vert\': vert,\\n    \'cartoonText.frag\': frag,\\n    \'cartoonText.wgsl\': wgsl,\\n  }}\\n/>\\n\\nAdditionally, a new `generateFilteredTexture` method has been added to `filterSystem`:\\n\\n```ts\\nconst blurFilter = new BlurFilter();\\nconst filteredTexture = renderer.filters.generateFilteredTexture({\\n  texture,\\n  filters: [blurFilter],\\n});\\n```\\n\\n### Text Trimming\\n\\nAutomatically remove unnecessary whitespace around text.\\n\\n:::warning PERFORMANCE WARNING\\nThis is a costly operation as it requires scanning pixel alpha values.\\nAvoid using `trim: true` for dynamic text, as it could significantly impact performance.\\n:::\\n\\nTo enable text trimming, simply set the `trim` property in the `TextStyle`:\\n\\n```js\\nconst style = new TextStyle({\\n  fontFamily: \'Arial\',\\n  fontSize: 36,\\n  fill: \'#ffffff\',\\n  trim: true, // Enable text trimming\\n});\\nconst text = new Text({ text: \'   Hello, PixiJS!   \', style });\\n```\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': TrimIndexFile,\\n  }}\\n/>\\n\\nThis method applies one or more filters to a texture and returns a new, filtered result.\\n\\n### Texture Scale Modes\\n\\nYou can now explicitly set texture filtering for text, useful when rendering pixel fonts or when you need control over how the texture is sampled.\\n\\nTo adjust the texture scale mode, use the `textureStyle` property in the `TextStyle`:\\n\\n```js\\nconst style = new TextStyle({\\n  fontFamily: \'Arial\',\\n  fontSize: 36,\\n  fill: \'#ffffff\',\\n  textureStyle: {\\n    scaleMode: \'nearest\', // Set the texture scale mode\\n  },\\n});\\nconst text = new Text({ text: \'Hello, PixiJS!\', style });\\n```\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': TextureStyleIndexFile,\\n  }}\\n/>\\n\\n## Highlights from v8.9.0 and v8.8.0\\n\\nWe missed highlighting the previous two releases, so here are some key features from v8.9.0 and v8.8.0:\\n\\n### DOM Container\\n\\nThe `DOMContainer` lets developers transform and animate DOM elements in sync with PixiJS scenes. This is useful for overlaying native inputs, textareas, or other HTML controls while retaining control over their positioning and rotation.\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': DomContainerIndexFile,\\n  }}\\n/>\\n\\n### NineSlice Sprite Anchor\\n\\n`NineSliceSprite` now supports the `anchor` property, allowing rotation and scaling behaviors to work as they do for other sprites.\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': NineSliceIndexFile,\\n  }}\\n/>\\n\\n## Looking Ahead\\n\\nStarting with v8.10.0, we\'re moving to a monthly release cadence for PixiJS. This will allow us to ship improvements, bug fixes, and new features more predictably and keep the project evolving at a steady pace.\\n\\nWhile the size and scope of each release may vary, the goal is to provide incremental updates that are easier to adopt and integrate into projects.\\n\\nYou can review the complete changelog [here](https://github.com/pixijs/pixijs/releases/tag/v8.10.0), or join the discussion on [Discord](https://discord.gg/QrnxmQUPGV) or [GitHub](https://github.com/pixijs/pixijs/discussions/new/choose).\\n\\nThank you for using PixiJS, and we look forward to seeing what you create with these new features!"},{"id":"layout-v3","metadata":{"permalink":"/blog/layout-v3","source":"@site/blog/2025-04-29-layout-v3.md","title":"PixiJS Layout v3 is here! \uD83C\uDF89","description":"The new Layout v3 is here! With a new API, better performance, and more features.","date":"2025-04-29T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Layout","permalink":"/blog/tags/layout"},{"inline":true,"label":"UI","permalink":"/blog/tags/ui"},{"inline":true,"label":"Yoga","permalink":"/blog/tags/yoga"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":4.21,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Layout v3 is here! \uD83C\uDF89","description":"The new Layout v3 is here! With a new API, better performance, and more features.","slug":"layout-v3","authors":"zyie","tags":["PixiJS","Layout","UI","Yoga","web"],"hide_table_of_contents":true,"keywords":["PixiJS","Layout","UI","Yoga","web"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - v8.10.0","permalink":"/blog/8.10.0"},"nextItem":{"title":"Introducing PixiJS React v8","permalink":"/blog/pixi-react-v8-live"}},"content":"Today we are releasing **[PixiJS Layout](https://layout.pixijs.io/) v3**, a complete rebuild of the library from the ground up. This new version offers a powerful, web-standard way to manage layout inside PixiJS projects, powered by the [Yoga](https://www.yogalayout.dev/) layout engine.\\n\\nMore than just a rewrite, v3 represents a **major leap forward**: it brings true **flexbox layout** principles to the PixiJS ecosystem, opening up PixiJS to web developers who are used to CSS-style layouts. Whether you are creating a game UI, a dynamic canvas app, or a full interactive experience, you can now use the layout patterns you already know \u2014 `flex-grow`, `justify-content`, `align-items`, and more.\\n\\nIn addition, [PixiJS Layout](https://layout.pixijs.io/) v3 integrates seamlessly with [PixiJS React](https://react.pixijs.io/), enabling React developers to compose and manage PixiJS UIs with a familiar declarative workflow. Whether you are working in plain PixiJS or combining it with React, layout is now easier, more intuitive, and more powerful.\\n\\n\x3c!--truncate--\x3e\\n\\n## A Complete Rebuild for Web Developers\\n\\nv3 is a **ground-up rewrite**, built on top of [**Yoga**](https://www.yogalayout.dev/). This brings predictable, web-standard layout behavior to PixiJS for the first time. It allows you to think about your layouts in the same way you would for web development \u2014 flex containers, wrapped children, alignment, and spacing \u2014 without abandoning the performance and flexibility of PixiJS.\\n\\n### Why This Matters\\n\\n- **Web developers can now use familiar concepts** like flex containers and flex items inside PixiJS without fighting the system.\\n- **No learning curve for layout**: If you know CSS Flexbox, you know how to structure your PixiJS scenes.\\n- **React developers get even more power**: PixiJS Layout v3 is fully integrated with PixiJS React, letting you declare layout directly inside JSX.\\n\\n## Key Features\\n\\n### Yoga-Powered Layout\\n\\nLayout calculations are powered by Yoga, the same engine that powers layout for React Native, bringing tried and tested flexbox behavior to PixiJS.\\n\\nFamiliar properties like `justifyContent`, `alignItems`, `flexDirection`, and `gap` are now fully supported.\\n\\n### Opt-In by Design\\n\\n[PixiJS Layout](https://layout.pixijs.io/) v3 is **opt-in by design**. You can enable layout only on the objects that need it \u2014 `Containers`, `Sprites`, `Graphics`, `Text`, or even custom objects \u2014 without forcing a complete restructure of your project.\\n\\nThis flexibility allows you to use layout where it makes sense, while keeping the rest of your codebase clean and performant.\\nIt also means you can use layout in existing projects without needing to refactor everything.\\n\\n```typescript\\nconst sprite = new Sprite({ texture, layout: true });\\n```\\n\\nOr define layout inline when creating objects:\\n\\n```typescript\\nconst container = new Container({\\n  layout: {\\n    width: 500,\\n    height: 300,\\n    justifyContent: \'center\',\\n    alignContent: \'center\',\\n    flexWrap: \'wrap\',\\n  },\\n});\\n```\\n\\n### Design for React\\n\\n[PixiJS Layout](https://layout.pixijs.io/) v3 includes full integration with PixiJS React, enabling easy JSX usage:\\n\\n```tsx\\n<layoutContainer layout={{ flexDirection: \'row\', gap: 10 }}>\\n  <layoutSprite texture={texture} layout={{ width: 100, height: 100 }} />\\n  <layoutSprite texture={texture} layout={{ width: 100, height: 100 }} />\\n</layoutContainer>\\n```\\n\\nThis allows React developers to compose layouts declaratively, just like building web UIs, but using the speed and flexibility of PixiJS under the hood.\\n\\n### Web-Style Features\\n\\nWe have added several web-style features to enhance layout capabilities:\\n\\n- **`objectFit`**: Control how content scales inside containers (`fill`, `contain`, `cover`, `none`, `scale-down`).\\n- **`objectPosition`**: Fine-tune content alignment within layout bounds.\\n- **Overflow scrolling**: Enable `overflow: scroll` for any container.\\n\\n### Documentation Overhaul\\n\\nWe have **completely rewritten the [documentation](https://layout.pixijs.io/)**. It now includes:\\n\\n- Clear guides for getting started and best practices\\n- Detailed examples covering common use cases\\n- Improved explanations of layout behavior and PixiJS integration\\n\\nThe new [documentation](https://layout.pixijs.io/) makes it easier than ever to get up and running.\\n\\n## Getting Started\\n\\nGetting started with PixiJS Layout v3 is simple and due to the opt-in nature of the library, you can use it in any PixiJS project without needing to refactor your entire codebase.\\n\\nCheck out the [**Getting Started**](https://layout.pixijs.io/docs/guides/guide/quick-start) guide for a step-by-step introduction but here\u2019s a quick overview:\\n\\n### Setup\\n\\nInstall PixiJS Layout v3:\\n\\n```bash\\npnpm add @pixi/layout\\n# or\\nyarn add @pixi/layout\\n# or\\nnpm install @pixi/layout\\n```\\n\\nImport the library early in your application:\\n\\n```typescript\\nimport \'@pixi/layout\';\\n\\n// ... initialize your app\\n```\\n\\nApply layout when and where you need it:\\n\\n```typescript\\nconst container = new Container({\\n  layout: {\\n    width: 500,\\n    height: 300,\\n    justifyContent: \'center\',\\n    alignContent: \'center\',\\n    flexWrap: \'wrap\',\\n  },\\n});\\n\\nconst sprite = new Sprite({ texture, layout: true });\\n\\ncontainer.addChild(sprite);\\n```\\n\\n## Conclusion\\n\\n**PixiJS Layout v3 brings web-standard flexbox to the world of 2D graphics.**\\n\\nIf you are a web developer, you can now build PixiJS projects with the layout tools you already know. If you are a React developer, you can compose rich, high-performance UIs inside your canvas-based apps just like you would on the web.\\n\\nExplore the new [documentation](https://layout.pixijs.io/), try it out in your projects, and let us know what you think. We are excited to see what you will build!\\n\\n## \uD83C\uDF10 Stay Connected\\n\\nFollow [Zyie](https://bsky.app/profile/zyie.bsky.social) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support."},{"id":"pixi-react-v8-live","metadata":{"permalink":"/blog/pixi-react-v8-live","source":"@site/blog/2025-03-26-pixi-react-v8-launches.md","title":"Introducing PixiJS React v8","description":"PixiJS React","date":"2025-03-26T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"React","permalink":"/blog/tags/react"}],"readingTime":3.41,"hasTruncateMarker":true,"authors":[{"name":"Trezy","title":"Pixi React Maintainer","url":"https://github.com/trezy","socials":{"github":"https://github.com/trezy","bluesky":"https://bsky.app/profile/trezy.codes"},"imageURL":"https://github.com/trezy.png","key":"trezy","page":null}],"frontMatter":{"title":"Introducing PixiJS React v8","description":"PixiJS React","slug":"pixi-react-v8-live","authors":["trezy"],"tags":["PixiJS","React"],"hide_table_of_contents":true,"keywords":["PixiJS","pixi.js","React","JSX","Typescript","performance","2d rendering","javascript graphics","game development"]},"unlisted":false,"prevItem":{"title":"PixiJS Layout v3 is here! \uD83C\uDF89","permalink":"/blog/layout-v3"},"nextItem":{"title":"PixiJS Update - v8.7.0","permalink":"/blog/8.7.0"}},"content":"The wait is over! We\'re thrilled to announce the release of **PixiJS React v8**, a complete reimagining of how React and PixiJS work together. This update represents a major shift in how you\'ll build interactive graphics in React applications.\\n\\nBuilt from the ground up to harness the power of PixiJS v8 and designed exclusively for React 19, this new major version brings unprecedented flexibility, performance, and developer experience to the PixiJS React ecosystem.\\n\\n\x3c!--truncate--\x3e\\n\\n## A Fresh Start\\n\\nThe decision to completely rebuild @pixi/react was driven by several key factors:\\n\\n- PixiJS v8 itself underwent a significant rewrite, which would have required major rework in the PixiJS React v7 codebase regardless\\n- Updating to the latest version of react-reconciler needed for React 19 support would have broken most of the existing implementation\\n- A fresh start gave us the opportunity to reimagine the library\'s ergonomics, allowing the implementation of a new pragma and eliminating the wrapper components of previous versions in favor of directly exposing PixiJS components through JSX proxies\\n\\nThis complete rewrite is heavily inspired by [`@react-three/fiber`](https://github.com/pmndrs/react-three-fiber/tree/master), and would not have been possible without the significant contributions from the R3F maintainers and community.\\n\\n## What\'s New?\\n\\n### Custom Pragma\\n\\nAt the heart of PixiJS React v8 lies a new JSX pragma that greatly simplifies the ergonomics of using the library. Now, all PixiJS components are directly reflected as JSX components with the `pixi` prefix:\\n\\n```jsx\\nimport { Application } from \'@pixi/react\';\\nimport { Sprite } from \'pixi.js\';\\n\\nfunction MyComponent() {\\n  const draw = useCallback((graphics) => {\\n    graphics.setFillStyle({ color: \'red\' });\\n    graphics.rect(0, 0, 25, 25);\\n  }, []);\\n\\n  const texture = useMemo(() => Assets.get(\'bunny.png\'), []);\\n\\n  return (\\n    <Application>\\n      <pixiSprite x={100} y={100} texture={texture} />\\n      <pixiGraphics\\n        x={0}\\n        y={0}\\n        draw={(graphics) => {\\n          graphics.setFillStyle({ color: \'red\' });\\n          graphics.rect(0, 0, 25, 25);\\n        }}\\n      />\\n    </Application>\\n  );\\n}\\n```\\n\\nThis approach eliminates the need for custom component wrappers, making the library much more future-proof and easier to maintain. As PixiJS evolves, @pixi/react will automatically support new components without requiring updates to the library itself.\\n\\n### Full TypeScript Support\\n\\nPixiJS React v8 was rebuilt from the ground up with TypeScript, providing autocompletion, type checking, and an improved developer experience even for those that aren\'t using Typescript.\\n\\n### PixiJS v8 Compatible\\n\\nBuilt specifically for PixiJS v8, this release brings all the performance improvements, WebGPU support, and modern JavaScript features from the core library directly to your React applications.\\n\\n### React 19 Support\\n\\nReact 19 represents a massive shift in the way React works under-the-hood, which means that libraries that are deeply integrated with React have to follow suit. While we recognize that this places significant hurdles in the upgrade path for our React 18 users, we believe that being able to take advantage of the latest React features and optimizations is worth the effort.\\n\\n## Getting Started\\n\\nReady to dive in? Check out the [new docs site](https://react.pixijs.io/) for PixiJS React v8!\\n\\nWant to get started even faster? Use the [PixiJS Create](https://pixijs.io/create-pixi) CLI spin up a PixiJS React project in seconds:\\n\\n```shell\\nnpm create pixi.js@latest --template framework-react\\n```\\n\\nThis sets up a ready-made project with all the essentials, so you can jump straight into building.\\n\\n## What\'s Next?\\n\\nWhile this initial release brings tremendous improvements, we\'re just getting started. We have plans to introduce:\\n\\n- An `attach` API (inspired by [R3F\'s `attach`](https://r3f.docs.pmnd.rs/api/objects#attach)) for automatically connecting non-directly-rendered components like filters and textures to their parent components\\n- Support for creating `Text` components from normal JSX text nodes\\n- Integration with [PixiJS Create](https://pixijs.io/create-pixi/)\\n\\nOur goal is to make the library as intuitive as possible, with most APIs being served by the core PixiJS documentation.\\n\\n## Join the Community\\n\\nWe\'d love to hear your feedback and see what you build with PixiJS React v8! Join us on the [Official PixiJS Discord](https://discord.gg/CPTjeb28nH) to share your experiences, ask questions, and connect with other developers.\\n\\nA heartfelt thank you to everyone who contributed to this release, especially those who provided early feedback and testing. Your input has been so valuable in shaping this next generation of PixiJS React."},{"id":"8.7.0","metadata":{"permalink":"/blog/8.7.0","source":"@site/blog/2025-01-24-pixi-v8.7.0.mdx","title":"PixiJS Update - v8.7.0","description":"A look at the 8.7.0 release of PixiJS.","date":"2025-01-24T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Improvements","permalink":"/blog/tags/improvements"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - v8.7.0","description":"A look at the 8.7.0 release of PixiJS.","slug":"8.7.0","authors":"zyie","tags":["PixiJS","Updates","Improvements"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Improvements","QoL"]},"unlisted":false,"prevItem":{"title":"Introducing PixiJS React v8","permalink":"/blog/pixi-react-v8-live"},"nextItem":{"title":"Introducing PixiJS Userland","permalink":"/blog/intro-userland"}},"content":"import { EmbeddedEditor } from \'@site/src/components/Editor/EmbeddedEditor\';\\nimport RenderLayerIndexFile from \'!!raw-loader!../docs/examples/ordering/render-layer/index\';\\nimport RenderLayerFish from \'!!raw-loader!../docs/examples/ordering/render-layer/Fish\';\\nimport RenderLayerCharacterUI from \'!!raw-loader!../docs/examples/ordering/render-layer/CharacterUI\';\\nimport GifIndexFile from \'!!raw-loader!../docs/examples/sprite/gif\';\\nimport ThreeIndexFile from \'!!raw-loader!../docs/examples/advanced/three-and-pixi\';\\n\\nWe\'re happy to announce the release of PixiJS v8.7.0, featuring a number of new features and improvements that you have been asking for. This version includes:\\n\\n- **Render Layers**: Control the rendering order of objects independently of their scene graph hierarchy.\\n- **GIF Support**: Load and manipulate animated GIFs with playback controls.\\n- **Three.js Integration**: Simplify the use of PixiJS and Three.js (and other WebGL projects) in the same project.\\n\\nHere\'s a closer look at these features and what they offer.\\n\\n{/* truncate */}\\n\\nLet\'s take a closer look at these new features and improvements.\\n\\n## Render Layers\\n\\n:::info[NOTE]\\nThe Render Layers API is experimental and may change in future releases.\\n:::\\n\\nRender Layers give you more control over the rendering order of objects, without requiring changes to their logical hierarchy.\\n\\nThis feature is useful for:\\n\\n- Keeping UI elements like health bars or score counters on top of other objects.\\n- Managing object rendering in complex scenes.\\n- Highlighting elements in tutorials or overlays.\\n\\nFor example, you can use Render Layers to ensure a UI health bar stays on top of a moving character, regardless of the scene graph hierarchy.\\n\\nMore details are available in the [Render Layers guide](/8.x/guides/concepts/render-layers).\\n\\nOlder users of PixiJS may remember the [layers](https://github.com/pixijs-userland/layers) plugin, which provided similar functionality. Render Layers are a more integrated and performant solution that is built directly into the core of PixiJS.\\n\\n<EmbeddedEditor\\n  files={{\\n    \'index.js\': RenderLayerIndexFile,\\n    \'Fish.js\': RenderLayerFish,\\n    \'CharacterUI.js\': RenderLayerCharacterUI,\\n  }}\\n/>\\n\\n## GIF Support\\n\\nPixiJS now supports animated GIFs, offering developers the ability to:\\n\\n- Play, stop, or loop GIFs.\\n- Adjust playback speed.\\n- Jump to specific frames programmatically.\\n\\nThis feature is ideal for adding dynamic animated elements to your projects.\\n\\nYou can find the full API details in the [GIF API Documentation](https://pixijs.download/v8.7.0/docs/gif.html).\\n\\n<EmbeddedEditor files={{ \'index.js\': GifIndexFile }} />\\n\\n## Integrating with three.js (and other WebGL projects)\\n\\nIntegrating PixiJS with Three.js (and other WebGL projects) is now easier, thanks to improvements in shared WebGL context support. This makes it more straightforward to combine PixiJS\'s 2D capabilities with Three.js\'s 3D rendering.\\n\\nA detailed guide is available [here](/8.x/guides/third-party/mixing-three-and-pixi).\\n\\n<EmbeddedEditor files={{ \'index.js\': ThreeIndexFile }} dependencies={{ three: \'latest\', \'pixi.js\': \'latest\' }} />\\n\\n## Additional Updates\\n\\nThis release also includes various improvements and bug fixes. For a complete list of changes, check out the [changelog](https://github.com/pixijs/pixijs/releases/tag/v8.7.0).\\n\\n## Conclusion\\n\\nWe encourage you to try out these new features and share your feedback. You can connect with us on [Discord](https://discord.gg/QrnxmQUPGV) or start a [discussion](https://github.com/pixijs/pixijs/discussions/new/choose).\\n\\nThank you for using PixiJS, and we look forward to seeing what you create with v8.7.0."},{"id":"intro-userland","metadata":{"permalink":"/blog/intro-userland","source":"@site/blog/2025-01-04-intro-userland.md","title":"Introducing PixiJS Userland","description":"Announcing a new GitHub organization for community projects.","date":"2025-01-04T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Plugins","permalink":"/blog/tags/plugins"},{"inline":true,"label":"GitHub","permalink":"/blog/tags/git-hub"},{"inline":true,"label":"Extensions","permalink":"/blog/tags/extensions"},{"inline":true,"label":"Community","permalink":"/blog/tags/community"}],"readingTime":3.23,"hasTruncateMarker":true,"authors":[{"name":"Matt Karl","title":"PixiJS Admin","url":"https://github.com/bigtimebuddy","socials":{"github":"https://github.com/bigtimebuddy","x":"https://x.com/bigtimebuddy","bluesky":"https://bsky.app/profile/bigtimebuddy.com"},"imageURL":"https://github.com/bigtimebuddy.png","key":"bigtimebuddy","page":null}],"frontMatter":{"title":"Introducing PixiJS Userland","description":"Announcing a new GitHub organization for community projects.","slug":"intro-userland","authors":"bigtimebuddy","tags":["PixiJS","Plugins","GitHub","Extensions","Community"],"hide_table_of_contents":true,"keywords":["PixiJS","Plugins","GitHub","Extensions","Community"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - v8.7.0","permalink":"/blog/8.7.0"},"nextItem":{"title":"PixiJS Update - Start building with PixiJS in just one command! \uD83D\uDE80","permalink":"/blog/create-cli"}},"content":"We have launched a new GitHub organization called [PixiJS Userland](https://github.com/pixijs-userland) to host many of our popular community-driven extensions. This initiative aims to help PixiJS developers easily identify which projects are officially supported and which are community-driven, while also giving developers more freedom to manage their projects independently.\\n\\n\x3c!--truncate--\x3e\\n\\nIn the past, the main PixiJS organization included a wide range of projects. Some were stable and widely used, while others were experimental with a small user base. This diversity led to the misconception that all projects on [github.com/pixijs](https://github.com/pixijs) received equal support from the core team, such as bug fixes and major updates. In reality, the core team found it challenging to communicate different priorities, especially since some side projects were maintained independently by core team members.\\n\\nWelcome to PixiJS Userland!\\n\\n## Userland Project Types\\n\\nWe have identified several common use-cases for projects that are best suited for Userland. Many projects have already been migrated to this new organization.\\n\\n### In-Scope Experiments\\n\\nUserland is an ideal place for projects that could eventually be part of the main PixiJS repo but need more time for development and stabilization. Examples include:\\n\\n- [Compressed Textures](https://github.com/pixijs-userland/pixi-compressed-textures) (similar features in PixiJS v7+)\\n- [HTMLText](https://github.com/pixijs-userland/html-text) (added in PixiJS v7+)\\n- [Projection](https://github.com/pixijs-userland/projection) (similar features in PixiJS v8+)\\n- [GIF](https://github.com/pixijs-userland/gif) (candidate for PixiJS v8+)\\n- [Layers](https://github.com/pixijs-userland/layers) (candidate for similar features in PixiJS v8+)\\n- [Lights](https://github.com/pixijs-userland/lights) (candidate for similar features in PixiJS v8+)\\n\\n### Out-of-Scope Projects\\n\\nThese projects fall just outside the main goals of PixiJS. They are useful but may be more specialized or opinionated, not fitting for the broader PixiJS community. Examples include:\\n\\n- [Tilemap Kit](https://github.com/pixijs-userland/tilemap)\\n- [Particle Emitter](https://github.com/pixijs-userland/particle-emitter)\\n- [Graphics Smooth](https://github.com/pixijs-userland/graphics-smooth)\\n\\n### Third-Party Integrations\\n\\nSometimes PixiJS developers need to integrate with third-party tools that aren\'t widely used enough to be officially supported by PixiJS. Examples include:\\n\\n- [Animate](https://github.com/pixijs-userland/animate) _Adobe Animate Publishing Extension_\\n- [Node.js PixiJS Renderer](https://github.com/pixijs-userland/node) _Node.js Rendering_\\n\\n## Main Project Types\\n\\nSeveral projects will continue to be supported on the main PixiJS GitHub organization. These projects will receive updates to stay compatible with the latest PixiJS releases. While this list may change, it currently includes projects that offer the greatest general benefit to PixiJS developers.\\n\\n### General Extensions\\n\\nThese are runtime extensions that integrate with PixiJS and provide general benefits for all developers.\\n\\n- [Sound](https://github.com/pixijs/sound)\\n- [UI](https://github.com/pixijs/ui)\\n- [Layout](https://github.com/pixijs/layout)\\n- [Filters](https://github.com/pixijs/filters)\\n\\n### Popular Runtimes\\n\\nSupport for popular web frameworks or integration with other renderers.\\n\\n- [Pixi React](https://github.com/pixijs/pixi-react)\\n\\n### Developer Tools\\n\\nTools that help developers build, package, or develop projects with PixiJS.\\n\\n- [DevTools](https://github.com/pixijs/devtools)\\n- [ESLint Configuration](https://github.com/pixijs/eslint-config)\\n- [Create](https://github.com/pixijs/create-pixi)\\n- [AssetPack](https://github.com/pixijs/assetpack)\\n- [Extension Scripts](https://github.com/pixijs/extension-scripts)\\n\\n### Resources\\n\\nReferences, documentation, or resources for developers.\\n\\n- [Storybook](https://github.com/pixijs/storybook)\\n- [Open Games](https://github.com/pixijs/open-games)\\n- [PixiJS.com](https://github.com/pixijs/pixijs.com)\\n\\n## Userland Open For Business\\n\\nDo you have a PixiJS project that you can no longer maintain or would like to re-home it in a place where the PixiJS community can contribute? Well, we\'d love to have it join Userland. Please reach out to [@Zyie](https://github.com/Zyie) or [@bigtimebuddy](https://github.com/bigtimebuddy) about transferring your project today.\\n\\n## Summary\\n\\nWe hope that introducing Userland will help clarify the level of support among the growing number of PixiJS projects and initiatives. If you have any feedback, please reach out on [Discord](https://discord.gg/QrnxmQUPGV) or start a [discussion](https://github.com/pixijs/pixijs/discussions/new/choose)."},{"id":"create-cli","metadata":{"permalink":"/blog/create-cli","source":"@site/blog/2024-12-06-pixi-create.mdx","title":"PixiJS Update - Start building with PixiJS in just one command! \uD83D\uDE80","description":"A look at the new PixiJS Create CLI and Creation Templates for easier project setup.","date":"2024-12-06T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Improvements","permalink":"/blog/tags/improvements"},{"inline":true,"label":"QoL","permalink":"/blog/tags/qo-l"},{"inline":true,"label":"Templates","permalink":"/blog/tags/templates"},{"inline":true,"label":"CLI","permalink":"/blog/tags/cli"}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - Start building with PixiJS in just one command! \uD83D\uDE80","description":"A look at the new PixiJS Create CLI and Creation Templates for easier project setup.","slug":"create-cli","authors":"zyie","tags":["PixiJS","Updates","Improvements","QoL","Templates","CLI"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Improvements","QoL","Templates","CLI"]},"unlisted":false,"prevItem":{"title":"Introducing PixiJS Userland","permalink":"/blog/intro-userland"},"nextItem":{"title":"PixiJS Update - Survey & v8.6.0","permalink":"/blog/better-docs-v8"}},"content":"export const Gif = ({ src, alt }) => {\\n  return (\\n    <div style={{ display: \'flex\', justifyContent: \'center\', padding: \'2rem 4rem\', paddingTop: \'1rem\' }}>\\n      <img\\n        src={src}\\n        alt={alt}\\n        style={{ maxWidth: \'600px\', width: \'100%\', borderRadius: \'0.5rem\', border: \'1px solid #676767\' }}\\n      />\\n    </div>\\n  );\\n};\\n\\nAs we mentioned in our previous [PixiJS Update post](/blog/better-docs-v8), we are focusing on making PixiJS easier to use and understand.\\nToday we\'re pushing the project one step closer to that goal and we\u2019re excited to introduce [PixiJS Create](https://github.com/pixijs/create-pixi).\\n\\nAn easy to use CLI that provides templates for using PixiJS with your favourite bundler, as well as a new \\"Creation Template\\" to get you started with PixiJS and its ecosystem.\\n\\n<Gif src=\\"https://pixijs.io/create-pixi/img/demo.gif\\" alt=\\"PixiJS Create CLI\\" />\\n\\n{/* truncate */}\\n\\n## \uD83D\uDE80 Getting Started\\n\\n[PixiJS Create](https://github.com/pixijs/create-pixi) is a new CLI tool that simplifies the process of setting up a PixiJS project. It provides a quick and easy way to create a new PixiJS project\\nwith the tools you need to get started with just one command.\\n\\nWhether you prefer using Vite, Webpack, or esbuild, PixiJS Create has you covered.\\nIt is as simple as running:\\n\\nNPM:\\n\\n```bash\\nnpm create pixi.js@latest\\n```\\n\\nYarn:\\n\\n```bash\\nyarn create pixi.js\\n```\\n\\nPNPM:\\n\\n```bash\\npnpm create pixi.js\\n```\\n\\nBun:\\n\\n```bash\\nbun create pixi.js\\n```\\n\\nThen just follow the prompts to select your desired template and you\'re good to go!\\n\\nWhen running the tool, you will be presented with an option of either a **Bundler Template** or a **Creation Template**. Let\'s take a closer look at each of these options.\\n\\n## \uD83D\uDEE0\uFE0F Bundler Templates: Simple and Barebones\\n\\nBundler Templates are stripped-down starting points for setting up PixiJS projects with popular build tools. These templates focus solely on the essentials,\\ngiving you a no-frills environment to start your project without any added complexity.\\n\\n### What\u2019s Included?\\n\\n- Out-of-the-box integration with major bundlers, including:\\n  - **[Vite v6](https://vite.dev)** + PixiJS (Recommended)\\n  - **[Webpack v5](https://webpack.js.org/)** + PixiJS\\n  - **[esbuild](https://esbuild.github.io/)** + PixiJS\\n  - PixiJS imported via **[import maps](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap)**\\n\\nBundler Templates are ideal if you want complete control over your project\u2019s setup while skipping the hassle of setting up an entire project.\\nThey\u2019re lightweight, efficient, and perfect for custom workflows.\\n\\n## \uD83C\uDFA8 Creation Templates: Feature-Rich Starting Points\\n\\nCreation Templates go beyond the basics, offering a fully-featured foundation for building applications with PixiJS. These templates address common challenges\\ndevelopers face when starting a new project, providing tools that simplify screen management, asset handling, audio and more.\\n\\n### What\u2019s Included?\\n\\n- **Screen Management**: Handle transitions and organize application states with ease.\\n- **Asset Loading**: Built-in support for PixiJS AssetPack, making asset management effortless.\\n- **Audio Playback**: Leverage PixiJS Sound for modern WebAudio API features.\\n- **Responsive Design**: Automatic resize handling for various screen sizes.\\n- **Simple UI**: Includes a basic UI library for common UI elements.\\n- **Animation Tools**: Includes preconfigured support for libraries like Spine for skeletal animations and Motion for smooth tweening and transitions.\\n\\nCreation Templates are perfect for developers who want to hit the ground running with a robust foundation, enabling them to focus on building amazing content rather\\nthan worrying about setup.\\n\\n### \uD83C\uDF0D Creation Templates for Every Platform\\n\\nFor the creation templates we\u2019re starting with support for general web-based applications but are planning to expand the template ecosystem to other platforms soon:\\n\\n- Web Template: A general-purpose creation template (available now).\\n\\nComing Soon:\\n\\n- Discord Template: Build multiplayer applications for Discord using their SDK.\\n- Facebook Template: Create apps for Facebook Instant Games.\\n- YouTube Template: Develop YouTube Playables.\\n\\n## Acknowledgements\\n\\nThis project is based on amazing [create-vite](https://github.com/vitejs/vite/tree/main/packages/create-vite) tool and inspired by the [create-game](https://github.com/phaserjs/create-game) project by [Phaser](https://phaser.io/).\\nWe are grateful for their work and the inspiration it provided.\\n\\n## \uD83C\uDF10 Stay Connected\\n\\nFollow [Zyie](https://bsky.app/profile/zyie.bsky.social) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant\\ncommunity on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support."},{"id":"better-docs-v8","metadata":{"permalink":"/blog/better-docs-v8","source":"@site/blog/2024-11-29-pixi-v8.6.0.md","title":"PixiJS Update - Survey & v8.6.0","description":"A look at the recent updates and improvements in PixiJS.","date":"2024-11-29T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Improvements","permalink":"/blog/tags/improvements"}],"readingTime":6.39,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - Survey & v8.6.0","description":"A look at the recent updates and improvements in PixiJS.","slug":"better-docs-v8","authors":"zyie","tags":["PixiJS","Updates","Improvements"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Improvements","QoL"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - Start building with PixiJS in just one command! \uD83D\uDE80","permalink":"/blog/create-cli"},"nextItem":{"title":"ParticleContainer - The New Speed Demon in PixiJS v8","permalink":"/blog/particlecontainer-v8"}},"content":"import { EmbeddedEditor } from \\"@site/src/components/Editor/EmbeddedEditor\\";\\nimport CacheAsTextureFile from \'!!raw-loader!../docs/examples/basic/cache-as-texture\';\\nimport PixelLineFile from \'!!raw-loader!../docs/examples/graphics/pixel-line\';\\nimport ParticleContainerFile from \'!!raw-loader!../docs/examples/basic/particle-container\';\\nimport InverseMaskFile from \'!!raw-loader!../docs/examples/masks/inverse-mask\';\\nimport PerspectiveMeshFile from \'!!raw-loader!../docs/examples/mesh-and-shaders/perspective-mesh\';\\n\\nThank you to everyone who participated in our survey! One thing came through loud and clear: **better documentation is a top priority for the PixiJS community**. We\u2019ve taken your feedback to heart, and work is already underway to make significant improvements.\\n\\nThis post is part of our commitment to better communication. We\u2019ll share how we\u2019re tackling documentation updates and shine a light on some of the great features and improvements we\u2019ve introduced since PixiJS v8 that might have flown under the radar!\\n\\n\x3c!--truncate--\x3e\\n\\n## \uD83D\uDCD6 Improving Documentation\\n\\nDocumentation is critical for a library like PixiJS, and we recognize there\u2019s room for growth. Below is a list of the changes we\u2019re making to improve the documentation:\\n\\n- **More Examples**:\\n  - Adding more examples for both beginners and experienced developers to learn from to the website.\\n  - Add example/guide for each feature we introduce on release, to help you understand how to use it right away.\\n- **Updated Guides**:\\n  - Overhaul our current set of guides to better reflect the current state of PixiJS.\\n  - Add more guides to cover the basics of PixiJS\\n- **Starter Templates**:\\n  - Create a set of starter templates to help you get up and running quickly. These templates will be available through an `npm create` command.\\n- **API Doc Improvements**:\\n  - Improve documentation of types.\\n  - Include inline examples and explanations.\\n  - Ensure all public API\'s are written from the perspective of the user, not the developer.\\n  - Look into providing a toggle for exposing internal API\'s, with the default being to hide them. This will help reduce the noise in the API docs for most users while stil giving plugin developers access to the internals.\\n- **Migration Guide**:\\n  - Improving the migration guide to help you upgrade your codebase to the latest version of PixiJS.\\n  - Explore backporting more deprecations where possible to help you upgrade your codebase more easily.\\n\\nThese changes will take time, but they are high on our priority list. If you have any suggestions or feedback, please let us know on [Bluesky](https://bsky.app/profile/pixijs.com) or [Discord](https://discord.gg/nrnDP9wtyX).\\n\\n## \u2728 What\u2019s New?\\n\\nWe\u2019ve been hard at work delivering new features and improvements, but let\u2019s be honest\u2014we haven\u2019t done the best job announcing them. Here\u2019s a quick rundown of the highlights from our recent releases.\\n\\n:::info[NOTE]\\nWe will be bringing out more detailed guides/examples on all of these features as well, this is just the start!\\n:::\\n\\n### v8.6.0\\n\\n- **cacheAsTexture**: Containers now have a `cacheAsTexture()` function. It behaves similarly to `cacheAsBitmap` from v7 and will render the container to a texture instead of rendering the container itself.\\n\\n  This can be great for performance if the container is static, as instead of rendering all the children etc., it will just render a single texture.\\n  As well as this the process of caching is also relatively low cost, with the trade-off being memory usage as the use of a texture does increase memory (for the texture itself).\\n\\n  :::info[Guide]\\n  We have a full guide on this feature [here](/8.x/guides/components/scene-objects/container/cache-as-texture).\\n  :::\\n  <EmbeddedEditor files={{\\"index.js\\": CacheAsTextureFile}}/>\\n\\n- **pixelLine**: The `pixelLine` property is a neat feature of the PixiJS Graphics API that allows you to create lines that remain 1 pixel thick, regardless of scaling or zoom level. This feature is especially useful for achieving crisp, pixel-perfect visuals, particularly in retro-style or grid-based games, technical drawing, or UI rendering.\\n\\n  :::info[Guide]\\n  We have a full guide on this feature [here](/8.x/guides/components/scene-objects/graphics/graphics-pixel-line).\\n  :::\\n  <EmbeddedEditor files={{\\"index.js\\": PixelLineFile}}/>\\n\\n- **New Global Methods**: We have added three new functions to Container to make it easier to work with global transforms / tints / alphas.\\n\\n  - **getGlobalTransform**\\n\\n    ```ts\\n    const skipUpdate = false;\\n    const outMatrix = new Matrix();\\n\\n    // writes and returns outMatrix;\\n    const globalTransform = container.getGlobalTransform(outMatrix, skipUpdate);\\n    ```\\n\\n  - **getGlobalTint**\\n    ```ts\\n    const skipUpdate = false;\\n    // returns rgb color\\n    const globalTint = container.getGlobalTint(skipUpdate);\\n    ```\\n  - **getGlobalAlpha**\\n    ```ts\\n    const skipUpdate = false;\\n    // returns alpha as number;\\n    const globalAlpha = container.getGlobalAlpha(skipUpdate);\\n    ```\\n\\n  :::info[INFO]\\n  if `skipUpdate` is true - it will be faster but may be outdated - uses the last rendered data\\n\\n  if `skipUpdate` is false - it will be 100% accurate but slower - recalculates transform chain\\n  :::\\n\\n### v8.5.0\\n\\n- **ParticleContainer**: Faster than ever, optimized for rendering a million particles effortlessly.\\n\\n  The `ParticleContainer` shines when you need insane numbers of visual elements on-screen, especially when you want them moving and interacting in real time. Whether you\'re building particle effects, swarms of characters, or abstract art installations, PixiJS v8 has you covered. The static vs. dynamic property system gives you granular control over performance, allowing you to fine-tune the balance between flexibility and speed.\\n\\n  :::info[Blog]\\n  We have a blog post on this feature [here](/blog/particlecontainer-v8).\\n  :::\\n  <EmbeddedEditor files={{\\"index.js\\": ParticleContainerFile}}/>\\n\\n- **Inverse Masking**:\\n  You can now use `element.setMask({ mask, inverse: true })` to create an inverse mask effect. This is great for creating cut-out effects or other creative visuals.\\n  <EmbeddedEditor files={{\\"index.js\\": InverseMaskFile}}/>\\n\\n### v8.4.0\\n\\n- **Multiview**: Support for renderering the same context to multiple canvases. Eliminating the need for multiple PixiJS instances and duplicating resources.\\n  Simply add `await app.init({ multiView: true})` and when rendering, pass in the target canvas to render to. `renderer.render({ container, target: canvasOnDom1 })`\\n\\n:::tip[EXPERIMENTAL]\\nThis feature is still experimental and currently interaction only works on the first canvas.\\n:::\\n\\n### v8.3.0\\n\\n- **PerspectiveMesh**: A new mesh type that allows you to create 3D perspective effect\\n  <EmbeddedEditor files={{\\"index.js\\": PerspectiveMeshFile}}/>\\n\\n### v8.2.0\\n\\n- **Container Reparenting**: You can now reparent a container to another container without it looking visually different with two new methods `reparentChild(child)` and `reparentChildAt(child, 1)`.\\n\\n  Usually when you move a child from one container to another, it will visually jump to the new container. This is because the child\'s transform is relative to the parent container. With these new methods, the child will keep its position and scale relative to the new parent container.\\n\\n  ```ts\\n  const container1 = new Container();\\n  const container2 = new Container();\\n  ```\\n\\nconst sprite = new Sprite();\\ncontainer1.scale = 5;\\ncontainer1.addChild(sprite);\\n\\n// visually the sprite will remain in the same position and scale\\n// despite container1 and container2 having different scales.\\ncontainer2.reparentChild(sprite);\\n\\n````\\n\\n### v8.1.0\\n- **Generic Typing for Container**: You can now specify the type of children that a container can have. e.g.\\n  ```typescript\\n  const container = new Container<Sprite>();\\n  container.addChild(new Sprite());\\n  container.addChild(new Graphics()); // This will throw a type error\\n  ```\\n- **DTS Bundles**: We now provide a single TypeScript definition file with all pixi exports under the `PIXI` namespace, similar to the defintion file we generated in v6. This can be useful for users that are using PixiJS in a non-module environment, and need to include the definition file manually.\\n\\n This file can be found on all of our releases on Github in the \\"Assets\\" section, or through `https://pixijs.download/vX.X.X/pixi.d.ts`.\\n\\n## \uD83D\uDDE3\uFE0F Looking Ahead\\nWe\u2019re committed to addressing the feedback you\u2019ve shared and continuing to improve PixiJS. In addition to better documentation, you can expect more regular updates to keep you informed about what\u2019s new.\\n\\nYour input is vital to PixiJS\u2019s success, and we encourage you to share your thoughts through Bluesky, Github, and the Discord channel. Thanks for your continued support as we work to make PixiJS better for everyone.\\n\\nThe PixiJS Team\\n\\n## \uD83C\uDF10 Stay Connected\\n\\nFollow [Zyie](https://bsky.app/profile/zyie.bsky.social) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support.\\n````"},{"id":"particlecontainer-v8","metadata":{"permalink":"/blog/particlecontainer-v8","source":"@site/blog/2024-10-03-pixi-v8-particle-container.md","title":"ParticleContainer - The New Speed Demon in PixiJS v8","description":"Introducing the new ParticleContainer in PixiJS v8\u2014faster than ever, optimized for rendering millions of particles effortlessly.","date":"2024-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"ParticleContainer","permalink":"/blog/tags/particle-container"},{"inline":true,"label":"WebGL","permalink":"/blog/tags/web-gl"},{"inline":true,"label":"Games","permalink":"/blog/tags/games"},{"inline":true,"label":"Performance","permalink":"/blog/tags/performance"},{"inline":true,"label":"Optimization","permalink":"/blog/tags/optimization"}],"readingTime":4.47,"hasTruncateMarker":true,"authors":[{"name":"Mat Groves","title":"PixiJS Creator","url":"https://github.com/GoodboyDigital","socials":{"github":"https://github.com/GoodboyDigital","x":"https://x.com/Doormat23"},"imageURL":"https://github.com/GoodboyDigital.png","key":"mat","page":null}],"frontMatter":{"title":"ParticleContainer - The New Speed Demon in PixiJS v8","description":"Introducing the new ParticleContainer in PixiJS v8\u2014faster than ever, optimized for rendering millions of particles effortlessly.","slug":"particlecontainer-v8","authors":"mat","tags":["PixiJS","ParticleContainer","WebGL","Games","Performance","Optimization"],"hide_table_of_contents":true,"keywords":["PixiJS","ParticleContainer","game development","web graphics","optimization","WebGL"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - Survey & v8.6.0","permalink":"/blog/better-docs-v8"},"nextItem":{"title":"AssetPack 1.0.0 Release!","permalink":"/blog/assetpack-1.0.0"}},"content":"PixiJS v8 has taken speed to the next level with the release of its new `ParticleContainer`. This new feature brings a jaw-dropping performance boost, capable of rendering 100K+ without breaking a sweat. If you\u2019ve got tons of elements to throw on the screen, you\u2019re in for a treat!\\n\\n\x3c!--truncate--\x3e\\n\\n## \uD83D\uDE80 New ParticleContainer Design\\n\\nThe key difference in PixiJS v8 is that the `ParticleContainer` doesn\u2019t deal with sprites any more, it works with lightweight **particles**. While particles share many properties with sprites (like texture, position, anchor, scale, rotation, alpha and color), they cut out unnecessary overhead. The result is **speed**, pure and simple.\\n\\nHow fast, you ask? Well, take a look on my machine (Macbook Pro M3):\\n\\n- **Sprites + Container**: 200,000 at 60fps.\\n- **Particles + ParticleContainer**: 1,000,000 at 60fps!\\n\\nYes, that\u2019s a _million_ bunnies on-screen, and honestly the main bottleneck at that point wasn\u2019t even rendering but the logic behind the bouncing movement! Give this a spin and see for yourself:\\n\\n<iframe src=\\"https://goodboydigital.github.io/pixi-bunnymark/dist/?asParticles=true&count=1000&renderer=webgl\\" width=\\"700\\" height=\\"500\\" frameborder=\\"0\\"></iframe>\\n\\nThe key takeaway is that you can now render **huge volumes of elements** absurdly fast, making PixiJS v8 a perfect choice for high-performance games or visually intensive projects. And yes this is faster than the v7 particle container by **over 3x**!\\n\\nPlease checkout the [migration guide](../8.x/guides/migrations/v8#particlecontainer) for more information on how to migrate your code to the new particle container.\\n\\n### Speed Secret: Static vs. Dynamic Properties\\n\\nTo get the most out of this performance beast, it\u2019s essential to understand **static** vs. **dynamic** properties. PixiJS gives you full control over which properties update every frame (dynamic) and which don\u2019t need constant updates (static). Here\u2019s how they work:\\n\\n- **Static properties**: Once set, they stay the same unless explicitly changed. By keeping them static, you reduce computational load, meaning faster rendering. This is your responsibility to update :)\\n- **Dynamic properties**: These are recalculated and uploaded to the GPU every frame regardless.\\n\\nBy default, **only the position** is dynamic, but you can configure others if needed. The fewer dynamic properties you have, the faster the rendering will be!\\n\\n### PixiJS v8 Particle Container Usage\\n\\nLet\u2019s walk through a simple example of how to get started:\\n\\n```javascript\\nimport { ParticleContainer, Particle, Texture } from \'pixi.js\';\\n\\n// Create a particle container with default options\\nconst container = new ParticleContainer({\\n  // this is the default, but we show it here for clarity\\n  dynamicProperties: {\\n    position: true, // Allow dynamic position changes (default)\\n    scale: false, // Static scale for extra performance\\n    rotation: false, // Static rotation\\n    color: false, // Static color\\n  },\\n});\\n\\n// Add particles\\nconst texture = Texture.from(\'path/to/bunny.png\');\\n\\nfor (let i = 0; i < 100000; ++i) {\\n  let particle = new Particle({\\n    texture,\\n    x: Math.random() * 800,\\n    y: Math.random() * 600,\\n  });\\n\\n  container.addParticle(particle);\\n}\\n\\n// Add container to the Pixi stage\\napp.stage.addChild(container);\\n```\\n\\nIn this example, we create a `ParticleContainer`, set properties to static where possible, and generate a 100k particles. By using a shared texture (hello, sprite sheets!), we ensure that all particles share the same graphical assets, making rendering even more efficient.\\n\\n### Reasons to Use ParticleContainer\\n\\nThe `ParticleContainer` shines when you need **insane numbers** of visual elements on-screen, especially when you want them moving and interacting in real time. Whether you\'re building particle effects, swarms of characters, or abstract art installations, PixiJS v8 has you covered. The static vs. dynamic property system gives you granular control over performance, allowing you to fine-tune the balance between flexibility and speed.\\n\\nThis is basically the fastest we could make it by still keeping allowing for different textures (via sprite sheets) and still empowering devs to manipulate the particles via JS and not having to move the movement to the GPU (which might be faster, but is more complex and less flexible). So even though we are choosing to call them particles, they are more like something in between a traditional particle and a classic sprite.\\n\\nThis is ideal for projects where frame rate and rendering volume matter\u2014such as games, interactive apps, and high-volume data visualization. By controlling the dynamic properties of your particles, you can optimize your application\u2019s performance to fit your needs.\\n\\n### Next Steps\\n\\nThe new `ParticleContainer` is a game-changer, but there are still some areas for improvement! For one, there is room to optimise further the static uploading of properties (you may notice the example above is slower when adding bunnys - but then speeds up once stable). We plan to expose how the particles are batched so that developers can add / remove attributes from the batch to make it even faster or add more flexibility and customization. But for now, this is a great starting point and we hope you enjoy the new `ParticleContainer`!\\n\\n## \uD83C\uDF89 Conclusion\\n\\nPixiJS v8\u2019s `ParticleContainer` is a game-changer when it comes to rendering at scale. Its ability to push **millions** of particles at full speed opens up a world of possibilities for game developers, animators, and creative coders. Get in, experiment with the new API, and see just how fast your visuals can fly!\\n\\nReady to give it a spin? Try out the new `ParticleContainer` in PixiJS v8, and push the limits of performance in your projects!\\n\\n## \uD83C\uDF10 Stay Connected\\n\\nFollow [Doormat23](https://twitter.com/Doormat23) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support."},{"id":"assetpack-1.0.0","metadata":{"permalink":"/blog/assetpack-1.0.0","source":"@site/blog/2024-07-18-assetpack-1.0.0.md","title":"AssetPack 1.0.0 Release!","description":"AssetPack 1.0.0 is here! \uD83C\uDF89","date":"2024-07-18T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"AssetPack","permalink":"/blog/tags/asset-pack"},{"inline":true,"label":"Web","permalink":"/blog/tags/web"},{"inline":true,"label":"Games","permalink":"/blog/tags/games"},{"inline":true,"label":"Spine","permalink":"/blog/tags/spine"},{"inline":true,"label":"Optimisation","permalink":"/blog/tags/optimisation"},{"inline":true,"label":"Asset Management","permalink":"/blog/tags/asset-management"}],"readingTime":5.1,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"AssetPack 1.0.0 Release!","description":"AssetPack 1.0.0 is here! \uD83C\uDF89","slug":"assetpack-1.0.0","authors":"zyie","tags":["PixiJS","AssetPack","Web","Games","Spine","Optimisation","Asset Management"],"hide_table_of_contents":true,"keywords":["PixiJS","Spine","JavaScript","game development","web development","asset management","loading"]},"unlisted":false,"prevItem":{"title":"ParticleContainer - The New Speed Demon in PixiJS v8","permalink":"/blog/particlecontainer-v8"},"nextItem":{"title":"PixiJS Joins the Spine 4.2 Physics Revolution! \uD83D\uDE80","permalink":"/blog/pixi-js-hearts-spine"}},"content":"Today we are very excited to announce [AssetPack](https://pixijs.io/assetpack) 1.0, an asset management and optimization tool for web developers.\\n\\nIn the world of web development, managing and optimizing assets often demands significant manual effort. Developers need to ensure that their images are compressed, their audio files are optimized, their fonts are loaded efficiently, and more. This process can be time-consuming and error-prone, especially when working on large projects with many assets. To address this challenge, AssetPack provides a configurable asset pipeline that automates many of these tasks, making it easier for developers to manage and deploy assets in their projects.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is AssetPack?\\n\\nAssetPack is a tool designed to streamline the management, optimization, and deployment of assets in web projects. It is framework-agnostic and can be used with any framework you like, such as PixiJS, Three.js, Phaser, and others. AssetPack employs a plugin-based system, allowing you to create your own plugins to customize asset processing according to your needs.\\n\\n<div style={{ display: \'flex\', justifyContent: \'center\', alignItems: \'center\', paddingBottom: \'24px\' }}>\\n    <img\\n        src={\'/images/blog/assetpack-screenshot.png\'}\\n        alt=\\"AssetPack screenshot\\"\\n    />\\n</div>\\n\\nAssetPack comes out of the box with the following plugins:\\n\\n- **Cache Busting**: Automatically appends a unique hash to asset URLs to ensure that clients always load the latest version of the asset.\\n- **Compression**: Compresses images using sharp, allowing for the creation of webp/avif images and compressing png/jpg to reduce file sizes.\\n- **TexturePacker**: Automatically generates spritesheets from images.\\n- **Mipmap**: Generates mipmaps for textures to improve rendering performance e.g. 2x, 1x, 0.5x, etc.\\n- **Spine**: Optimizes Spine animations by creating mipmaps for `.atlas` files.\\n- **Audio/FFmpeg**: Converts audio files to the desired format and bitrate using FFmpeg.\\n- **JSON**: Minifies JSON files to reduce their size.\\n- **Webfont**: Converts all fonts files to WOFF2 format, and plugins for SDF and MSDF font generation\\n- **Manifest**: Generates a manifest file containing all asset URLs for easy loading. This can be used with PixiJS\'s `Assets` loader\\n\\nThe above plugins are just a few examples of what AssetPack can do. You can create your own plugins to extend AssetPack\'s functionality further.\\n\\n### Key Features of AssetPack\\n\\n#### Caching & CI\\n\\nAssetPack intelligently caches assets, transforming each asset only once. This reduces redundant processing and speeds up build times, ensuring that you always have the latest version of your assets without unnecessary overhead.\\n\\nThis is perfect for Continuous Integration (CI) environments, AssetPack allows you to commit raw assets to your repository and transform them as part of your build process. This ensures that your assets are always optimized and up-to-date with minimal manual intervention. See the Github Action example [here](https://pixijs.io/assetpack/docs/guide/getting-started/github-action/) for more information.\\n\\n#### Performance\\n\\nDesigned to handle large quantities of assets, AssetPack utilizes the fastest tools available. This ensures that your asset pipeline can keep up with the demands of modern web development, delivering optimized assets quickly and efficiently.\\n\\n#### Watch Mode\\n\\nWith the Watch mode, AssetPack monitors your assets in real-time, updating them as you add or remove files. This live update feature streamlines development, allowing you to see changes immediately without having to manually trigger asset processing. Combined with the caching system, Watch mode ensures that only the necessary assets are transformed, keeping build times to a minimum.\\n\\n#### Tag System\\n\\nAssetPack\'s tag-powered system makes asset management intuitive and flexible. By simply adding tags to folders or files (e.g., `{tps}` to create a sprite sheet), you can easily apply specific processing rules. This feature simplifies complex asset workflows and enhances customization.\\n\\n<div style={{ display: \'flex\', justifyContent: \'center\', alignItems: \'center\', paddingBottom: \'24px\' }}>\\n    <img\\n        src={\'/images/blog/assetpack-screenshot-tags.png\'}\\n        alt=\\"AssetPack screenshot\\"\\n    />\\n</div>\\n\\n## How to use AssetPack\\n\\n### Installation\\n\\nTo install AssetPack, you need to install the `@assetpack/core` package.\\n\\n```bash\\nnpm install --save-dev @assetpack/core\\n```\\n\\n:::info[COMPATIBILITY NOTE]\\nAssetPack requires [Node.js](https://nodejs.org/en/) version 20+, please upgrade if your package manager warns about it.\\n:::\\n\\n### Setup\\n\\nTo set up AssetPack, you need to create a configuration file that defines what assets you want to optimise and how you want to optimise them.\\n\\nFirst create a `.assetpack.js` file in the root of your project. This file should export an object with the following properties:\\n\\n```js\\n// .assetpack.js\\nimport { pixiPipes } from \'@assetpack/core\';\\n\\nexport default {\\n  entry: \'./raw-assets\',\\n  output: \'./public/assets\',\\n  pipes: [\\n    /* If you are using AssetPack with PixiJS, you can use the `pixiPipes` function\\n     * to add a pre-configured set of plugins, with an opinionated\\n     * set of defaults for PixiJS.\\n     */\\n    ...pixiPipes(),\\n  ],\\n};\\n```\\n\\nTo see the full list of configuration options, see the [API Reference](https://pixijs.io/assetpack/docs/guide/configuration/) page.\\n\\nThen to run AssetPack, you can use the CLI, run programmatically, or use a build tool like Vite.\\n\\n- [CLI](https://pixijs.io/assetpack/docs/guide/getting-started/cli)\\n- [Programmatic](https://pixijs.io/assetpack/docs/guide/getting-started/programmatic)\\n- [Vite](https://pixijs.io/assetpack/docs/guide/getting-started/vite)\\n\\nAssetPack has a number of built-in plugins for you to use, to see the full list of plugins, see the [Plugins](https://pixijs.io/assetpack/docs/guide/pipes/overview) page.\\n\\n### Open Source Games\\n\\nAssetPack is already in use in our open source games repo. Check out the [games](https://pixijs.io/assetpack/examples) leveraging AssetPack for asset management. These examples showcase the power and flexibility of AssetPack in real-world scenarios.\\n\\n## Conclusion\\n\\nAssetPack is a powerful tool that can help you manage and optimize assets in your web projects. By automating many of the tasks involved in asset management, AssetPack can save you time and effort, allowing you to focus on building great web experiences. We hope you find AssetPack useful in your projects, and we look forward to seeing what you create with it!\\n\\nWe are committed to continuously improving AssetPack, and your feedback is invaluable to us. If you encounter any issues or have suggestions for new features, please reach out on our discord or open an issue on our GitHub repository.\\n\\n## \uD83C\uDF10 Stay Connected\\n\\nFollow [Zyie](https://twitter.com/_Zyie_) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support."},{"id":"pixi-js-hearts-spine","metadata":{"permalink":"/blog/pixi-js-hearts-spine","source":"@site/blog/2024-06-14-pixi-spine.md","title":"PixiJS Joins the Spine 4.2 Physics Revolution! \uD83D\uDE80","description":"Elevate your animations with Spine 1.1.0 and the revolutionary physics features of Spine 4.2, now fully integrated with PixiJS v8.","date":"2024-06-14T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Spine","permalink":"/blog/tags/spine"},{"inline":true,"label":"WebGL","permalink":"/blog/tags/web-gl"},{"inline":true,"label":"WebGPU","permalink":"/blog/tags/web-gpu"},{"inline":true,"label":"Animation","permalink":"/blog/tags/animation"}],"readingTime":2.98,"hasTruncateMarker":true,"authors":[{"name":"Mat Groves","title":"PixiJS Creator","url":"https://github.com/GoodboyDigital","socials":{"github":"https://github.com/GoodboyDigital","x":"https://x.com/Doormat23"},"imageURL":"https://github.com/GoodboyDigital.png","key":"mat","page":null}],"frontMatter":{"title":"PixiJS Joins the Spine 4.2 Physics Revolution! \uD83D\uDE80","description":"Elevate your animations with Spine 1.1.0 and the revolutionary physics features of Spine 4.2, now fully integrated with PixiJS v8.","slug":"pixi-js-hearts-spine","authors":"mat","tags":["PixiJS","Spine","WebGL","WebGPU","Animation"],"hide_table_of_contents":true,"keywords":["PixiJS","Spine","webGL","webGPU","2D animation","JavaScript graphics","game development"]},"unlisted":false,"prevItem":{"title":"AssetPack 1.0.0 Release!","permalink":"/blog/assetpack-1.0.0"},"nextItem":{"title":"PixiJS v8 Launches! \uD83C\uDF89","permalink":"/blog/pixi-v8-launches"}},"content":"We have exciting news for all animation enthusiasts and game developers! The Spine team has just smashed it out of the park with the release of [Spine 4.2](https://en.esotericsoftware.com/blog/Spine-4.2-The-physics-revolution), which includes some truly great new features. The best part for us PixiJS users? We can start leveraging these remarkable features today in both v7 and v8!\\n\\n\x3c!--truncate--\x3e\\n\\nFor those unfamiliar, Spine is the standard for creating stunning 2D animations. It offers an intuitive editor and a multitude of runtimes to ensure that your animations can be utilized across various platforms. PixiJS has supported Spine for almost as long as both have existed (around 10 years)! Personally, we have been shipping games with Spine for about that long as well.\\n\\nInitially, we maintained our own player. This worked well, but as Spine evolved and new releases were introduced, we had to invest considerable time and energy to modify our custom player. In the past year, the Esoteric team has been managing the v7 version of the player after PixiJS\'s [elementalcode](https://x.com/miltoncandelero) made the initial implementation on top of their excellent HTML5 runtime. This means that as these incredible updates are released, the PixiJS community can use them almost immediately!\\n\\nHere are a few of the exciting new features:\\n\\n### \uD83C\uDFCB\uFE0F\u200D\u2642\uFE0F Physics in Spine\\n\\nSpine 4.2 revolutionizes animation with built-in physics, allowing bones to move naturally by simulating real-world physics. This means:\\n\\n- **Automatic Secondary Motion**: Save time and enhance your animations with automated movement for hair, clothing, and more.\\n\\n<iframe src=\\"https://pixijs.io/spine-v8/examples/physics2.html\\" width=\\"100%\\" height=\\"500\\"></iframe>\\n\\n- **Dynamic Movement**: Enjoy fluid and realistic physics that respond to character movements and animations.\\n\\n<iframe src=\\"https://pixijs.io/spine-v8/examples/physics.html\\" width=\\"100%\\" height=\\"500\\"></iframe>\\n\\n### \uD83D\uDCCE Attachments\\n\\nYou can now attach any PixiJS Container to a slot in your animation with a simple-to-use API.\\n\\n- `addSlotObject(slotName, object)`\\n- `removeSlotObject(slotName)`\\n- `getSlotObject(slotName)`\\n\\n<iframe src=\\"https://pixijs.io/spine-v8/examples/slot-objects.html\\" width=\\"100%\\" height=\\"500\\"></iframe>\\n\\n### \uD83C\uDFCE\uFE0F v8 Spine Player Beta\\n\\nWe have not forgotten about v8! Just as we engineered v8 with the goal of being the fastest WebGPU (and WebGL!) renderer available, we applied this same focus to the v8 implementation of Spine. Here are some impressive statistics:\\n\\n- **50% Faster**: Enjoy significant performance improvements, making it over 50% faster than the previous v7 version.\\n- **50% Less Memory**: We\'ve optimized memory usage, reducing it by over 50% compared to the current v7 version.\\n\\nWe are proud to say that this is one of if not _the_ fastest way to render Spine animations on the web \uD83C\uDFC6. Get ready to create smooth, high-performance animations with ease.\\n\\nWe plan on handing this implementation back over to the Spine team once we have dotted all the i\'s and crossed the t\'s. The last missing feature is the dark-tint property, which is not currently taken into account when rendering in v8. Other than that, all other features are present. If you are not using dark-tint, then this version will work great on v8; we are already using it in production for our games!\\n\\nWe included all the examples in the repo for you to play with [here](https://github.com/pixijs/spine-v8/tree/main/examples).\\n\\nYou can also check out the live v8 examples [here](https://pixijs.io/spine-v8/examples/)\\n\\n## \uD83D\uDCF2 Stay Connected\\n\\nFollow [Doormat23](https://twitter.com/Doormat23) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support."},{"id":"pixi-v8-launches","metadata":{"permalink":"/blog/pixi-v8-launches","source":"@site/blog/2024-03-05-pixi-v8-launches.md","title":"PixiJS v8 Launches! \uD83C\uDF89","description":"PixiJS v8 The Future of 2D Web Graphics is Here!","date":"2024-03-05T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"WebGPU","permalink":"/blog/tags/web-gpu"},{"inline":true,"label":"WebGL","permalink":"/blog/tags/web-gl"}],"readingTime":9.91,"hasTruncateMarker":true,"authors":[{"name":"Mat Groves","title":"PixiJS Creator","url":"https://github.com/GoodboyDigital","socials":{"github":"https://github.com/GoodboyDigital","x":"https://x.com/Doormat23"},"imageURL":"https://github.com/GoodboyDigital.png","key":"mat","page":null},{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS v8 Launches! \uD83C\uDF89","description":"PixiJS v8 The Future of 2D Web Graphics is Here!","slug":"pixi-v8-launches","authors":["mat","zyie"],"tags":["PixiJS","WebGPU","WebGL"],"hide_table_of_contents":true,"keywords":["PixiJS","pixi.js","webGL","webGPU","performance","2d rendering","2d webGL","javascript graphics","game development"]},"unlisted":false,"prevItem":{"title":"PixiJS Joins the Spine 4.2 Physics Revolution! \uD83D\uDE80","permalink":"/blog/pixi-js-hearts-spine"},"nextItem":{"title":"PixiJS v8 Beta! \uD83C\uDF89","permalink":"/blog/pixi-v8-beta"}},"content":"Get ready to push the boundaries of what\'s possible on the web! PixiJS v8 has landed, and it\'s a game-changer. Celebrating a decade of driving innovation, we\'ve supercharged PixiJS with the latest technological advancements, making it faster, more robust, and ridiculously powerful. From the seamless integration of WebGPU to leveraging modern JavaScript for smoother development, PixiJS v8 is all about empowering you to create jaw-dropping web experiences with ease. It\'s not just an update; it\'s the future of 2D web graphics, today. Dive in and let PixiJS v8 elevate your projects to unseen heights. Let\'s make the web a more beautiful place, one pixi(el) at a time.\\n\\n\x3c!--truncate--\x3e\\n\\n## \uD83D\uDE80 Revolutionizing Web Graphics: Welcome to PixiJS v8\\n\\n![PixiJS logo](pixi.svg)\\n\\nIt\'s hard to believe that PixiJS has been part of the open-source community for a whopping ten years. In that time, the digital landscape has evolved tremendously, and so has PixiJS. We\'ve seen significant updates, like the transition to TypeScript, and we\'ve overhauled major parts of the engine, such as asset loading and WebGL integration.\\n\\nNow, we\'re thrilled to unveil PixiJS v8, arguably our most substantial update ever. This release is not just a reflection on the shortcomings of v7, which has served us well, but an acknowledgment that there\'s always room for improvement. Over time, we\'ve all encountered aspects of our code we wished we could refine. Often, the best solutions and insights emerge only after we\'ve stepped back from the problem, allowing us to see the bigger picture.\\n\\nWith PixiJS v8, our aim was to revisit and enhance the foundation of PixiJS, streamlining its core rather than just adding layers of code.\\n\\nOur vision for v8 was clear:\\n\\n- **Longevity:** We designed v8 to stand the test of time, anticipating it will remain relevant and robust for another decade.\\n- **Innovation with WebGPU:** Embracing the latest in rendering technology, we\'ve seamlessly integrated WebGPU, not as an add-on to our existing WebGL renderer but as a core paradigm, ensuring PixiJS remains at the cutting edge as WebGL phases out.\\n- **Leveraging Modern JavaScript:** The advancements in JavaScript have significantly simplified development. We\'ve utilized features like object destructuring and options to make v8 cleaner and more powerful.\\n- **Correcting Past Oversights:** Every project has its lessons. With v8, we\'ve addressed and rearchitected certain aspects of PixiJS, reducing complexity and enhancing functionality, particularly in areas we felt were overengineered in the past (looking at you, textures!).\\n- **Boosting Performance:** PixiJS is already renowned for its speed. With v8, we\'ve unlocked even greater performance, making it faster across the board compared to v7.\\n\\nWe\'re incredibly proud of PixiJS v8 and eager to share the improvements and new features with you. While there are some breaking API changes, we\'ve provided a migration guide and ensured compatibility with v7 wherever possible. Get ready to experience the next level of 2D rendering with PixiJS v8!\\n\\n---\\n\\n## \uD83D\uDD17 Quick links\\n\\n- The new Docs for v8 can be found [here](https://pixijs.download/v8.0.0/docs/index.html)\\n- [Migration](https://pixijs.com/8.x/guides/migrations/v8)\\n- [Examples](https://pixijs.com/8.x/examples)\\n- [Open Games](https://github.com/pixijs/open-games)\\n\\n---\\n\\n## \uD83C\uDF81 Whats New?\\n\\nThere are numerous updates to discuss, more than can be covered in a single post! Below are the key highlights. For a more detailed exploration of these changes, be sure to follow the links provided above.\\n\\n#### \uD83D\uDCC8 New Performance Bar\\n\\n![bunnies](/assets/blog/image.png)\\n\\nThe performance of v8 is faster for **both** renderers. This means by using v8 and the WebGL renderer, all the speed improvements apply! This is mainly as we have taken great care to make a more reactive render loop that only updates what it needs to. Check out the numbers here:\\n\\n- **CPU** = time spent by the CPU rendering a single frame\\n- **GPU** = time spent by the GPU rendering a single frame\\n\\n| Bunny Situation                         | V7 CPU | V8 CPU  | CPU Dif                                                                 | V7 GPU | V8 GPU | GPU dif                                                                |\\n| --------------------------------------- | ------ | ------- | ----------------------------------------------------------------------- | ------ | ------ | ---------------------------------------------------------------------- |\\n| 100k sprites all moving                 | ~50ms  | ~15ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>233%</div>   | ~9ms   | ~2ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>350%</div>  |\\n| 100k sprites not moving                 | ~21ms  | ~0.12ms | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>17417%</div> | ~9ms   | ~0.5ms | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>1700%</div> |\\n| 100k sprites (changing scene structure) | ~50ms  | ~24ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>108%</div>   | ~9ms   | ~2ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>350%</div>  |\\n\\nThese benchmark numbers are based on the Bunnymark test that you can try yourself.\\n\\n- [v7 Bunnymark](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v7&count=100000&renderer=webgpu)\\n- [v8 Bunnymark - WebGPU](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v8&count=100000&renderer=webgpu)\\n- [v8 Bunnymark - WebGL](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v8&count=100000&renderer=webgl)\\n- [Repo](https://github.com/GoodBoyDigital/pixi-bunnymark)\\n\\n#### \uD83D\uDDA5\uFE0F WebGPU Renderer\\n\\n![PixiJS + webGPU = love](/assets/blog/image-1.png)\\n\\nWe\'ve implemented a WebGPU backend for rendering. Whilst this has created a better graphics paradigm under the hood and set us up for the future of rich web content, it\'s important to note that WebGPU does not automatically guarantee improved performance over WebGL in all scenarios, as PixiJS often encounters more limitations on the CPU side than the GPU. However, for scenes with numerous batch breaks, such as filters, masks, and blend modes, WebGPU may offer better performance due to its more modern to rendering. As WebGPU is relatively new, it\'s expected to enhance in speed over time, similar to the development of WebGL. It serves as a solid foundation for future advancements.\\n\\n#### \uD83D\uDCE6 New Package Structure\\n\\nNo more \\"lerna.\\" PixiJS is now just one package with one import root: `import {stuff} from \u2018pixi.js\u2019`. This change means we now have much better tree shaking during app compilation, reducing bundle size if not imported.\\n\\nOld:\\n\\n```ts\\nimport { Sprite } from \'@pixi/sprite\';\\nimport { Graphic } from \'@pixi/graphics\';\\n```\\n\\nNew:\\n\\n```ts\\nimport { Sprite, Graphic } from \'pixi.js\';\\n```\\n\\n### \u2728 We _promise_ the Renderer will work\\n\\nWhen initializing a renderer, this process is now asynchronous. This serves two purposes: firstly, identifying and loading the necessary renderer code to minimize what is loaded for your users. We only load the one backend that your user is using. There\'s no point in loading all the WebGL stuff if they are using WebGPU. Secondly, the initialization of WebGPU itself is an asynchronous process, so we need to have a promise in there somewhere!\\n\\n```ts\\nimport { Application, autoDetectRenderer } from \'pixi.js\';\\n\\nconst app = new Application();\\n\\n(async () => {\\n  await app.init({\\n    // application options\\n  });\\n\\n  // or\\n  const renderer = await autoDetectRenderer({}); // WebGL or WebGPU\\n\\n  // do pixi things\\n})();\\n```\\n\\n#### \uD83C\uDF1F Scene Upgrades\\n\\n![PixiJS logo](/assets/blog/blend-modes.png)\\n\\n- The concept of render groups has been introduced, enabling containers to utilize GPU for their transformations. This facilitates a true 2D hardware-accelerated camera, ideal for navigating large static worlds through panning and zooming, similar to how a camera moves in a 3D environment rather than moving the world itself. This approach can significantly enhance performance.\\n\\n```ts\\nconst container = new Container({\\n  isRenderGroup: true, // this containers transform is now handled on the GPU!\\n});\\n```\\n\\n- Another cool new change is that now blend modes and tints are inherited, much like transforms and alpha. This means you can now easily tint a container, and all its children will have the tint applied - same for blend modes, its as easy as:\\n\\n```\\n// will make all the children tinted red\\ncontainer.tint = \'red\'\\n// will make all the children have the add blend mode\\ncontainer.blendMode = \'add\'\\n```\\n\\nRendering to a texture with antialiasing has been simplified; you only need to enable the new antialiasing property by setting it to true during the creation of a render texture or when applying a filter, similar to the process used for creating your renderer.\\n\\n```\\nconst texture = RenderTexture.create({\\n    width:100,\\n    height:100,\\n    antialias:true // easy as that\\n})\\n```\\n\\n- We have also added support for a wide range of Photoshop-like filters, This allows you to take your rendering to the next level! We have including all the classics:\\n  - ColorBlend, ColorBurnBlend, ColorDodgeBlend, DarkenBlend, DifferenceBlend, DivideBlend, ExclusionBlend, HardLightBlend, HardMixBlend, LightenBlend, LinearBurnBlend, LinearDodgeBlend, LinearLightBlend, LuminosityBlend, NegationBlend, OverlayBlend, PinLightBlend, SaturationBlend, SoftLightBlend, SubtractBlend, VividLightBlend.\\n- It\'s important to mention that these are essentially filters at the core, so it\'s advisable not to overuse them to avoid potential slowdowns.\\n\\n```ts\\nimport `pixi.js/advanced-blend-modes` // make sure to include them in you lib! (or cherry pick one!)\\n\\nmyContainer.blendMode = \'color-burn` // easy!\\n```\\n\\n#### \uD83C\uDFA8 Graphics Upgrades\\n\\n![alt text](/assets/blog/image-4.png)\\n\\n- The Graphics API has undergone changes to become more intuitive and user-friendly, closely resembling the HTML Canvas 2D context API. For instance, drawing and filling a rectangle is simplified as follows:\\n\\n  ```ts\\n  graphics.rect(50, 50, 100, 100).fill(\'blue\');\\n  ```\\n\\n- A `GraphicsContext` has been introduced, powering all graphics operations. Similar to how one texture can be used across many sprites, a single GraphicsContext can now be utilized by multiple Graphics objects, enhancing efficiency and flexibility.\\n\\n- Support for SVG drawing has been added. For example:\\n\\n  ```ts\\n  graphics.svg(\'M 100 350 q 150 -300 300 0\');\\n  ```\\n\\n- Gradient fill support has been introduced, currently limited to linear gradients, allowing for more visually engaging designs.\\n\\n- The new `GraphicsPath` class enables the drawing and sharing of shapes. This feature is particularly useful as it allows for the creation of paths that can then be transformed into Mesh geometry using the `buildGeometryFromPath` function, opening up new possibilities for intricate and detailed graphic designs.\\n\\n```\\n  const path = new GraphicsPath()\\n      .rect(-50, -50, 100, 100)\\n\\n  // create geometry from the path:\\n  const geometry = buildGeometryFromPath({\\n      path,\\n  });\\n\\n  const mesh = new Mesh({\\n      geometry,\\n      texture: Texture.WHITE,\\n  });\\n\\n```\\n\\nFor more information on these graphics upgrades and guidance on how to adapt to the enhanced Graphics API, please refer to the [migration guide](/8.x/guides/migrations/v8), or why not jump in and play with some [examples](/8.x/examples/graphics/simple).\\n\\n#### \uD83D\uDCDD Text Upgrades\\n\\nText has been upgraded to allow for better performance and usability! We have also integrated HTMLText into v8 as standard.\\n\\nBitmapFonts can now be generated on the fly or installed upfront as you prefer. They dynamically add characters as the font\'s glyphs are required, saving on memory. The layout of bitmap text is almost identical to the layout of the default text now, making it easier to switch between the two depending on your needs.\\n\\n```ts\\nconst myText = new BitmapText({\\n  text: \'hello im a bitmap font!\',\\n  // font will be dynamically created\\n  style: {\\n    fontFamily: \'Outfit\',\\n    fontSize: 12,\\n    fill: \'red\',\\n  },\\n});\\n```\\n\\nText fills and strokes now conform to the same fills and strokes as graphics. This means Gradients, textures, and all the fun ways you can fill and stroke graphics can now be applied to Text.\\n\\n```ts\\nconst myText = new Text({\\n  text: \'hello im some fancy text\',\\n  // font will be dynamically created!\\n  style:{\\n    fontFamily: \'Outfit\',\\n    fontSize: 12,\\n    fill: { texture, color:\'red\'} // same as graphics api fills\\n    stroke: { width:3, color:\'blue\' } // same as graphics api strokes\\n  }\\n})\\n```\\n\\n## \uD83E\uDD1D What now? Get involved!\\n\\nAs PixiJS v8 takes its first steps into the world, we\'re eager to see it grow with your feedback and contributions. Now we know things won\'t be perfect, but we\'re committed to quick responses on [GitHub](https://github.com/pixijs/pixijs) and [Discord](https://discord.gg/nrnDP9wtyX) to any issues that arise, valuing your input to make PixiJS even better.\\n\\nA heartfelt thanks to our early adopters (everyone in [here](https://discord.com/channels/734147990985375826/1143191340230914068)) for testing the limits of v8, to our dedicated contributors and team for their hard work. Your efforts and insights are invaluable to us. We could not have gotten here without you!\\n\\nA final big shout-out to PlayCo for their support in making this release a reality!\\n\\nLet\'s continue to innovate and push the boundaries of web graphics together. Your engagement is key to PixiJS\'s evolution, and we\'re excited to see where we can go with your help.\\n\\n## \uD83D\uDCF2 Keep in touch\\n\\nTo stay in the loop, we invite you to follow [Doormat23](https://twitter.com/Doormat23) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media, where we\'ll be unveiling more exciting updates shortly. Alternatively, you can join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for direct engagement and real-time chit-chats."},{"id":"pixi-v8-beta","metadata":{"permalink":"/blog/pixi-v8-beta","source":"@site/blog/2023-10-03-pixi-v8-beta.md","title":"PixiJS v8 Beta! \uD83C\uDF89","description":"PixiJS v8 The Future of 2D Web Graphics Is (almost!) Here!","date":"2023-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"WebGPU","permalink":"/blog/tags/web-gpu"},{"inline":true,"label":"WebGL","permalink":"/blog/tags/web-gl"}],"readingTime":5.52,"hasTruncateMarker":true,"authors":[{"name":"Mat Groves","title":"PixiJS Creator","url":"https://github.com/GoodboyDigital","socials":{"github":"https://github.com/GoodboyDigital","x":"https://x.com/Doormat23"},"imageURL":"https://github.com/GoodboyDigital.png","key":"mat","page":null},{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS v8 Beta! \uD83C\uDF89","description":"PixiJS v8 The Future of 2D Web Graphics Is (almost!) Here!","slug":"pixi-v8-beta","authors":["mat","zyie"],"tags":["PixiJS","WebGPU","WebGL"],"hide_table_of_contents":true,"keywords":["PixiJS","pixi.js","webGL","webGPU","performance","2d rendering","2d webGL","javascript graphics","game development"]},"unlisted":false,"prevItem":{"title":"PixiJS v8 Launches! \uD83C\uDF89","permalink":"/blog/pixi-v8-launches"},"nextItem":{"title":"Introducing the PixiJS Universe!","permalink":"/blog/pixi-universe"}},"content":"We\'re thrilled to offer an exclusive preview of the future of 2D web graphics with the Beta release of PixiJS v8. Although not yet finalized, this Beta iteration is packed with killer performance improvements and features we\'re eager for you to start playing with!\\n\\nOver the course of a decade\u2014yes, you read that right, ten years!\u2014we\'ve implemented significant changes to the PixiJS engine. But the advancements in this new release are among the most monumental we\'ve ever made!\\n\\n\x3c!--truncate--\x3e\\n\\nTwo driving factors catalysed our approach to re-engineering the codebase and rendering pipeline in v8:\\n\\n### 1. \uD83D\uDE0D Embracing WebGPU\\n\\n![PixiJS + webGPU = love](/assets/blog/image-1.png)\\n\\nThe newcomer WebGPU offers a substantial performance improvement over its predecessor, WebGL. It propels web computations and graphics into a new era, providing a more efficient and robust API. Soon, it will be the go-to method for rendering most GPU-powered content on the web.\\n\\nThis shift is reminiscent of PixiJS\'s initial launch. At that time, WebGL was new and only available in a handful of desktop browsers, while Canvas was ubiquitous. PixiJS\'s standout feature was its ability to first attempt rendering with WebGL and then fall back to Canvas as a Plan B. This approach allowed PixiJS content to immediately benefit as WebGL gained traction. Fast forward to today, and WebGL is now [available on 95% of browsers](https://caniuse.com/webgl).\\n\\nHistory is repeating itself with WebGPU, currently supported in only a few desktop browsers and roughly [27% of the market](https://caniuse.com/webgpu). However, it\'s only a matter of time before it becomes universally supported. PixiJS aims to execute the same fallback strategy, allowing you to always leverage the best technology available without needing to rewrite your code. This is precisely what version 8 achieves and will future proof everything we make for another ten years :D\\n\\n### 2. \uD83D\uDE80 Turbocharging Performance\\n\\n![bunnies](/assets/blog/image.png)\\n\\nPixiJS has always been synonymous with speed and high-performance graphics. With v8, we\'ve revisited our architecture to optimize both static and dynamic rendering. While v7 is fast, it operates as a somewhat \u2018na\xefve\u2019 renderer.\\n\\n#### v7 approach:\\n\\n1. Traverse the scene graph and make sure all the transforms are correct\\n2. Traverse the scene graph a second time and do the following\\n   - Build batches to render\\n   - Upload the data to the GPU\\n   - Draw the batch to the screen.\\n\\n#### v8 approach\\n\\n1. Update the transform of _only things that changed_\\n2. Traverse the scene graph and construct a set of instructions.\\n3. Upload all scene data to GPU in one go.\\n4. Execute rendering based on the instructions.\\n\\nThere are three key changes to this loop that give us a performance bump.\\n\\n- First, we update only the elements that have changed. If nothing has moved, no code is executed, optimizing computational overhead.\\n- Second, if the scene graph remains unchanged in subsequent frames, we reuse the existing rendering instructions. This avoids the overhead of reconstructing these instructions for each frame.\\n- Third, if no elements in the scene change position, the data upload step (Step 3) is entirely skipped, thereby saving bandwidth and further reducing computational work.\\n\\nThe net effect of these improvements? A decent performance leap across varying use-cases:\\n\\n**CPU** = time spent by the cpu rendering a single frame\\n**GPU** = time spend by the gpu rendering a single frame\\n\\n| Bunny Situation                         | V7 CPU | V8 CPU  | CPU Dif                                                                 | V7 GPU | V8 GPU | GPU dif                                                                |\\n| --------------------------------------- | ------ | ------- | ----------------------------------------------------------------------- | ------ | ------ | ---------------------------------------------------------------------- |\\n| 100k sprites all moving                 | ~50ms  | ~15ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>233%</div>   | ~9ms   | ~2ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>350%</div>  |\\n| 100k sprites not moving                 | ~21ms  | ~0.12ms | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>17417%</div> | ~9ms   | ~0.5ms | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>1700%</div> |\\n| 100k sprites (changing scene structure) | ~50ms  | ~24ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>108%</div>   | ~9ms   | ~2ms   | <div style={{backgroundColor:\'lightgreen\', color:\'black\'}}>350%</div>  |\\n\\nThese benchmark numbers are based on this Bunnymark test that you can try yourself!\\n\\n- [v7 Bunnymark](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v7&count=100000&renderer=webgpu)\\n- [v8 Bunnymark - WebGPU](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v8&count=100000&renderer=webgpu)\\n- [v8 Bunnymark - WebGL](https://goodboydigital.github.io/pixi-bunnymark/dist/?version=v8&count=100000&renderer=webgl)\\n- [Repo](https://github.com/GoodBoyDigital/pixi-bunnymark)\\n\\nPlease have a play, you can fiddle with the parameters in the url to change the number of bunnies. Curious to see what numbers all of you get!\\n\\nBest of all, these improvements apply to WebGPU _and_ the WebGL renderer. As with all of PixiJs\u2019s party tricks, this all happens automatically :D\\n\\n### But Wait, There\'s More!\\n\\nWhile the two key drivers behind this overhaul were performance and usability, we didn\'t stop there. We\'ve seized this opportunity to enhance the API and introduce a plethora of new features to the engine\u2014far too many to encapsulate in a single post!\\n\\nStay tuned for upcoming blog posts where we\'ll delve deeper into these additional improvements and API refinements, empowering you to create even more remarkable projects. For a comprehensive overview of what\'s new, don\'t miss the [**release notes**](https://github.com/pixijs/pixijs/releases/tag/v8.0.0-beta.0).\\n\\nAs a crucial note, PixiJS v8 retains much of the familiar API despite undergoing significant internal updates. Our changes are geared toward making PixiJS more robust and user-friendly. When you encounter modifications, rest assured that the v7 methodology will continue to work\u2014you\'ll simply see a deprecation warning, guiding you towards optimal practices.\\n\\n### Over to you!\\n\\nAs we progress toward the release candidate, now is the perfect time for you to dive in and explore v8. Your feedback at this stage is invaluable for fine-tuning our engine. We invite you to share your thoughts\u2014the good, the bad, and the ugly\u2014report bugs, and even contribute code. Together, we can elevate PixiJS to unprecedented heights.\\n\\n\uD83D\uDC47 Don\'t wait\u2014dive right in!\\n[Explore the PixiJS v8 Codebase on GitHub](https://github.com/pixijs/pixijs/tree/dev)\\n\\n### Steps to install:\\n\\nvia npm you can install the beta version like so:\\n\\n```\\nnpm install pixi.js@prerelease-v8\\n```\\n\\nthen you can create the most appropriate renderer using the new `autoDetectRenderer` function:\\n\\n```\\nimport { autoDetectRenderer } from \\"pixi.js\\";\\n\\nasync function init()\\n{\\n  const renderer = await autoDetectRenderer({\\n    // any settings\\n  }); // will return a WebGL or WebGPU renderer\\n}\\n```\\n\\nStart experimenting with PixiJS v8 Beta today and join us in shaping the future of 2D web graphics! \uD83C\uDF89\\n\\n### Keep in touch!\\n\\n\\"To stay in the loop, we invite you to follow [Doormat23](https://twitter.com/Doormat23) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media, where we\'ll be unveiling more exciting updates shortly. Alternatively, you can join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for direct engagement and real-time conversations."},{"id":"pixi-universe","metadata":{"permalink":"/blog/pixi-universe","source":"@site/blog/2023-02-17-pixi-universe.md","title":"Introducing the PixiJS Universe!","description":"PixiJS v2 Website Brief Description","date":"2023-02-17T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"PixiJS Universe","permalink":"/blog/tags/pixi-js-universe"}],"readingTime":10.49,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"Introducing the PixiJS Universe!","description":"PixiJS v2 Website Brief Description","slug":"pixi-universe","authors":"zyie","tags":["PixiJS","PixiJS Universe"],"hide_table_of_contents":true,"keywords":["keyword","for","search","engines"]},"unlisted":false,"prevItem":{"title":"PixiJS v8 Beta! \uD83C\uDF89","permalink":"/blog/pixi-v8-beta"}},"content":"We are excited to announce the launch of the PixiJS Universe, an initiative to further enhance the capabilities of PixiJS and make it even easier for developers to create amazing games and apps.\\n\\n\x3c!--truncate--\x3e\\n\\nFor years, PixiJS has been the most popular 2D renderer for the web, but it was always \\"just a rendering engine.\\" The community has created many great tools to help developers build games and applications with PixiJS, but we lacked the manpower to maintain and improve these tools, causing fragmentation in the community.\\nTo address this, Playco has assembled a dedicated team of developers who will work on PixiJS full-time. Over the next 12 months, we have more than ten projects planned, and in this announcement, we would like to introduce some of them.\\n\\n## Phase 1\u200B\\n\\nWe have several new projects in the works, and we are releasing them in four phases over the year. We are currently nearing the end of phase 1, which has seen the release of several exciting new tools and libraries for PixiJS:\\n\\n### PixiJS Website\u200B\\n\\nFirst up we are excited to announce that we will be releasing a beta version of our new website for PixiJS.\\n\\nThe current documentation has suffered from long-term organic growth over the years with little structure and as such much of the PixiJS documentation is fragmented across multiple sites. This new website will put everything you need in one place and be easily searchable.\\n\\nWe are also planning on improving the documentation and adding more guides and examples, as well as considering translating the documentation into other languages.\\n\\nIf you have any ideas on how to improve the site please let us know!\\n\\n- [Github Repo](https://github.com/pixijs/pixijs.com)\\n\\n### PixiJS React\u200B\\n\\nNext up is PixiJS React. A library that provides a way to use PixiJS in React applications. PixiJS React is a continuation of the `react-pixi` library created by Patrick Brouwer, which has been widely used by the PixiJS community in React projects. PixiJS has taken over maintenance of the library and is dedicated to improving the library\'s performance, documentation, and support for new features.\\n\\nThe library provides an easy-to-use interface that makes it easy for developers to create React applications with PixiJS. The library integrates all the core features of PixiJS and allows you to create custom components for 3rd party libraries.\\n\\n- [Github Repo](https://github.com/pixijs/pixi-react)\\n\\n### PixiJS Open Games\u200B\\n\\nWe have now released a new repository called \\"PixiJS Open Games\\". This is a collection of open-source games that showcases how to use PixiJS to create games and is released under the MIT license. The purpose of these games is to provide professional examples of how to use PixiJS for game development.\\n\\nThe first two games released are a match-3 game and a bubble shooter game. These games not only demonstrate how to use PixiJS for game development but also how to use other libraries such as PixiJS UI and AssetPack. We also have more games planned for release, which will demonstrate how to use PixiJS with other libraries such as PixiJS Layout and PixiJS React.\\n\\nPixiJS Open Games will hopefully be a valuable resource for game developers who want to learn how to use PixiJS for game development and will also be a great source of inspiration for developers looking to create their own games using PixiJS. The project is available on GitHub for anyone who wants to explore the code or contribute to the project.\\n\\n- [Github Repo](https://github.com/pixijs/open-games)\\n- [Play Puzzling Potions](https://puzzling-potions.netlify.app/)\\n- [Play Bubbo Bubbo](https://bubbo-bubbo.netlify.app/)\\n\\n### PixiJS UI & PixiJS Layout\u200B\\n\\nPixiJS UI is a new library for developers who want to create beautiful and functional user interfaces with PixiJS. The library includes a range of components such as buttons, checkboxes, sliders, text inputs, scroll views, lists, radio buttons, and progress bars, which can be easily integrated into your game. These components are highly customizable, allowing you to tweak the appearance and behaviour of each element to fit your game\'s specific needs.\\n\\nPixiJS UI has been used in all of the open-source games, so feel free to check these out for real-world examples.\\n\\n- [PixiJS UI Github Repo](https://github.com/pixijs/ui)\\n\\nPixiJS Layout is another library that can make your life as a developer easier. This library enables you to create responsive layouts using PixiJS, which means you can design interfaces that adapt to different screen sizes and aspect ratios. PixiJS Layout works well with PixiJS UI, allowing you to combine both libraries to create complex, dynamic interfaces that respond to user input and screen changes.\\n\\nWith PixiJS Layout, you have the flexibility to create resizable layouts that can be adjusted to fit any screen size or device. This means that your game\'s interface can look great on everything from small mobile devices to large desktop displays.\\n\\nPixiJS Layout is still under development but will be ready in the next few weeks\\n\\n- [PixiJS Layout Github Repo](https://github.com/pixijs/layout)\\n\\n### AssetPack\u200B\\n\\nFinally, for phase 1 we are announcing AssetPack.\\n\\nAsset management is an important part of developing applications, and the new AssetPack library aims to make this process easier. AssetPack is a framework-agnostic library that can be used with any framework, including PixiJS, ThreeJS, and Phaser. It provides a range of features that help developers manage their assets efficiently.\\nThe key feature of AssetPack is the ability to automatically generate new assets on the fly. For example, you can provide it with a folder of individual images and it will generate sprite sheets, which can significantly improve the performance of your application. It also provides plugins to generate mipmaps, convert fonts to different formats, convert audio to different formats, compress images, and minify JSON. These features help developers optimize their assets for faster loading times, better performance, and improved user experience.\\n\\nWe will soon be releasing a new blog post that provides more details on how to use it. With its many useful features and framework-agnostic design. However, if you want to get stuck in today then check out the GitHub repo\\n\\n- [Github Repo](https://github.com/pixijs/assetpack)\\n\\n## Phase 2\u200B\\n\\nPhase 2 will begin shortly and aims to make it easier to work with PixiJS applications.\\n\\n### PixiJS JumpStart\u200B\\n\\nJumpstart is a new CLI tool being developed by the PixiJS team to simplify the process of creating new PixiJS applications. With this tool, developers will no longer need to set up complicated tooling or worry about setting up different bundlers and frameworks. The tool will handle all the setup for you, allowing you to focus on building your application.\\n\\nJumpstart will be similar to other CLI tools such as Create-React-App or Create-Vue, which have become popular in the front-end development community. The tool will provide templates for different bundlers and frameworks, including webpack, parcel, rollup, and more. This will make it easy for developers to get started with PixiJS regardless of their preferred tools and workflows. With Jumpstart, you\'ll be able to create a new PixiJS application in just a few minutes and start building right away.\\n\\n### PixiJS Dev Tools\u200B\\n\\nPixiJS dev tools will be a browser extension that is planned to be released soon to help developers debug their PixiJS applications. This tool aims to make it easier for developers to understand the inner workings of PixiJS, optimize their code, and follow best practices. It is designed to help developers diagnose performance issues and visualize the resources that their applications are consuming.\\n\\nOne of the key features of the PixiJS Dev Tools is its ability to help developers understand the complex process of batching in PixiJS. Batching is a technique used to optimize the rendering of multiple objects in the same draw call. This process can be complicated to understand, especially for new developers. PixiJS Dev Tools aims to make it easier to debug and optimize the rendering of objects.\\n\\nOverall, PixiJS Dev Tools will be a powerful tool that will make it easier for developers to build high-performance, visually stunning applications with PixiJS. By providing developers with a deeper understanding of the inner workings of PixiJS, this toolset will help developers optimize their code and create more efficient and engaging applications.\\n\\n## Phase 3\u200B\\n\\nPhase 3 is where our long-term projects start to be revealed. These are major changes to the PixiJS ecosystem that we are incredibly excited about\\n\\n### Comet\u200B\\n\\nComet will be a new editor that aims to make it easier than ever to design and create games and applications with PixiJS. With its intuitive and user-friendly interface, the editor is designed to appeal to both designers and developers, allowing both groups to collaborate and work more efficiently.\\n\\nOne of the standout features of Comet is the visual interface it provides for creating and editing scenes, sprites, animations, and more. This means that designers can create and edit complex scenes without ever having to write a single line of code. The editor provides a range of tools and options for creating sprites, animations, and other game elements, making it easy to get started with creating a game or application.\\n\\nIn addition, developers will appreciate the runtime player feature, which allows them to easily recreate scenes in their own applications. This makes it easy to test and iterate on designs, ensuring that the final product is both functional and visually appealing. And with multi-user, real-time collaboration, Comet makes it easy for teams to work together, sharing assets and ideas and creating high-quality games and applications in record time.\\n\\n### PixiJS v8\u200B\\n\\nPixiJS v8 will be the next major release that represents a complete rewrite of PixiJS from the ground up. The development team has leveraged their extensive experience over many years to make improvements and optimizations to the core PixiJS engine. The new version of PixiJS is designed to be faster and more efficient, providing a significant improvement in rendering performance compared to v7 (currently sitting at x2)\\n\\nOne of the most exciting features of PixiJS v8 is the inclusion of first-class support for WebGPU, which is a new graphics API that is being developed by major browser vendors. This will enable developers to take advantage of advanced GPU capabilities, which can significantly improve the performance of graphics-intensive applications. In addition to WebGPU support, the PixiJS team has also made a significant effort to optimize the engine for the canvas renderer, which will be available as a first-class option for developers looking to reduce bundle size.\\n\\nOverall, PixiJS v8 represents a major leap forward for us, developers can expect a much faster and more efficient engine that is better suited for building complex, graphics-intensive applications.\\n\\n## Phase 4\u200B\\n\\nPhase 4 represents a leap into new territory for PixiJS as we look to delve deeper into areas outside of strictly 2D rendering.\\n\\n### PixiJS 3D\u200B\\n\\nFor years, Goodboy (now Playco) has had an internal 3D engine called Odie that was built on top of PixiJS. We are now planning to open-source it, which is exciting for those of you who want to seamlessly mix 2D and 3D content in your games or applications. With PixiJS 3D, you will no longer need to switch between engines or frameworks to incorporate 3D elements in your project.\\n\\nAlthough this is a long-term project, the team is making progress and plans to share more information later in the year. This release will greatly expand PixiJS\'s capabilities and give developers even more flexibility when building their applications.\\n\\n### PixiJS Game Engine\u200B\\n\\nFinally, we are thrilled to announce that we will be working on a new library called PixiJS Game Engine. This game engine aims to provide everything you would expect from a 2D/3D game engine and will offer many features and tools to make game development easier and more efficient.\\n\\nSome of the features of PixiJS Game Engine will include support for physics engines, audio, input handling, asset loading and management, state management, animation and tweening, and more.\\n\\n## Conclusion\\n\\nWe\'ve shared a lot of exciting news about new projects and updates coming to the PixiJS community. There\'s a lot to look forward to in the upcoming months.\\n\\nWe want to extend our sincere thanks to the PixiJS community, its contributors, and Playco for making all of this possible. We\'re excited to see what you\'ll create with these new tools and resources, and we look forward to continuing to support and grow the PixiJS ecosystem. Be sure to check out the GitHub links mentioned above and stay tuned for more updates on the PixiJS Universe!"}]}}')}}]);