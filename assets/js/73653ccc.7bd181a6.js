"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["687"],{12755:function(e,n,l){l.r(n),l.d(n,{frontMatter:()=>t,default:()=>d,toc:()=>c,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"guides/components/application/culler-plugin","title":"Culler Plugin","description":"Learn how to use the CullerPlugin in PixiJS to optimize rendering by skipping offscreen objects.","source":"@site/docs/guides/components/application/culler-plugin.md","sourceDirName":"guides/components/application","slug":"/guides/components/application/culler-plugin","permalink":"/8.x/guides/components/application/culler-plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/application/culler-plugin.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Learn how to use the CullerPlugin in PixiJS to optimize rendering by skipping offscreen objects."},"sidebar":"guidesSidebar","previous":{"title":"Resize Plugin","permalink":"/8.x/guides/components/application/resize-plugin"},"next":{"title":"Renderers","permalink":"/8.x/guides/components/renderers/"}}'),r=l(85893),s=l(50065);let t={sidebar_position:2,description:"Learn how to use the CullerPlugin in PixiJS to optimize rendering by skipping offscreen objects."},a="Culler Plugin",o={},c=[{value:"When Should You Use It?",id:"when-should-you-use-it",level:2},{value:"Usage",id:"usage",level:2},{value:"Enabling the Culler Plugin",id:"enabling-the-culler-plugin",level:3},{value:"Configuring Containers for Culling",id:"configuring-containers-for-culling",level:3},{value:"Optional: Define a Custom Cull Area",id:"optional-define-a-custom-cull-area",level:3},{value:"Manual Culling with <code>Culler</code>",id:"manual-culling-with-culler",level:2},{value:"API Reference",id:"api-reference",level:2}];function u(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"culler-plugin",children:"Culler Plugin"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CullerPlugin"})," automatically skips rendering for offscreen objects in your scene. It does this by using the renderer's screen bounds to determine whether containers (and optionally their children) intersect the view. If they don't, they are ",(0,r.jsx)(n.strong,{children:"culled"}),", reducing rendering and update overhead."]}),"\n",(0,r.jsxs)(n.p,{children:["PixiJS does not enable this plugin by default. You must manually register it using the ",(0,r.jsx)(n.code,{children:"extensions"})," system."]}),"\n",(0,r.jsx)(n.h2,{id:"when-should-you-use-it",children:"When Should You Use It?"}),"\n",(0,r.jsx)(n.p,{children:"Culling is ideal for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Large scenes with many offscreen elements"}),"\n",(0,r.jsx)(n.li,{children:"Scrollable or camera-driven environments (e.g. tilemaps, world views)"}),"\n",(0,r.jsx)(n.li,{children:"Optimizing render performance without restructuring your scene graph"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const app = new Application();\n\nawait app.init({\n  width: 800,\n  height: 600,\n  backgroundColor: 0x222222,\n});\n\nextensions.add(CullerPlugin);\n\nconst world = new Container();\nworld.cullable = true;\nworld.cullableChildren = true;\n\nconst sprite = new Sprite.from('path/to/image.png');\nsprite.cullable = true; // Enable culling for this sprite\nworld.addChild(sprite);\n\napp.stage.addChild(world);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"enabling-the-culler-plugin",children:"Enabling the Culler Plugin"}),"\n",(0,r.jsx)(n.p,{children:"To enable automatic culling in your application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { extensions, CullerPlugin } from 'pixi.js';\n\nextensions.add(CullerPlugin);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will override the default ",(0,r.jsx)(n.code,{children:"render()"})," method on your ",(0,r.jsx)(n.code,{children:"Application"})," instance to call ",(0,r.jsx)(n.code,{children:"Culler.shared.cull()"})," before rendering:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Internally replaces:\napp.renderer.render({ container: app.stage });\n// With:\nCuller.shared.cull(app.stage, app.renderer.screen);\napp.renderer.render({ container: app.stage });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"configuring-containers-for-culling",children:"Configuring Containers for Culling"}),"\n",(0,r.jsxs)(n.p,{children:["By default, containers are ",(0,r.jsx)(n.strong,{children:"not culled"}),". To enable culling for a container, set the following properties:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"container.cullable = true; // Enables culling for this container\ncontainer.cullableChildren = true; // Enables recursive culling for children\n"})}),"\n",(0,r.jsx)(n.h3,{id:"optional-define-a-custom-cull-area",children:"Optional: Define a Custom Cull Area"}),"\n",(0,r.jsxs)(n.p,{children:["You can define a ",(0,r.jsx)(n.code,{children:"cullArea"})," to override the default bounds check (which uses global bounds):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"container.cullArea = new Rectangle(0, 0, 100, 100);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is useful for containers with many children where bounding box calculations are expensive or inaccurate."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"manual-culling-with-culler",children:["Manual Culling with ",(0,r.jsx)(n.code,{children:"Culler"})]}),"\n",(0,r.jsx)(n.p,{children:"If you\u2019re not using the plugin but want to manually cull before rendering:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Culler } from 'pixi.js';\n\nconst stage = new Container();\n// Configure stage and children...\n\nCuller.shared.cull(stage, { x: 0, y: 0, width: 800, height: 600 });\nrenderer.render({ container: stage });\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://pixijs.download/release/docs/app.CullerPlugin.html",children:"CullerPlugin"})}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);