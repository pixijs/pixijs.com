"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["9912"],{36222:function(e,n,i){i.r(n),i.d(n,{default:()=>l,frontMatter:()=>o,metadata:()=>t,assets:()=>d,toc:()=>c,contentTitle:()=>a});var t=JSON.parse('{"id":"guides/concepts/environments","title":"Environments","description":"Learn how PixiJS adapts to different environments like browsers, Web Workers, and custom execution contexts, and how to configure it for your needs.","source":"@site/docs/guides/concepts/environments.md","sourceDirName":"guides/concepts","slug":"/guides/concepts/environments","permalink":"/8.x/guides/concepts/environments","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/concepts/environments.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Environments","description":"Learn how PixiJS adapts to different environments like browsers, Web Workers, and custom execution contexts, and how to configure it for your needs."},"sidebar":"guidesSidebar","previous":{"title":"Render Layers","permalink":"/8.x/guides/concepts/render-layers"},"next":{"title":"Garbage Collection","permalink":"/8.x/guides/concepts/garbage-collection"}}'),s=i("85893"),r=i("50065");let o={sidebar_position:5,title:"Environments",description:"Learn how PixiJS adapts to different environments like browsers, Web Workers, and custom execution contexts, and how to configure it for your needs."},a="Using PixiJS in Different Environments",d={},c=[{value:"Running PixiJS in the Browser",id:"running-pixijs-in-the-browser",level:2},{value:"Example:",id:"example",level:3},{value:"Running PixiJS in Web Workers",id:"running-pixijs-in-web-workers",level:2},{value:"Example:",id:"example-1",level:3},{value:"Custom Environments",id:"custom-environments",level:2},{value:"Example Custom Adapter:",id:"example-custom-adapter",level:3}];function p(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-pixijs-in-different-environments",children:"Using PixiJS in Different Environments"})}),"\n",(0,s.jsx)(n.p,{children:"PixiJS is a highly adaptable library that can run in a variety of environments, including browsers, Web Workers, and custom execution contexts like Node.js. This guide explains how PixiJS handles different environments and how you can configure it to suit your application's needs."}),"\n",(0,s.jsx)(n.h2,{id:"running-pixijs-in-the-browser",children:"Running PixiJS in the Browser"}),"\n",(0,s.jsxs)(n.p,{children:["For browser environments, PixiJS uses the ",(0,s.jsx)(n.code,{children:"BrowserAdapter"})," by default, you should not need to configure anything"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Application } from 'pixi.js';\n\nconst app = new Application();\n\nawait app.init({\n    width: 800,\n    height: 600,\n});\n\ndocument.body.appendChild(app.canvas);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"running-pixijs-in-web-workers",children:"Running PixiJS in Web Workers"}),"\n",(0,s.jsxs)(n.p,{children:["Web Workers provide a parallel execution environment, ideal for offloading rendering tasks. PixiJS supports Web Workers using the ",(0,s.jsx)(n.code,{children:"WebWorkerAdapter"}),":"]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { DOMAdapter, WebWorkerAdapter } from 'pixi.js';\n\n// Must be set before creating anything in PixiJS\nDOMAdapter.set(WebWorkerAdapter);\n\nconst app = new Application();\n\nawait app.init({\n    width: 800,\n    height: 600,\n});\n\napp.canvas // OffscreenCanvas\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-environments",children:"Custom Environments"}),"\n",(0,s.jsxs)(n.p,{children:["For non-standard environments, you can create a custom adapter by implementing the ",(0,s.jsx)(n.code,{children:"Adapter"})," interface. This allows PixiJS to function in environments like Node.js or headless testing setups."]}),"\n",(0,s.jsx)(n.h3,{id:"example-custom-adapter",children:"Example Custom Adapter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { DOMAdapter } from 'pixi.js';\n\nconst CustomAdapter = {\n    createCanvas: (width, height) => {/* custom implementation */},\n    getCanvasRenderingContext2D: () => {/* custom implementation */},\n    getWebGLRenderingContext: () => {/* custom implementation */},\n    getNavigator: () => ({ userAgent: 'Custom', gpu: null }),\n    getBaseUrl: () => 'custom://',\n    fetch: async (url, options) => {/* custom fetch */},\n    parseXML: (xml) => {/* custom XML parser */},\n};\n\nDOMAdapter.set(CustomAdapter);\n"})})]})}function l(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);