"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["6159"],{68157:function(e,t,n){n.r(t),n.d(t,{default:()=>c,frontMatter:()=>u,metadata:()=>i,assets:()=>p,toc:()=>l,contentTitle:()=>a});var i=JSON.parse('{"id":"examples/filters-advanced/custom","title":"Custom","description":"<ExampleEditor files={{","source":"@site/docs/examples/filters-advanced/custom.mdx","sourceDirName":"examples/filters-advanced","slug":"/examples/filters-advanced/custom","permalink":"/8.x/examples/filters-advanced/custom","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":1,"custom_edit_url":null,"title":"Custom"},"sidebar":"examplesSidebar","previous":{"title":"Mouse Blending","permalink":"/8.x/examples/filters-advanced/mouse-blending"},"next":{"title":"Perspective Mesh","permalink":"/8.x/examples/mesh-and-shaders/perspective-mesh"}}'),r=n("85893"),o=n("50065"),s=n("43076");let u={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:1,custom_edit_url:null,title:"Custom"},a=void 0,p={},l=[];function d(e){return(0,r.jsx)(s.N,{files:{"index.js":"import { Application, Assets, Filter, GlProgram, Sprite } from 'pixi.js';\nimport fragment from './custom.frag';\nimport vertex from './custom.vert';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({\n        resizeTo: window,\n        hello: true,\n        preference: 'webgl',\n    });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // Load the texture\n    const texture = await Assets.load('https://pixijs.com/assets/bg_grass.jpg');\n\n    // Create background image\n    const background = Sprite.from(texture);\n\n    background.width = app.screen.width;\n    background.height = app.screen.height;\n    app.stage.addChild(background);\n\n    // Create the new filter, arguments: (vertexShader, framentSource)\n    const filter = new Filter({\n        glProgram: new GlProgram({\n            fragment,\n            vertex,\n        }),\n        resources: {\n            timeUniforms: {\n                uTime: { value: 0.0, type: 'f32' },\n            },\n        },\n    });\n\n    // === WARNING ===\n    // specify uniforms in filter constructor\n    // or set them BEFORE first use\n    // filter.uniforms.customUniform = 0.0\n\n    // Add the filter\n    background.filters = [filter];\n\n    // Animate the filter\n    app.ticker.add((ticker) =>\n    {\n        filter.resources.timeUniforms.uniforms.uTime += 0.04 * ticker.deltaTime;\n    });\n})();\n","custom.vert":"in vec2 aPosition;\nout vec2 vTextureCoord;\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}","custom.frag":"in vec2 vTextureCoord;\nin vec4 vColor;\n\nuniform sampler2D uTexture;\nuniform float uTime;\n\nvoid main(void)\n{\n    vec2 uvs = vTextureCoord.xy;\n\n    vec4 fg = texture2D(uTexture, vTextureCoord);\n\n\n    fg.r = uvs.y + sin(uTime);\n\n\n    gl_FragColor = fg;\n\n}"}})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);