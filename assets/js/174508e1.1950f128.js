"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["4776"],{26168:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,default:()=>h,toc:()=>p,metadata:()=>a,assets:()=>d,contentTitle:()=>c});var a=JSON.parse('{"id":"examples/advanced/screen-shot","title":"Screen Shot","description":"","source":"@site/docs/examples/advanced/screen-shot.mdx","sourceDirName":"examples/advanced","slug":"/examples/advanced/screen-shot","permalink":"/8.x/examples/advanced/screen-shot","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":4,"custom_edit_url":null,"title":"Screen Shot"},"sidebar":"examplesSidebar","previous":{"title":"Mouse Trail","permalink":"/8.x/examples/advanced/mouse-trail"},"next":{"title":"Collision Detection","permalink":"/8.x/examples/advanced/collision-detection"}}'),i=t(85893),o=t(50065),s=t(31531);let r={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:4,custom_edit_url:null,title:"Screen Shot"},c=void 0,d={},p=[];function l(e){return(0,i.jsx)(s.N,{files:{"index.js":"import { Application, Assets, Container, Sprite, Text, TextStyle } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ background: '#111', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // Create and add a container to the stage\n  const container = new Container();\n\n  const containerFrame = new Container();\n\n  containerFrame.addChild(container);\n\n  app.stage.addChild(containerFrame);\n\n  // Load the bunny texture\n  const texture = await Assets.load('https://pixijs.com/assets/bunny.png');\n\n  // Create a 5x5 grid of bunnies in the container\n  for (let i = 0; i < 25; i++) {\n    const bunny = new Sprite(texture);\n\n    bunny.x = (i % 5) * 40;\n    bunny.y = Math.floor(i / 5) * 40;\n    container.addChild(bunny);\n  }\n\n  // Move the container to the center\n  containerFrame.x = app.screen.width / 2;\n  containerFrame.y = app.screen.height / 2;\n\n  // Center the bunny sprites in local container coordinates\n  container.pivot.x = container.width / 2;\n  container.pivot.y = container.height / 2;\n\n  // Listen for animate update\n  app.ticker.add((time) => {\n    // Continuously rotate the container!\n    // * use delta to create frame-independent transform *\n    container.rotation -= 0.01 * time.deltaTime;\n  });\n\n  let screenshot;\n\n  // Take the screenshot and download it\n  async function takeScreenshot() {\n    if (screenshot !== undefined) {\n      screenshot.remove();\n    }\n\n    app.stop();\n    const url = await app.renderer.extract.base64(containerFrame);\n\n    screenshot = document.createElement('a');\n\n    document.body.append(screenshot);\n\n    screenshot.style.position = 'fixed';\n    screenshot.style.top = '20px';\n    screenshot.style.right = '20px';\n    screenshot.download = 'screenshot';\n    screenshot.href = url;\n\n    const image = new Image();\n\n    image.width = app.screen.width / 5;\n    image.src = url;\n\n    screenshot.innerHTML = image.outerHTML;\n\n    app.start();\n  }\n\n  app.stage.eventMode = 'static';\n  app.stage.hitArea = app.screen;\n  app.stage.on('pointerdown', takeScreenshot);\n\n  const style = new TextStyle({\n    fontFamily: 'Roboto',\n    fill: '#999',\n  });\n\n  const screenshotText = new Text({ text: 'Click To Take Screenshot', style });\n\n  screenshotText.x = Math.round((app.screen.width - screenshotText.width) / 2);\n  screenshotText.y = Math.round(screenshotText.height / 2);\n\n  app.stage.addChild(screenshotText);\n})();\n"}})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);