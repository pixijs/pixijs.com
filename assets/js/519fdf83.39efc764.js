"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["3760"],{61261:function(e,t,s){s.r(t),s.d(t,{default:()=>l,frontMatter:()=>r,metadata:()=>a,assets:()=>h,toc:()=>c,contentTitle:()=>o});var a=JSON.parse('{"id":"guides/components/sprite-sheets","title":"Spritesheets","description":"Now that you understand basic sprites, it\'s time to talk about a better way to create them - the Spritesheet class.","source":"@site/versioned_docs/version-7.x/guides/components/sprite-sheets.md","sourceDirName":"guides/components","slug":"/guides/components/sprite-sheets","permalink":"/7.x/guides/components/sprite-sheets","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/versioned_docs/version-7.x/guides/components/sprite-sheets.md","tags":[],"version":"7.x","frontMatter":{},"sidebar":"guidesSidebar","previous":{"title":"Sprites","permalink":"/7.x/guides/components/sprites"},"next":{"title":"Text","permalink":"/7.x/guides/components/text"}}'),i=s("85893"),n=s("50065");let r={},o="Spritesheets",h={},c=[{value:"Anatomy of a Spritesheet",id:"anatomy-of-a-spritesheet",level:2},{value:"Doubly Efficient",id:"doubly-efficient",level:2},{value:"Creating SpriteSheets",id:"creating-spritesheets",level:2}];function d(e){let t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"spritesheets",children:"Spritesheets"})}),"\n",(0,i.jsxs)(t.p,{children:["Now that you understand basic sprites, it's time to talk about a better way to create them - the ",(0,i.jsx)(t.a,{href:"https://pixijs.download/v7.4.2/docs/PIXI.Spritesheet.html",children:"Spritesheet"})," class."]}),"\n",(0,i.jsx)(t.p,{children:"A Spritesheet is a media format for more efficiently downloading and rendering Sprites.  While somewhat more complex to create and use, they are a key tool in optimizing your project."}),"\n",(0,i.jsx)(t.h2,{id:"anatomy-of-a-spritesheet",children:"Anatomy of a Spritesheet"}),"\n",(0,i.jsx)(t.p,{children:"The basic idea of a spritesheet is to pack a series of images together into a single image, track where each source image ends up, and use that combined image as a shared BaseTexture for the resulting Sprites."}),"\n",(0,i.jsx)(t.p,{children:"The first step is to collect the images you want to combine.  The sprite packer then collects the images, and creates a new combined image."}),"\n",(0,i.jsx)(t.p,{children:"As this image is being created, the tool building it keeps track of the location of the rectangle where each source image is stored.  It then writes out a JSON file with that information."}),"\n",(0,i.jsx)(t.p,{children:"These two files, in combination, can be passed into a SpriteSheet constructor.  The SpriteSheet object then parses the JSON, and creates a series of Texture objects, one for each source image, setting the source rectangle for each based on the JSON data.  Each texture uses the same shared BaseTexture as its source."}),"\n",(0,i.jsx)(t.h2,{id:"doubly-efficient",children:"Doubly Efficient"}),"\n",(0,i.jsx)(t.p,{children:"SpriteSheets help your project in two ways."}),"\n",(0,i.jsxs)(t.p,{children:["First, by ",(0,i.jsx)(t.strong,{children:"speeding up the loading process"}),".  While downloading a SpriteSheet's texture requires moving the same (or even slightly more!) number of bytes, they're grouped into a single file.  This means that the user's browser can request and download far fewer files for the same number of Sprites.  The number of files ",(0,i.jsx)(t.em,{children:"itself"})," is a key driver of download speed, because each request requires a round-trip to the webserver, and browsers are limited to how many files they can download simultaneously.  Converting a project from individual source images to shared sprite sheets can cut your download time in half, at no cost in quality."]}),"\n",(0,i.jsxs)(t.p,{children:["Second, by ",(0,i.jsx)(t.strong,{children:"improving batch rendering"}),".  WebGL rendering speed scales roughly with the number of draw calls made.  Batching multiple Sprites, etc. into a single draw call is the main secret to how PixiJS can run so blazingly fast.  Maximizing batching is a complex topic, but when multiple Sprites all share a common BaseTexture, it makes it more likely that they can be batched together and rendered in a single call."]}),"\n",(0,i.jsx)(t.h2,{id:"creating-spritesheets",children:"Creating SpriteSheets"}),"\n",(0,i.jsx)(t.p,{children:"You can use a 3rd party tool to assemble your sprite sheet files.  Here are two that may fit your needs:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"http://renderhjs.net/shoebox/",children:"ShoeBox"}),": ShoeBox is a free, Adobe AIR-based sprite packing utility that is great for small projects or learning how SpriteSheets work."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://www.codeandweb.com/texturepacker",children:"TexturePacker"}),": TexturePacker is a more polished tool that supports advanced features and workflows. A free version is available which has all the necessary features for packing spritesheets for PixiJS. It's a good fit for larger projects and professional game development, or projects that need more complex tile mapping features."]}),"\n",(0,i.jsx)(t.p,{children:"Spritesheet data can also be created manually or programmatically, and supplied to a new AnimatedSprite. This may be an easier option if your sprites are already contained in a single image."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// Create object to store sprite sheet data\nconst atlasData = {\n	frames: {\n		enemy1: {\n			frame: { x: 0, y:0, w:32, h:32 },\n			sourceSize: { w: 32, h: 32 },\n			spriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n		},\n		enemy2: {\n			frame: { x: 32, y:0, w:32, h:32 },\n			sourceSize: { w: 32, h: 32 },\n			spriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n		},\n	},\n	meta: {\n		image: 'images/spritesheet.png',\n		format: 'RGBA8888',\n		size: { w: 128, h: 32 },\n		scale: 1\n	},\n	animations: {\n		enemy: ['enemy1','enemy2'] //array of frames by name\n	}\n}\n\n\n// Create the SpriteSheet from data and image\nconst spritesheet = new PIXI.Spritesheet(\n	PIXI.BaseTexture.from(atlasData.meta.image),\n	atlasData\n);\n\n// Generate all the Textures asynchronously\nawait spritesheet.parse();\n\n// spritesheet is ready to use!\nconst anim = new PIXI.AnimatedSprite(spritesheet.animations.enemy);\n\n// set the animation speed\nanim.animationSpeed = 0.1666;\n// play the animation on a loop\nanim.play();\n// add it to the stage to render\napp.stage.addChild(anim);\n"})})]})}function l(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);