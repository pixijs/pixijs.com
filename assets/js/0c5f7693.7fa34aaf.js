"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["5029"],{7795:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,default:()=>u,toc:()=>l,metadata:()=>s,assets:()=>c,contentTitle:()=>d});var s=JSON.parse('{"id":"examples/assets/bundle","title":"Bundle","description":"","source":"@site/docs/examples/assets/bundle.mdx","sourceDirName":"examples/assets","slug":"/examples/assets/bundle","permalink":"/8.x/examples/assets/bundle","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":4,"custom_edit_url":null,"title":"Bundle"},"sidebar":"examplesSidebar","previous":{"title":"Background","permalink":"/8.x/examples/assets/background"},"next":{"title":"Basic","permalink":"/8.x/examples/offscreen-canvas/basic"}}'),a=t(85893),o=t(50065),i=t(31531);let r={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:4,custom_edit_url:null,title:"Bundle"},d=void 0,c={},l=[];function p(e){return(0,a.jsx)(i.N,{files:{"index.js":"import { Application, Assets, Sprite } from 'pixi.js';\n\n// Create a new application\nconst app = new Application();\n\nasync function init() {\n  // Initialize the application\n  await app.init({ background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // Manifest example\n  const manifestExample = {\n    bundles: [\n      {\n        name: 'load-screen',\n        assets: [\n          {\n            alias: 'flowerTop',\n            src: 'https://pixijs.com/assets/flowerTop.png',\n          },\n        ],\n      },\n      {\n        name: 'game-screen',\n        assets: [\n          {\n            alias: 'eggHead',\n            src: 'https://pixijs.com/assets/eggHead.png',\n          },\n        ],\n      },\n    ],\n  };\n\n  await Assets.init({ manifest: manifestExample });\n\n  // Bundles can be loaded in the background too!\n  Assets.backgroundLoadBundle(['load-screen', 'game-screen']);\n\n  makeLoadScreen();\n}\n\nasync function makeLoadScreen() {\n  // Get the assets from the load screen bundle.\n  // If the bundle was already downloaded the promise resolves instantly!\n  const loadScreenAssets = await Assets.loadBundle('load-screen');\n\n  // Create a new Sprite from the resolved loaded texture\n  const goNext = new Sprite(loadScreenAssets.flowerTop);\n\n  goNext.anchor.set(0.5);\n  goNext.x = app.screen.width / 2;\n  goNext.y = app.screen.height / 2;\n  app.stage.addChild(goNext);\n\n  goNext.eventMode = 'static';\n  goNext.cursor = 'pointer';\n\n  goNext.on('pointertap', async () => {\n    goNext.destroy();\n    makeGameScreen();\n  });\n}\n\nasync function makeGameScreen() {\n  // Wait here until you get the assets\n  // If the user spends enough time in the load screen by the time they reach the game screen\n  // the assets are completely loaded and the promise resolves instantly!\n  const loadScreenAssets = await Assets.loadBundle('game-screen');\n\n  // Create a new Sprite from the resolved loaded texture\n  const goBack = new Sprite(loadScreenAssets.eggHead);\n\n  goBack.anchor.set(0.5);\n  goBack.x = app.screen.width / 2;\n  goBack.y = app.screen.height / 2;\n  app.stage.addChild(goBack);\n\n  goBack.eventMode = 'static';\n  goBack.cursor = 'pointer';\n\n  goBack.on('pointertap', async () => {\n    goBack.destroy();\n    // The user can go back and the files are already downloaded\n    makeLoadScreen();\n  });\n}\n\ninit();\n"}})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);