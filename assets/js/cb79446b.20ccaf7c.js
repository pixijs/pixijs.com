"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["5021"],{12868:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>h,default:()=>j,toc:()=>g,metadata:()=>i,assets:()=>x,contentTitle:()=>p});var i=JSON.parse('{"id":"guides/components/assets/svg","title":"SVG\'s","description":"Learn how to render SVGs in PixiJS, including using them as textures or graphics, and understand their advantages and limitations.","source":"@site/docs/guides/components/assets/svg.mdx","sourceDirName":"guides/components/assets","slug":"/guides/components/assets/svg","permalink":"/8.x/guides/components/assets/svg","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/assets/svg.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Learn how to render SVGs in PixiJS, including using them as textures or graphics, and understand their advantages and limitations."},"sidebar":"guidesSidebar","previous":{"title":"Compressed Textures","permalink":"/8.x/guides/components/assets/compressed-textures"},"next":{"title":"Application","permalink":"/8.x/guides/components/application/"}}'),t=n(85893),r=n(50065),a=n(52753),d=n(9e3),l=n(24201),c=n(52946),o=n(90817);let h={sidebar_position:4,description:"Learn how to render SVGs in PixiJS, including using them as textures or graphics, and understand their advantages and limitations."},p="SVG's",x={},g=[{value:"Overview",id:"overview",level:3},{value:"Why Use SVGs?",id:"why-use-svgs",level:3},{value:"Ways to Render SVGs in PixiJS",id:"ways-to-render-svgs-in-pixijs",level:3},{value:"1. Rendering SVGs as Textures",id:"1-rendering-svgs-as-textures",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Example",id:"example",level:3},{value:"Scaling Textures",id:"scaling-textures",level:3},{value:"Pros &amp; Cons",id:"pros--cons",level:3},{value:"Best Use Cases",id:"best-use-cases",level:3},{value:"2. Rendering SVGs as Graphics",id:"2-rendering-svgs-as-graphics",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Example",id:"example-1",level:3},{value:"Loading SVGs as Graphics",id:"loading-svgs-as-graphics",level:3},{value:"Pros &amp; Cons",id:"pros--cons-1",level:3},{value:"Best Use Cases",id:"best-use-cases-1",level:3},{value:"SVG Rendering Considerations",id:"svg-rendering-considerations",level:2},{value:"Supported Features",id:"supported-features",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Best Practices &amp; Gotchas",id:"best-practices--gotchas",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Gotchas",id:"gotchas",level:3}];function u(e){let s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"svgs",children:"SVG's"})}),"\n",(0,t.jsx)(s.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"PixiJS provides powerful support for rendering SVGs, allowing developers to integrate scalable vector graphics seamlessly into their projects. This guide explores different ways to use SVGs in PixiJS, covering real-time rendering, performance optimizations, and potential pitfalls."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"why-use-svgs",children:"Why Use SVGs?"}),"\n",(0,t.jsx)(s.p,{children:"SVGs have several advantages over raster images like PNGs:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Smaller File Sizes"})," \u2013 SVGs can be significantly smaller than PNGs, especially for large but simple shapes. A high-resolution PNG may be several megabytes, while an equivalent SVG could be just a few kilobytes."]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Scalability"})," \u2013 SVGs scale without losing quality, making them perfect for responsive applications and UI elements."]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Editable After Rendering"})," \u2013 Unlike textures, SVGs rendered via Graphics can be modified dynamically (e.g., changing stroke colors, modifying shapes)."]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Efficient for Simple Graphics"})," \u2013 If the graphic consists of basic shapes and paths, SVGs can be rendered efficiently as vector graphics."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"However, SVGs can also be computationally expensive to parse, particularly for intricate illustrations with many paths or effects."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"ways-to-render-svgs-in-pixijs",children:"Ways to Render SVGs in PixiJS"}),"\n",(0,t.jsx)(s.p,{children:"PixiJS offers two primary ways to render SVGs:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"As a Texture"})," \u2013 Converts the SVG into a texture for rendering as a sprite."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"As a Graphics Object"})," \u2013 Parses the SVG and renders it as vector geometry."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Each method has its advantages and use cases, which we will explore below."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"1-rendering-svgs-as-textures",children:"1. Rendering SVGs as Textures"}),"\n",(0,t.jsx)(s.h3,{id:"overview-1",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"SVGs can be loaded as textures and used within Sprites. This method is efficient but does not retain the scalability of vector graphics."}),"\n",(0,t.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const svgTexture = await Assets.load('tiger.svg');\nconst mySprite = new Sprite(svgTexture);\n"})}),"\n","\n","\n","\n","\n",(0,t.jsx)(a.k,{files:{"index.js":c.Z},dependencies:{"pixi.js":"latest"}}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(s.h3,{id:"scaling-textures",children:"Scaling Textures"}),"\n",(0,t.jsx)(s.p,{children:"You can specify a resolution when loading an SVG as a texture to control its size:\nThis does increase memory usage, but it be of a higher fidelity."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const svgTexture = await Assets.load('path/to.svg', {\n  resolution: 4, // will be 4 times as big!\n});\nconst mySprite = new Sprite(svgTexture);\n"})}),"\n",(0,t.jsx)(a.k,{files:{"index.js":o.Z},dependencies:{"pixi.js":"latest"}}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(s.p,{children:"This ensures the texture appears at the correct size and resolution."}),"\n",(0,t.jsx)(s.h3,{id:"pros--cons",children:"Pros & Cons"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Fast to render"})," (rendered as a quad, not geometry)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Good for static images"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Supports resolution scaling for precise sizing"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Ideal for complex SVGs that do not need crisp vector scaling"})," (e.g., UI components with fixed dimensions)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u274C ",(0,t.jsx)(s.strong,{children:"Does not scale cleanly"})," (scaling may result in pixelation)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u274C ",(0,t.jsx)(s.strong,{children:"Less flexibility"})," (cannot modify the shape dynamically)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u274C ",(0,t.jsx)(s.strong,{children:"Texture Size Limit"})," A texture can only be up to 4096x4096 pixels, so if you need to render a larger SVG, you will need to use the Graphics method."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"best-use-cases",children:"Best Use Cases"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Background images"}),"\n",(0,t.jsx)(s.li,{children:"Decorative elements"}),"\n",(0,t.jsx)(s.li,{children:"Performance-critical applications where scaling isn\u2019t needed"}),"\n",(0,t.jsx)(s.li,{children:"Complex SVGs that do not require crisp vector scaling (e.g., fixed-size UI components)"}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"2-rendering-svgs-as-graphics",children:"2. Rendering SVGs as Graphics"}),"\n",(0,t.jsx)(s.h3,{id:"overview-2",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:["PixiJS can render SVGs as real scalable vector graphics using the ",(0,t.jsx)(s.code,{children:"Graphics"})," class."]}),"\n",(0,t.jsx)(s.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const graphics = new Graphics().svg(\'<svg width="100" height="100"><rect width="100" height="100" fill="red"/></svg>\');\n'})}),"\n",(0,t.jsx)(a.k,{files:{"index.js":d.Z},dependencies:{"pixi.js":"latest"}}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(s.p,{children:["If you want to use the same SVG multiple times, you can use ",(0,t.jsx)(s.code,{children:"GraphicsContext"})," to share the parsed SVG data across multiple graphics objects, improving performance by parsing it once and reusing it."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'const context = new GraphicsContext().svg(\n  \'<svg width="100" height="100"><rect width="100" height="100" fill="red"/></svg>\',\n);\n\nconst graphics1 = new Graphics(context);\nconst graphics2 = new Graphics(context);\n'})}),"\n",(0,t.jsx)(s.h3,{id:"loading-svgs-as-graphics",children:"Loading SVGs as Graphics"}),"\n",(0,t.jsxs)(s.p,{children:["Instead of passing an SVG string directly, you can load an SVG file using PixiJS\u2019s ",(0,t.jsx)(s.code,{children:"Assets.load"})," method. This will return a ",(0,t.jsx)(s.code,{children:"GraphicsContext"})," object, which can be used to create multiple ",(0,t.jsx)(s.code,{children:"Graphics"})," objects efficiently."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"const svgContext = await Assets.load('path/to.svg', {\n  parseAsGraphicsContext: true, // If false, it returns a texture instead.\n});\nconst myGraphics = new Graphics(svgContext);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Since it's loaded via ",(0,t.jsx)(s.code,{children:"Assets.load"}),", it will be cached and reused, much like a texture."]}),"\n",(0,t.jsx)(a.k,{files:{"index.js":l.Z},dependencies:{"pixi.js":"latest"}}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(s.h3,{id:"pros--cons-1",children:"Pros & Cons"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Retains vector scalability"})," (no pixelation when zooming)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Modifiable after rendering"})," (change colors, strokes, etc.)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Efficient for simple graphics"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"fast rendering if SVG structure does not change"})," (no need to reparse)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u274C ",(0,t.jsx)(s.strong,{children:"More expensive to parse"})," (complex SVGs can be slow to render)"]}),"\n",(0,t.jsxs)(s.li,{children:["\u274C ",(0,t.jsx)(s.strong,{children:"Not ideal for static images"})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"best-use-cases-1",children:"Best Use Cases"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Icons and UI elements that need resizing"}),"\n",(0,t.jsx)(s.li,{children:"A game world that needs to remain crisp as a player zooms in"}),"\n",(0,t.jsx)(s.li,{children:"Interactive graphics where modifying the SVG dynamically is necessary"}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"svg-rendering-considerations",children:"SVG Rendering Considerations"}),"\n",(0,t.jsx)(s.h3,{id:"supported-features",children:"Supported Features"}),"\n",(0,t.jsx)(s.p,{children:"PixiJS supports most SVG features that can be rendered in a Canvas 2D context. Below is a list of common SVG features and their compatibility:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Feature"}),(0,t.jsx)(s.th,{children:"Supported"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Basic Shapes (rect, circle, path, etc.)"}),(0,t.jsx)(s.td,{children:"\u2705"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Gradients"}),(0,t.jsx)(s.td,{children:"\u2705"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Stroke & Fill Styles"}),(0,t.jsx)(s.td,{children:"\u2705"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Text Elements"}),(0,t.jsx)(s.td,{children:"\u274C"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Filters (Blur, Drop Shadow, etc.)"}),(0,t.jsx)(s.td,{children:"\u274C"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Clipping Paths"}),(0,t.jsx)(s.td,{children:"\u2705"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Patterns"}),(0,t.jsx)(s.td,{children:"\u274C"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Complex Paths & Curves"}),(0,t.jsx)(s.td,{children:"\u2705"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Complex SVGs:"})," Large or intricate SVGs can slow down rendering start up due to high parsing costs. Use ",(0,t.jsx)(s.code,{children:"GraphicsContext"})," to cache and reuse parsed data."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Vector vs. Texture:"})," If performance is a concern, consider using SVGs as textures instead of rendering them as geometry. However, keep in mind that textures take up more memory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Real-Time Rendering:"})," Avoid rendering complex SVGs dynamically. Preload and reuse them wherever possible."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"best-practices--gotchas",children:"Best Practices & Gotchas"}),"\n",(0,t.jsx)(s.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Use Graphics for scalable and dynamic SVGs"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsx)(s.strong,{children:"Use Textures for performance-sensitive applications"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsxs)(s.strong,{children:["Use ",(0,t.jsx)(s.code,{children:"GraphicsContext"})," to avoid redundant parsing"]})]}),"\n",(0,t.jsxs)(s.li,{children:["\u2705 ",(0,t.jsxs)(s.strong,{children:["Consider ",(0,t.jsx)(s.code,{children:"resolution"})," when using textures to balance quality and memory"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"gotchas",children:"Gotchas"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\u26A0 ",(0,t.jsx)(s.strong,{children:"Large SVGs can be slow to parse"})," \u2013 Optimize SVGs before using them in PixiJS."]}),"\n",(0,t.jsxs)(s.li,{children:["\u26A0 ",(0,t.jsx)(s.strong,{children:"Texture-based SVGs do not scale cleanly"})," \u2013 Use higher resolution if necessary."]}),"\n",(0,t.jsxs)(s.li,{children:["\u26A0 ",(0,t.jsx)(s.strong,{children:"Not all SVG features are supported"})," \u2013 Complex filters and text elements may not work as expected."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.p,{children:["By understanding how PixiJS processes SVGs, developers can make informed decisions on when to use ",(0,t.jsx)(s.code,{children:"Graphics.svg()"}),", ",(0,t.jsx)(s.code,{children:"GraphicsContext"}),", or SVG textures, balancing quality and performance for their specific use case."]})]})}function j(e={}){let{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},52753:function(e,s,n){n.d(s,{k:()=>r});var i=n(958),t=n(85893);function r(e){return(0,t.jsx)(i.M,{height:400,width:700,viewType:"preview",...e})}},24201:function(e,s,n){n.d(s,{Z:()=>i});let i="import { Application, Assets, Graphics } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const tigerSvg = await Assets.load({\n    src: 'https://pixijs.com/assets/tiger.svg',\n    data: {\n      parseAsGraphicsContext: true,\n    },\n  });\n\n  const graphics = new Graphics(tigerSvg);\n\n  // line it up as this svg is not centered\n  const bounds = graphics.getLocalBounds();\n\n  graphics.pivot.set((bounds.x + bounds.width) / 2, (bounds.y + bounds.height) / 2);\n\n  graphics.position.set(app.screen.width / 2, app.screen.height / 2);\n\n  app.stage.addChild(graphics);\n\n  app.ticker.add(() => {\n    graphics.rotation += 0.01;\n    graphics.scale.set(2 + Math.sin(graphics.rotation));\n  });\n})();\n"},90817:function(e,s,n){n.d(s,{Z:()=>i});let i="import { Application, Assets, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const tigerTexture = await Assets.load({\n    src: 'https://pixijs.com/assets/tiger.svg',\n    data: {\n      resolution: 4,\n    },\n  });\n\n  const sprite = new Sprite(tigerTexture);\n\n  // line it up as this svg is not centered\n  const bounds = sprite.getLocalBounds();\n\n  sprite.pivot.set((bounds.x + bounds.width) / 2, (bounds.y + bounds.height) / 2);\n\n  sprite.position.set(app.screen.width / 2, app.screen.height / 2);\n\n  app.stage.addChild(sprite);\n\n  app.ticker.add(() => {\n    sprite.rotation += 0.01;\n    sprite.scale.set(2 + Math.sin(sprite.rotation));\n  });\n})();\n"},52946:function(e,s,n){n.d(s,{Z:()=>i});let i="import { Application, Assets, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const tigerTexture = await Assets.load({\n    src: 'https://pixijs.com/assets/tiger.svg',\n  });\n\n  const sprite = new Sprite(tigerTexture);\n\n  // line it up as this svg is not centered\n  const bounds = sprite.getLocalBounds();\n\n  sprite.pivot.set((bounds.x + bounds.width) / 2, (bounds.y + bounds.height) / 2);\n\n  sprite.position.set(app.screen.width / 2, app.screen.height / 2);\n\n  app.stage.addChild(sprite);\n\n  app.ticker.add(() => {\n    sprite.rotation += 0.01;\n    sprite.scale.set(2 + Math.sin(sprite.rotation));\n  });\n})();\n"},9e3:function(e,s,n){n.d(s,{Z:()=>i});let i='import { Application, Graphics } from \'pixi.js\';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({\n    antialias: true,\n    backgroundColor: \'white\',\n    resizeTo: window,\n  });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const graphics = new Graphics().svg(`\n            <svg height="400" width="450" xmlns="http://www.w3.org/2000/svg">\n                \x3c!-- Draw the paths --\x3e\n                <path id="lineAB" d="M 100 350 l 150 -300" stroke="red" stroke-width="4"/>\n                <path id="lineBC" d="M 250 50 l 150 300" stroke="red" stroke-width="4"/>\n                <path id="lineMID" d="M 175 200 l 150 0" stroke="green" stroke-width="4"/>\n                <path id="lineAC" d="M 100 350 q 150 -300 300 0" stroke="blue" fill="none" stroke-width="4"/>\n\n                \x3c!-- Mark relevant points --\x3e\n                <g stroke="black" stroke-width="3" fill="black">\n                    <circle id="pointA" cx="100" cy="350" r="4" />\n                    <circle id="pointB" cx="250" cy="50" r="4" />\n                    <circle id="pointC" cx="400" cy="350" r="4" />\n                </g>\n            </svg>\n        `);\n\n  app.stage.addChild(graphics);\n})();\n'}}]);