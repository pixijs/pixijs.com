"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["4044"],{73808:function(e,n,t){t.d(n,{A1:()=>i});var i={colors:{surface1:"#ffffff",surface2:"#F3F3F3",surface3:"#f5f5f5",clickable:"#959da5",base:"#24292e",disabled:"#d1d4d8",hover:"#24292e",accent:"#24292e"},syntax:{keyword:"#d73a49",property:"#005cc5",plain:"#24292e",static:"#032f62",string:"#032f62",definition:"#6f42c1",punctuation:"#24292e",tag:"#22863a",comment:{color:"#6a737d",fontStyle:"normal"}},font:{body:'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',mono:'"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',size:"13px",lineHeight:"20px"}}},62381:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>h,toc:()=>c,metadata:()=>i,assets:()=>d,contentTitle:()=>l});var i=t(56551),a=t(85893),r=t(50065),s=t(52753);let o={title:"PixiJS Update - Survey & v8.6.0",description:"A look at the recent updates and improvements in PixiJS.",slug:"better-docs-v8",authors:"zyie",tags:["PixiJS","Updates","Improvements"],hide_table_of_contents:!0,keywords:["PixiJS","Updates","Improvements","QoL"]},l=void 0,d={authorsImageUrls:[void 0]},c=[{value:"\uD83D\uDCD6 Improving Documentation",id:"-improving-documentation",level:2},{value:"\u2728 What\u2019s New?",id:"-whats-new",level:2},{value:"v8.6.0",id:"v860",level:3},{value:"v8.5.0",id:"v850",level:3},{value:"v8.4.0",id:"v840",level:3},{value:"v8.3.0",id:"v830",level:3},{value:"v8.2.0",id:"v820",level:3}];function p(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Thank you to everyone who participated in our survey! One thing came through loud and clear: ",(0,a.jsx)(n.strong,{children:"better documentation is a top priority for the PixiJS community"}),". We\u2019ve taken your feedback to heart, and work is already underway to make significant improvements."]}),"\n",(0,a.jsx)(n.p,{children:"This post is part of our commitment to better communication. We\u2019ll share how we\u2019re tackling documentation updates and shine a light on some of the great features and improvements we\u2019ve introduced since PixiJS v8 that might have flown under the radar!"}),"\n",(0,a.jsx)(n.h2,{id:"-improving-documentation",children:"\uD83D\uDCD6 Improving Documentation"}),"\n",(0,a.jsx)(n.p,{children:"Documentation is critical for a library like PixiJS, and we recognize there\u2019s room for growth. Below is a list of the changes we\u2019re making to improve the documentation:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"More Examples"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adding more examples for both beginners and experienced developers to learn from to the website."}),"\n",(0,a.jsx)(n.li,{children:"Add example/guide for each feature we introduce on release, to help you understand how to use it right away."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Updated Guides"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Overhaul our current set of guides to better reflect the current state of PixiJS."}),"\n",(0,a.jsx)(n.li,{children:"Add more guides to cover the basics of PixiJS"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Starter Templates"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a set of starter templates to help you get up and running quickly. These templates will be available through an ",(0,a.jsx)(n.code,{children:"npm create"})," command."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API Doc Improvements"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Improve documentation of types."}),"\n",(0,a.jsx)(n.li,{children:"Include inline examples and explanations."}),"\n",(0,a.jsx)(n.li,{children:"Ensure all public API's are written from the perspective of the user, not the developer."}),"\n",(0,a.jsx)(n.li,{children:"Look into providing a toggle for exposing internal API's, with the default being to hide them. This will help reduce the noise in the API docs for most users while stil giving plugin developers access to the internals."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Migration Guide"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Improving the migration guide to help you upgrade your codebase to the latest version of PixiJS."}),"\n",(0,a.jsx)(n.li,{children:"Explore backporting more deprecations where possible to help you upgrade your codebase more easily."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["These changes will take time, but they are high on our priority list. If you have any suggestions or feedback, please let us know on ",(0,a.jsx)(n.a,{href:"https://bsky.app/profile/pixijs.com",children:"Bluesky"})," or ",(0,a.jsx)(n.a,{href:"https://discord.gg/nrnDP9wtyX",children:"Discord"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"-whats-new",children:"\u2728 What\u2019s New?"}),"\n",(0,a.jsx)(n.p,{children:"We\u2019ve been hard at work delivering new features and improvements, but let\u2019s be honest\u2014we haven\u2019t done the best job announcing them. Here\u2019s a quick rundown of the highlights from our recent releases."}),"\n",(0,a.jsx)(n.admonition,{title:"NOTE",type:"info",children:(0,a.jsx)(n.p,{children:"We will be bringing out more detailed guides/examples on all of these features as well, this is just the start!"})}),"\n",(0,a.jsx)(n.h3,{id:"v860",children:"v8.6.0"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"cacheAsTexture"}),": Containers now have a ",(0,a.jsx)(n.code,{children:"cacheAsTexture()"})," function. It behaves similarly to ",(0,a.jsx)(n.code,{children:"cacheAsBitmap"})," from v7 and will render the container to a texture instead of rendering the container itself."]}),"\n",(0,a.jsx)(n.p,{children:"This can be great for performance if the container is static, as instead of rendering all the children etc., it will just render a single texture.\nAs well as this the process of caching is also relatively low cost, with the trade-off being memory usage as the use of a texture does increase memory (for the texture itself)."}),"\n",(0,a.jsx)(n.admonition,{title:"Guide",type:"info",children:(0,a.jsxs)(n.p,{children:["We have a full guide on this feature ",(0,a.jsx)(n.a,{href:"/8.x/guides/components/scene-objects/container/cache-as-texture",children:"here"}),"."]})}),"\n",(0,a.jsx)(s.k,{files:{"index.js":"// description: This example demonstrates how to use cacheAsTexture to optimize rendering performance\nimport { Application, Assets, Container, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // load resources\n  await Assets.load('https://pixijs.com/assets/spritesheet/monsters.json');\n\n  // holder to store aliens\n  const aliens = [];\n  const alienFrames = ['eggHead.png', 'flowerTop.png', 'helmlok.png', 'skully.png'];\n\n  let count = 0;\n\n  // create an empty container\n  const alienContainer = new Container();\n\n  alienContainer.x = app.screen.width / 2;\n  alienContainer.y = app.screen.height / 2;\n\n  // make the stage interactive\n  app.stage.eventMode = 'static';\n  app.stage.addChild(alienContainer);\n\n  // add a bunch of aliens with textures from image paths\n  for (let i = 0; i < 100; i++) {\n    const frameName = alienFrames[i % 4];\n\n    // create an alien using the frame name..\n    const alien = Sprite.from(frameName);\n\n    alien.tint = Math.random() * 0xffffff;\n\n    alien.x = Math.random() * app.screen.width - app.screen.width / 2;\n    alien.y = Math.random() * app.screen.height - app.screen.height / 2;\n    alien.anchor.x = 0.5;\n    alien.anchor.y = 0.5;\n    aliens.push(alien);\n    alienContainer.addChild(alien);\n  }\n\n  // Combines both mouse click + touch tap\n  app.stage.on('pointertap', onClick);\n\n  function onClick() {\n    alienContainer.cacheAsTexture(!alienContainer.isCachedAsTexture);\n  }\n\n  app.ticker.add(() => {\n    // let's rotate the aliens a little bit\n    for (let i = 0; i < 100; i++) {\n      const alien = aliens[i];\n\n      alien.rotation += 0.1;\n    }\n\n    count += 0.01;\n\n    alienContainer.scale.x = Math.sin(count);\n    alienContainer.scale.y = Math.sin(count);\n    alienContainer.rotation += 0.01;\n  });\n})();\n"}}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"pixelLine"}),": The ",(0,a.jsx)(n.code,{children:"pixelLine"})," property is a neat feature of the PixiJS Graphics API that allows you to create lines that remain 1 pixel thick, regardless of scaling or zoom level. This feature is especially useful for achieving crisp, pixel-perfect visuals, particularly in retro-style or grid-based games, technical drawing, or UI rendering."]}),"\n",(0,a.jsx)(n.admonition,{title:"Guide",type:"info",children:(0,a.jsxs)(n.p,{children:["We have a full guide on this feature ",(0,a.jsx)(n.a,{href:"/8.x/guides/components/scene-objects/graphics/graphics-pixel-line",children:"here"}),"."]})}),"\n",(0,a.jsx)(s.k,{files:{"index.js":"// description: This example compares standard lines vs pixel-perfect lines using the Graphics class\nimport { Application, Container, Graphics, Text } from 'pixi.js';\n\n/**\n * Creates a grid pattern using Graphics lines\n * @param graphics - The Graphics object to draw on\n * @returns The Graphics object with the grid drawn\n */\nfunction buildGrid(graphics) {\n  // Draw 10 vertical lines spaced 10 pixels apart\n  for (let i = 0; i < 11; i++) {\n    // Move to top of each line (x = i*10, y = 0)\n    graphics\n      .moveTo(i * 10, 0)\n      // Draw down to bottom (x = i*10, y = 100)\n      .lineTo(i * 10, 100);\n  }\n\n  // Draw 10 horizontal lines spaced 10 pixels apart\n  for (let i = 0; i < 11; i++) {\n    // Move to start of each line (x = 0, y = i*10)\n    graphics\n      .moveTo(0, i * 10)\n      // Draw across to end (x = 100, y = i*10)\n      .lineTo(100, i * 10);\n  }\n\n  return graphics;\n}\n\n(async () => {\n  // Create and initialize a new PixiJS application\n  const app = new Application();\n\n  await app.init({ antialias: true, resizeTo: window });\n  document.body.appendChild(app.canvas);\n\n  // Create two grids - one with pixel-perfect lines and one without\n  const gridPixel = buildGrid(new Graphics()).stroke({ color: 0xffffff, pixelLine: true, width: 1 });\n\n  const grid = buildGrid(new Graphics()).stroke({ color: 0xffffff, pixelLine: false });\n\n  // Position the grids side by side\n  grid.x = -100;\n  grid.y = -50;\n  gridPixel.y = -50;\n\n  // Create a container to hold both grids\n  const container = new Container();\n\n  container.addChild(grid, gridPixel);\n\n  // Center the container on screen\n  container.x = app.screen.width / 2;\n  container.y = app.screen.height / 2;\n  app.stage.addChild(container);\n\n  // Animation variables\n  let count = 0;\n\n  // Add animation to scale the grids over time\n  app.ticker.add(() => {\n    count += 0.01;\n    container.scale = 1 + (Math.sin(count) + 1) * 2;\n  });\n\n  // Add descriptive label\n  const label = new Text({\n    text: 'Grid Comparison: Standard Lines (Left) vs Pixel-Perfect Lines (Right)',\n    style: { fill: 0xffffff },\n  });\n\n  // Position label in top-left corner\n  label.position.set(20, 20);\n  label.width = app.screen.width - 40;\n  label.scale.y = label.scale.x;\n  app.stage.addChild(label);\n})();\n"}}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"New Global Methods"}),": We have added three new functions to Container to make it easier to work with global transforms / tints / alphas."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"getGlobalTransform"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const skipUpdate = false;\nconst outMatrix = new Matrix();\n\n// writes and returns outMatrix;\nconst globalTransform = container.getGlobalTransform(outMatrix, skipUpdate);\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"getGlobalTint"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const skipUpdate = false;\n// returns rgb color\nconst globalTint = container.getGlobalTint(skipUpdate);\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"getGlobalAlpha"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const skipUpdate = false;\n// returns alpha as number;\nconst globalAlpha = container.getGlobalAlpha(skipUpdate);\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{title:"INFO",type:"info",children:[(0,a.jsxs)(n.p,{children:["if ",(0,a.jsx)(n.code,{children:"skipUpdate"})," is true - it will be faster but may be outdated - uses the last rendered data"]}),(0,a.jsxs)(n.p,{children:["if ",(0,a.jsx)(n.code,{children:"skipUpdate"})," is false - it will be 100% accurate but slower - recalculates transform chain"]})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"v850",children:"v8.5.0"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ParticleContainer"}),": Faster than ever, optimized for rendering a million particles effortlessly."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ParticleContainer"})," shines when you need insane numbers of visual elements on-screen, especially when you want them moving and interacting in real time. Whether you're building particle effects, swarms of characters, or abstract art installations, PixiJS v8 has you covered. The static vs. dynamic property system gives you granular control over performance, allowing you to fine-tune the balance between flexibility and speed."]}),"\n",(0,a.jsx)(n.admonition,{title:"Blog",type:"info",children:(0,a.jsxs)(n.p,{children:["We have a blog post on this feature ",(0,a.jsx)(n.a,{href:"/blog/particlecontainer-v8",children:"here"}),"."]})}),"\n",(0,a.jsx)(s.k,{files:{"index.js":"// description: This example demonstrates how to create a particle system using a Container to manage multiple sprites\nimport { Application, Assets, Container, Rectangle, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // Load the maggot texture\n  const texture = await Assets.load('https://pixijs.com/assets/maggot_tiny.png');\n\n  // Create a container for all the maggots particles and add it to the stage\n  const sprites = new Container();\n\n  app.stage.addChild(sprites);\n\n  // Create an array to store all the sprites\n  const maggots = [];\n\n  const totalSprites = 10000;\n\n  for (let i = 0; i < totalSprites; i++) {\n    // Create a new maggot Sprite\n    const dude = new Sprite(texture);\n\n    // Set the anchor point so the texture is centerd on the sprite\n    dude.anchor.set(0.5);\n\n    // Different maggots, different sizes\n    dude.scale.set(0.8 + Math.random() * 0.3);\n\n    // Scatter them all\n    dude.x = Math.random() * app.screen.width;\n    dude.y = Math.random() * app.screen.height;\n\n    dude.tint = Math.random() * 0x808080;\n\n    // Create a random direction in radians\n    dude.direction = Math.random() * Math.PI * 2;\n\n    // This number will be used to modify the direction of the sprite over time\n    dude.turningSpeed = Math.random() - 0.8;\n\n    // Create a random speed between 0 - 2, and these maggots are slooww\n    dude.speed = (2 + Math.random() * 2) * 0.2;\n\n    dude.offset = Math.random() * 100;\n\n    // Finally we push the dude into the maggots array so it it can be easily accessed later\n    maggots.push(dude);\n\n    sprites.addChild(dude);\n  }\n\n  // Create a bounding box box for the little maggots\n  const dudeBoundsPadding = 100;\n  const dudeBounds = new Rectangle(\n    -dudeBoundsPadding,\n    -dudeBoundsPadding,\n    app.screen.width + dudeBoundsPadding * 2,\n    app.screen.height + dudeBoundsPadding * 2,\n  );\n\n  let tick = 0;\n\n  app.ticker.add(() => {\n    // Iterate through the sprites and update their position\n    for (let i = 0; i < maggots.length; i++) {\n      const dude = maggots[i];\n\n      dude.scale.y = 0.95 + Math.sin(tick + dude.offset) * 0.05;\n      dude.direction += dude.turningSpeed * 0.01;\n      dude.x += Math.sin(dude.direction) * (dude.speed * dude.scale.y);\n      dude.y += Math.cos(dude.direction) * (dude.speed * dude.scale.y);\n      dude.rotation = -dude.direction + Math.PI;\n\n      // Wrap the maggots\n      if (dude.x < dudeBounds.x) {\n        dude.x += dudeBounds.width;\n      } else if (dude.x > dudeBounds.x + dudeBounds.width) {\n        dude.x -= dudeBounds.width;\n      }\n\n      if (dude.y < dudeBounds.y) {\n        dude.y += dudeBounds.height;\n      } else if (dude.y > dudeBounds.y + dudeBounds.height) {\n        dude.y -= dudeBounds.height;\n      }\n    }\n\n    // Increment the ticker\n    tick += 0.1;\n  });\n})();\n"}}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Inverse Masking"}),":\nYou can now use ",(0,a.jsx)(n.code,{children:"element.setMask({ mask, inverse: true })"})," to create an inverse mask effect. This is great for creating cut-out effects or other creative visuals."]}),"\n",(0,a.jsx)(s.k,{files:{"index.js":"// description: This example demonstrates how to create an inverse mask using the Graphics class\nimport { Application, Graphics } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const rect = new Graphics().rect(0, 0, 400, 400).fill('red');\n  const masky = new Graphics().star(160, 160, 5, 100).fill('yellow');\n\n  masky.width = 240;\n  masky.height = 240;\n\n  rect.setMask({\n    mask: masky,\n    inverse: true,\n  });\n\n  app.stage.addChild(rect, masky);\n  app.stage.position.set(window.innerWidth / 2 - 200, window.innerHeight / 2 - 200);\n})();\n"}}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"v840",children:"v8.4.0"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multiview"}),": Support for renderering the same context to multiple canvases. Eliminating the need for multiple PixiJS instances and duplicating resources.\nSimply add ",(0,a.jsx)(n.code,{children:"await app.init({ multiView: true})"})," and when rendering, pass in the target canvas to render to. ",(0,a.jsx)(n.code,{children:"renderer.render({ container, target: canvasOnDom1 })"})]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"EXPERIMENTAL",type:"tip",children:(0,a.jsx)(n.p,{children:"This feature is still experimental and currently interaction only works on the first canvas."})}),"\n",(0,a.jsx)(n.h3,{id:"v830",children:"v8.3.0"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"PerspectiveMesh"}),": A new mesh type that allows you to create 3D perspective effect","\n",(0,a.jsx)(s.k,{files:{"index.js":"// description: This example demonstrates how to create a perspective mesh that responds to mouse movement, simulating 3D rotation using PixiJS.\nimport { Application, Assets, PerspectiveMesh } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const texture = await Assets.load({\n    src: 'https://pixijs.com/assets/eggHead.png',\n  });\n\n  const points = [\n    { x: 0, y: 0 },\n    { x: texture.width, y: 0 },\n    { x: texture.width, y: texture.height },\n    { x: 0, y: texture.height },\n  ];\n\n  const outPoints = points.map((p) => ({ ...p }));\n\n  const mesh = app.stage.addChild(\n    new PerspectiveMesh({\n      texture,\n      pivot: {\n        x: texture.width / 2,\n        y: texture.height / 2,\n      },\n      x: app.screen.width / 2,\n      y: app.screen.height / 2,\n      width: texture.width,\n      height: texture.height,\n    }),\n  );\n\n  mesh.scale = 2;\n\n  let angleX = 0;\n  let angleY = 0;\n\n  // Function to apply 3D rotation to the points\n  function rotate3D(points, outPoints, angleX, angleY, perspective) {\n    const radX = (angleX * Math.PI) / 180;\n    const radY = (angleY * Math.PI) / 180;\n    const cosX = Math.cos(radX);\n    const sinX = Math.sin(radX);\n    const cosY = Math.cos(radY);\n    const sinY = Math.sin(radY);\n\n    for (let i = 0; i < points.length; i++) {\n      const src = points[i];\n      const out = outPoints[i];\n      const x = src.x - texture.width / 2;\n      const y = src.y - texture.height / 2;\n      let z = 0; // Assume initial z is 0 for this 2D plane\n\n      // Rotate around Y axis\n      const xY = cosY * x - sinY * z;\n\n      z = sinY * x + cosY * z;\n\n      // Rotate around X axis\n      const yX = cosX * y - sinX * z;\n\n      z = sinX * y + cosX * z;\n\n      // Apply perspective projection\n      const scale = perspective / (perspective - z);\n\n      out.x = xY * scale + texture.width / 2;\n      out.y = yX * scale + texture.height / 2;\n    }\n  }\n\n  app.ticker.add(() => {\n    rotate3D(points, outPoints, angleX, angleY, 300);\n    mesh.setCorners(\n      outPoints[0].x,\n      outPoints[0].y,\n      outPoints[1].x,\n      outPoints[1].y,\n      outPoints[2].x,\n      outPoints[2].y,\n      outPoints[3].x,\n      outPoints[3].y,\n    );\n  });\n\n  app.stage.hitArea = app.screen;\n  app.stage.eventMode = 'static';\n  app.stage.on('pointermove', (e) => {\n    const { x, y } = e.global;\n\n    angleY = -(x - mesh.x) / 10;\n    angleX = -(y - mesh.y) / 10;\n  });\n})();\n"}}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"v820",children:"v8.2.0"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Container Reparenting"}),": You can now reparent a container to another container without it looking visually different with two new methods ",(0,a.jsx)(n.code,{children:"reparentChild(child)"})," and ",(0,a.jsx)(n.code,{children:"reparentChildAt(child, 1)"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Usually when you move a child from one container to another, it will visually jump to the new container. This is because the child's transform is relative to the parent container. With these new methods, the child will keep its position and scale relative to the new parent container."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const container1 = new Container();\nconst container2 = new Container();\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"const sprite = new Sprite();\ncontainer1.scale = 5;\ncontainer1.addChild(sprite);"}),"\n",(0,a.jsx)(n.p,{children:"// visually the sprite will remain in the same position and scale\n// despite container1 and container2 having different scales.\ncontainer2.reparentChild(sprite);"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'\n### v8.1.0\n- **Generic Typing for Container**: You can now specify the type of children that a container can have. e.g.\n  ```typescript\n  const container = new Container<Sprite>();\n  container.addChild(new Sprite());\n  container.addChild(new Graphics()); // This will throw a type error\n  ```\n- **DTS Bundles**: We now provide a single TypeScript definition file with all pixi exports under the `PIXI` namespace, similar to the defintion file we generated in v6. This can be useful for users that are using PixiJS in a non-module environment, and need to include the definition file manually.\n\n This file can be found on all of our releases on Github in the "Assets" section, or through `https://pixijs.download/vX.X.X/pixi.d.ts`.\n\n## \uD83D\uDDE3\uFE0F Looking Ahead\nWe\u2019re committed to addressing the feedback you\u2019ve shared and continuing to improve PixiJS. In addition to better documentation, you can expect more regular updates to keep you informed about what\u2019s new.\n\nYour input is vital to PixiJS\u2019s success, and we encourage you to share your thoughts through Bluesky, Github, and the Discord channel. Thanks for your continued support as we work to make PixiJS better for everyone.\n\nThe PixiJS Team\n\n## \uD83C\uDF10 Stay Connected\n\nFollow [Zyie](https://bsky.app/profile/zyie.bsky.social) and [PixiJS](https://bsky.app/profile/pixijs.com) on social media for the latest updates. Join our vibrant community on [Discord](https://discord.gg/nrnDP9wtyX) for real-time discussions and support.\n'})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},18064:function(e,n,t){t.d(n,{M:()=>b});var i=t(67294);let a={colors:{surface1:"#242426",surface2:"#444950",surface3:"#44475a",clickable:"#fff",base:"#f8f8f2",disabled:"#6272a4",hover:"#f8f8f2",accent:"#e91e63",error:"#f8f8f2",errorSurface:"#44475a"},syntax:{plain:"#f8f8f2",comment:{color:"#6272a4",fontStyle:"italic"},keyword:"#ff79c6",tag:"#ff79c6",punctuation:"#ff79c6",definition:"#f8f8f2",property:"#50fa7b",static:"#bd93f9",string:"#f1fa8c"},font:{body:'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',mono:'"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',size:"13px",lineHeight:"20px"}},r=e=>{let n=e.split(".");return n[n.length-1]},s=e=>{let n=r(e);return"js"===n?"javascript":"ts"===n?"typescript":"vert"===n||"frag"===n?"glsl":n},o=e=>(0,i.useMemo)(()=>s(e),[e]),l=async e=>{let n=`pixi-definitions-${e}`,t=JSON.parse(localStorage.getItem(n))||null;if(!t)try{let t=await fetch(`https://cdn.jsdelivr.net/npm/pixi.js@${e}/dist/pixi.js.d.ts`),i=await t.text();if(i.startsWith("// Generated by dts-bundle-generator"))return localStorage.setItem(n,JSON.stringify(i)),i;return null}catch(e){return console.error("Failed to fetch pixi.js types:",e),null}return t},d=(e,n="latest")=>{(0,i.useEffect)(()=>{let t=async e=>{let t=await l(n),i=`declare module 'pixi.js' { ${t} }`,a=`
            declare module '*.wgsl' {
                const shader: 'string';
                export default shader;
            }

            declare module '*.vert' {
                const shader: 'string';
                export default shader;
            }

            declare module '*.frag' {
                const shader: 'string';
                export default shader;
            }`;e.languages.typescript.typescriptDefaults.addExtraLib(i,"file:///node_modules/pixi.js/index.d.ts"),e.languages.typescript.javascriptDefaults.addExtraLib(i,"file:///node_modules/pixi.js/index.d.ts"),e.languages.typescript.typescriptDefaults.addExtraLib(a),e.languages.typescript.javascriptDefaults.addExtraLib(a);let{languages:r}=e,s="glsl";r.register({id:s,extensions:[".frag",".vert"]}),r.setLanguageConfiguration(s,{comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string"]}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]}),r.setMonarchTokensProvider(s,{tokenPostfix:".glsl",defaultToken:"invalid",directives:["#","#define","#undef","#if","#ifdef","#ifndef","#else","#elif","#endif","#error","#pragma","#extension","#version","#line"],macros:["__LINE__","__FILE__","__VERSION__"],storage:["in","out","uniform","layout","attribute","varying","precision","highp","mediump","lowp"],types:["void","bool","int","uint","float","double","vec2","vec3","vec4","ivec2","ivec3","ivec4","bvec2","bvec3","bvec4","uvec2","uvec3","uvec4","dvec2","dvec3","dvec4","mat2","mat3","mat4","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","dmat2","dmat3","dmat4","dmat2x2","dmat2x3","dmat2x4","dmat3x2","dmat3x3","dmat3x4","dmat4x2","dmat4x3","dmat4x4","sampler1D","texture1D","image1D","sampler1DShadow","sampler1DArray","texture1DArray","image1DArray","sampler1DArrayShadow","sampler2D","texture2D","image2D","sampler2DShadow","sampler2DArray","texture2DArray","image2DArray","sampler2DArrayShadow","sampler2DMS","texture2DMS","image2DMS","sampler2DMSArray","texture2DMSArray","image2DMSArray","sampler2DRect","texture2DRect","image2DRect","sampler2DRectShadow","sampler3D","texture3D","image3D","samplerCube","textureCube","imageCube","samplerCubeShadow","samplerCubeArray","textureCubeArray","imageCubeArray","samplerCubeArrayShadow","samplerBuffer","textureBuffer","imageBuffer","subpassInput","subpassInputMS","isampler1D","itexture1D","iimage1D","isampler1DArray","itexture1DArray","iimage1DArray","isampler2D","itexture2D","iimage2D","isampler2DArray","itexture2DArray","iimage2DArray","isampler2DMS","itexture2DMS","iimage2DMS","isampler2DMSArray","itexture2DMSArray","iimage2DMSArray","isampler2DRect","itexture2DRect","iimage2DRect","isampler3D","itexture3D","iimage3D","isamplerCube","itextureCube","iimageCube","isamplerCubeArray","itextureCubeArray","iimageCubeArray","isamplerBuffer","itextureBuffer","iimageBuffer","isubpassInput","isubpassInputMS","usampler1D","utexture1D","uimage1D","usampler1DArray","utexture1DArray","uimage1DArray","usampler2D","utexture2D","uimage2D","usampler2DArray","utexture2DArray","uimage2DArray","usampler2DMS","utexture2DMS","uimage2DMS","usampler2DMSArray","utexture2DMSArray","uimage2DMSArray","usampler2DRect","utexture2DRect","uimage2DRect","usampler3D","utexture3D","uimage3D","usamplerCube","utextureCube","uimageCube","usamplerCubeArray","utextureCubeArray","uimageCubeArray","usamplerBuffer","utextureBuffer","uimageBuffer","atomic_uint","usubpassInput","usubpassInputMS","sampler","samplerShadow"],operators:["*","+","-","/","~","!","%","<<",">>","<",">","<=",">=","==","!=","&","^","|","&&","^^","||","=","+=","-=","*=","/=","%=","<<=",">>=","&=","^=","|="],builtin_vars:["gl_VertexID","gl_InstanceID","gl_VertexIndex","gl_InstanceIndex","gl_DrawID","gl_BaseVertex","gl_BaseInstance","gl_Position","gl_PointSize","gl_ClipDistance","gl_CullDistance","gl_Color","gl_SecondaryColor","gl_Normal","gl_Vertex","gl_MultiTexCoord0","gl_MultiTexCoord1","gl_MultiTexCoord2","gl_MultiTexCoord3","gl_MultiTexCoord4","gl_MultiTexCoord5","gl_MultiTexCoord6","gl_MultiTexCoord7","gl_FogCoord"],constants:["gl_MaxVertexAttribs","gl_MaxVertexUniformVectors","gl_MaxVertexUniformComponents","gl_MaxVertexOutputComponents"],intsuffix:"[uU]?",floatsuffix:"([fF]|(fl|FL))?",tokenizer:{root:[[/\/\/.*$/,"comment.line"],[/\/\*/,"comment.block","@comment"],[/#[a-z]*/,{cases:{"@directives":"keyword.control.preprocessor","@default":"invalid"}}],["GL_ES","meta.preprocessor"],[/__[A-Z_]+__/,{cases:{"@macros":"meta.preprocessor","@default":"invalid"}}],[/[{}()\[\]]/,"@brackets"],[/(true|false)/,"constant"],[/[\=\+\-\*\/\>\<\&\|\%\!\^]+/,{cases:{"@operators":"operator","@default":"invalid"}}],[/[a-zA-Z][a-zA-Z0-9_]*(?=\()/,"entity.name.function"],[/[a-zA-Z][a-zA-Z0-9_]*/,{cases:{"@storage":"storage.type","@types":"entity.name.type","@builtin_vars":"keyword","@default":"variable.name"}}],[/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/,"number.float"],[/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/,"number.float"],[/0[xX][0-9a-fA-F](@intsuffix)/,"number.hex"],[/0[0-7](@intsuffix)/,"number.octal"],[/\d+(@intsuffix)/,"number"],[/[;,.]/,"delimiter"]],comment:[["\\*/","comment.block","@pop"],[".*","comment.block"]]}})};e&&t(e)},[e,n])};var c=t(93862),p=t(35283),h=t(51443),u=t(85893);function m({fontSize:e=12,style:n,pixiVersion:t,handleEditorCodeChanged:a}){let{code:r,updateCode:s}=(0,c.m4)(),{sandpack:l}=(0,c.X3)(),m=function(){let[e,n]=(0,i.useState)(null),t=(0,i.useRef)(!0),a=(0,i.useRef)(null);return(0,i.useEffect)(()=>{let e=h._m.__getMonacoInstance();if(e)return void n(e);if(!a.current){h._m.config({"vs/nls":{availableLanguages:{}}});try{a.current=h._m.init(),a.current.then(e=>{t.current&&n(e)}).catch(e=>{t.current&&"cancelation"!==e.type&&console.error("Monaco initialization error:",e)})}catch(e){console.error("Failed to initialize Monaco:",e)}}return()=>{t.current=!1}},[]),e}(),x=o(l.activeFile),{colorMode:g}=(0,p.I)();return d(m,t),(0,u.jsxs)(c.el,{style:{height:"100%",margin:0,...n},children:[(0,u.jsx)(c.aM,{}),(0,u.jsx)("div",{style:{flex:1,paddingTop:8,background:"dark"===g?"#1e1e1e":"#FFFFFE"},children:(0,u.jsx)(h.ML,{width:"100%",height:"100%",language:x,theme:"dark"===g?"vs-dark":"light",defaultValue:r,onChange:e=>{s(e||""),a?.(e)},options:{minimap:{enabled:!1},scrollBeyondLastLine:!1,wordWrap:"on",automaticLayout:!0,fontSize:e}},l.activeFile)})]})}let x=({onClick:e})=>(0,u.jsx)(c.z,{style:{position:"relative"},onClick:e,children:(0,u.jsx)(c.zD,{})}),g=({onSelectionChange:e,defaultSelection:n="both"})=>{let[t,a]=(0,i.useState)(n),{colorMode:r}=(0,p.I)(),s=n=>{a(n),e(n)},o={height:"100%",width:"max-content",padding:"0 16px",display:"flex",alignItems:"center",justifyContent:"center",cursor:"pointer",color:"dark"===r?"#F6F8FA":"#2E3138",border:"none"},l="dark"===r?"#22232A":"#e2e2e2";return(0,u.jsxs)("div",{style:{height:32,width:"100%",overflow:"hidden",backgroundColor:"dark"===r?"#2E3138":"#F6F8FA",display:"flex",justifyContent:"right",borderBottomLeftRadius:4,borderBottomRightRadius:4},children:[(0,u.jsx)("button",{onClick:()=>s("editor"),style:{backgroundColor:"editor"===t?l:"transparent",...o},children:"Editor"}),(0,u.jsx)("button",{onClick:()=>s("preview"),style:{backgroundColor:"preview"===t?l:"transparent",...o},children:"Preview"}),(0,u.jsx)("button",{onClick:()=>s("both"),style:{backgroundColor:"both"===t?l:"transparent",...o},children:"Both"})]})};function f(e){let{viewType:n,showConsole:t,fontSize:a,pixiVersion:r}=e,[s,o]=(0,i.useState)(t),[l,d]=(0,i.useState)(n),p=(0,u.jsx)(u.Fragment,{children:(0,u.jsx)(x,{onClick:()=>o(e=>!e)})});return(0,u.jsxs)("div",{style:{height:"100%",width:"100%",display:"flex",flexDirection:"column"},children:[(0,u.jsxs)(c.sp,{style:{height:"100%",overflow:"hidden",borderBottomLeftRadius:0,borderBottomRightRadius:0,flexWrap:"nowrap"},children:[(0,u.jsx)(m,{fontSize:a,style:{flexGrow:+("preview"!==l),flexShrink:+("preview"!==l),flexBasis:"editor"===l?"100%":0,width:"100%",overflow:"hidden"},pixiVersion:r,handleEditorCodeChanged:e.handleEditorCodeChanged}),(0,u.jsxs)(c.el,{style:{height:"100%",width:"100%"},children:[(0,u.jsx)(c.Gj,{style:{flexGrow:100*("editor"!==l),flexShrink:100*("editor"!==l),flexBasis:"editor"!==l?"100%":0,overflow:"hidden"},showOpenInCodeSandbox:!1,actionsChildren:p}),s&&(0,u.jsx)("div",{style:{flexGrow:35*!!s,flexShrink:35*!!s,flexBasis:s?"35%":0,width:"100%",overflow:"hidden"},children:(0,u.jsx)(c.Tq,{showHeader:!1})})]})]}),(0,u.jsx)(g,{onSelectionChange:e=>{d(e)},defaultSelection:l})]})}var y=t(73808),v=t(646);function b({viewType:e="both",showConsole:n=!1,width:t="100%",height:r="100%",dependencies:s={"pixi.js":"latest"},files:o={"index.js":"// Your code here"},fontSize:l=12,handleEditorCodeChanged:d}){let{colorMode:h}=(0,p.I)(),m={...o};delete m["index.js"];let[x]=(0,i.useState)({"/index.html":{code:'<!doctype html>\n<html>\n  <head>\n    <title>PixiJS Playground</title>\n    <meta charset="UTF-8" />\n    <link rel="stylesheet" href="./styles.css" />\n  </head>\n  <body>\n    <script src="index.js"><\/script>\n  </body>\n</html>\n',hidden:!0},"/styles.css":{code:"body {\n  margin: 0;\n  overflow: hidden;\n}\n",hidden:!0},"sandbox.config.json":{code:'{"infiniteLoopProtection": false}',hidden:!0},"index.ts":{code:"",hidden:!0,active:!1},"index.js":{code:o["index.js"]??"// Your code here",hidden:!1,active:!0},...m});return(0,u.jsx)(v.Z,{children:()=>(0,u.jsx)(c.oT,{template:"vanilla-ts",theme:"dark"===h?a:y.A1,files:x,customSetup:{dependencies:s,entry:"index.html"},style:{height:r,width:t,margin:"0 auto",maxWidth:"100%"},options:{recompileDelay:500},children:(0,u.jsx)(f,{handleEditorCodeChanged:d,viewType:e,showConsole:n,fontSize:l,pixiVersion:s["pixi.js"]})})})}},52753:function(e,n,t){t.d(n,{k:()=>r});var i=t(18064),a=t(85893);function r(e){return(0,a.jsx)(i.M,{height:400,width:700,viewType:"preview",...e})}},50065:function(e,n,t){t.d(n,{Z:()=>o,a:()=>s});var i=t(67294);let a={},r=i.createContext(a);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},56551:function(e){e.exports=JSON.parse('{"permalink":"/blog/better-docs-v8","source":"@site/blog/2024-11-29-pixi-v8.6.0.md","title":"PixiJS Update - Survey & v8.6.0","description":"A look at the recent updates and improvements in PixiJS.","date":"2024-11-29T00:00:00.000Z","tags":[{"inline":true,"label":"PixiJS","permalink":"/blog/tags/pixi-js"},{"inline":true,"label":"Updates","permalink":"/blog/tags/updates"},{"inline":true,"label":"Improvements","permalink":"/blog/tags/improvements"}],"readingTime":6.35,"hasTruncateMarker":true,"authors":[{"name":"Zyie","title":"PixiJS Admin","url":"https://github.com/zyie","socials":{"github":"https://github.com/zyie","x":"https://x.com/_Zyie_","bluesky":"https://bsky.app/profile/zyie.bsky.social"},"imageURL":"https://github.com/zyie.png","key":"zyie","page":null}],"frontMatter":{"title":"PixiJS Update - Survey & v8.6.0","description":"A look at the recent updates and improvements in PixiJS.","slug":"better-docs-v8","authors":"zyie","tags":["PixiJS","Updates","Improvements"],"hide_table_of_contents":true,"keywords":["PixiJS","Updates","Improvements","QoL"]},"unlisted":false,"prevItem":{"title":"PixiJS Update - Start building with PixiJS in just one command! \uD83D\uDE80","permalink":"/blog/create-cli"},"nextItem":{"title":"ParticleContainer - The New Speed Demon in PixiJS v8","permalink":"/blog/particlecontainer-v8"}}')}}]);