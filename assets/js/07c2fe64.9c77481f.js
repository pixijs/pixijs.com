"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["255"],{84858:function(e,n,i){i.r(n),i.d(n,{default:()=>h,frontMatter:()=>d,metadata:()=>s,assets:()=>o,toc:()=>c,contentTitle:()=>l});var s=JSON.parse('{"id":"guides/components/math","title":"Math","description":"Learn how to use PixiJS math utilities for 2D transformations, geometry, and shape manipulation, including optional advanced methods.","source":"@site/docs/guides/components/math.md","sourceDirName":"guides/components","slug":"/guides/components/math","permalink":"/8.x/guides/components/math","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/math.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"description":"Learn how to use PixiJS math utilities for 2D transformations, geometry, and shape manipulation, including optional advanced methods."},"sidebar":"guidesSidebar","previous":{"title":"Filters / Blend Modes","permalink":"/8.x/guides/components/filters"},"next":{"title":"Accessibility","permalink":"/8.x/guides/components/accessibility"}}'),t=i("85893"),r=i("50065");let d={sidebar_position:8,description:"Learn how to use PixiJS math utilities for 2D transformations, geometry, and shape manipulation, including optional advanced methods."},l="Math",o={},c=[{value:"Matrix",id:"matrix",level:2},{value:"Point and ObservablePoint",id:"point-and-observablepoint",level:2},{value:"<code>Point</code>",id:"point",level:3},{value:"<code>ObservablePoint</code>",id:"observablepoint",level:3},{value:"Shapes",id:"shapes",level:2},{value:"<code>Rectangle</code>",id:"rectangle",level:3},{value:"<code>Circle</code>",id:"circle",level:3},{value:"<code>Ellipse</code>",id:"ellipse",level:3},{value:"<code>Polygon</code>",id:"polygon",level:3},{value:"<code>RoundedRectangle</code>",id:"roundedrectangle",level:3},{value:"<code>Triangle</code>",id:"triangle",level:3},{value:"Optional: <code>math-extras</code>",id:"optional-math-extras",level:2},{value:"To enable:",id:"to-enable",level:3},{value:"Enhanced <code>Point</code> Methods",id:"enhanced-point-methods",level:3},{value:"Enhanced <code>Rectangle</code> Methods",id:"enhanced-rectangle-methods",level:3},{value:"API Reference",id:"api-reference",level:2}];function a(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"math",children:"Math"})}),"\n",(0,t.jsxs)(n.p,{children:["PixiJS includes a several math utilities for 2D transformations, geometry, and shape manipulation. This guide introduces the most important classes and their use cases, including optional advanced methods enabled via ",(0,t.jsx)(n.code,{children:"math-extras"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"matrix",children:"Matrix"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Matrix"})," class represents a 2D affine transformation matrix. It is used extensively for transformations such as scaling, translation, and rotation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Matrix, Point } from 'pixi.js';\n\nconst matrix = new Matrix();\nmatrix.translate(10, 20).scale(2, 2);\n\nconst point = new Point(5, 5);\nconst result = matrix.apply(point); // result is (20, 30)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"point-and-observablepoint",children:"Point and ObservablePoint"}),"\n",(0,t.jsx)(n.h3,{id:"point",children:(0,t.jsx)(n.code,{children:"Point"})}),"\n",(0,t.jsxs)(n.p,{children:["The Point object represents a location in a two-dimensional coordinate system, where ",(0,t.jsx)(n.code,{children:"x"})," represents the position on the horizontal axis and ",(0,t.jsx)(n.code,{children:"y"})," represents the position on the vertical axis. Many Pixi functions accept the ",(0,t.jsx)(n.code,{children:"PointData"})," type as an alternative to ",(0,t.jsx)(n.code,{children:"Point"}),", which only requires ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," properties."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Point } from 'pixi.js';\nconst point = new Point(5, 10);\n\npoint.set(20, 30); // set x and y\n"})}),"\n",(0,t.jsx)(n.h3,{id:"observablepoint",children:(0,t.jsx)(n.code,{children:"ObservablePoint"})}),"\n",(0,t.jsxs)(n.p,{children:["Extends ",(0,t.jsx)(n.code,{children:"Point"})," and triggers a callback when its values change. Used internally for reactive systems like position and scale updates."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Point, ObservablePoint } from 'pixi.js';\n\nconst observer = {\n    _onUpdate: (point) => {\n        console.log(`Point updated to: (${point.x}, ${point.y})`);\n    },\n};\nconst reactive = new ObservablePoint(observer, 1, 2);\nreactive.set(3, 4); // triggers call to _onUpdate\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"shapes",children:"Shapes"}),"\n",(0,t.jsx)(n.p,{children:"PixiJS includes several 2D shapes, used for hit testing, rendering, and geometry computations."}),"\n",(0,t.jsx)(n.h3,{id:"rectangle",children:(0,t.jsx)(n.code,{children:"Rectangle"})}),"\n",(0,t.jsxs)(n.p,{children:["Axis-aligned rectangle defined by ",(0,t.jsx)(n.code,{children:"x"}),", ",(0,t.jsx)(n.code,{children:"y"}),", ",(0,t.jsx)(n.code,{children:"width"}),", and ",(0,t.jsx)(n.code,{children:"height"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Rectangle } from 'pixi.js';\n\nconst rect = new Rectangle(10, 10, 100, 50);\nrect.contains(20, 20); // true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"circle",children:(0,t.jsx)(n.code,{children:"Circle"})}),"\n",(0,t.jsxs)(n.p,{children:["Defined by ",(0,t.jsx)(n.code,{children:"x"}),", ",(0,t.jsx)(n.code,{children:"y"})," (center) and ",(0,t.jsx)(n.code,{children:"radius"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Circle } from 'pixi.js';\n\nconst circle = new Circle(50, 50, 25);\ncircle.contains(50, 75); // true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ellipse",children:(0,t.jsx)(n.code,{children:"Ellipse"})}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.code,{children:"Circle"}),", but supports different width and height (radii)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Ellipse } from 'pixi.js';\n\nconst ellipse = new Ellipse(0, 0, 20, 10);\nellipse.contains(5, 0); // true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"polygon",children:(0,t.jsx)(n.code,{children:"Polygon"})}),"\n",(0,t.jsx)(n.p,{children:"Defined by a list of points. Used for complex shapes and hit testing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Polygon } from 'pixi.js';\n\nconst polygon = new Polygon([0, 0, 100, 0, 100, 100, 0, 100]);\npolygon.contains(50, 50); // true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"roundedrectangle",children:(0,t.jsx)(n.code,{children:"RoundedRectangle"})}),"\n",(0,t.jsx)(n.p,{children:"Rectangle with rounded corners, defined by a radius."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RoundedRectangle } from 'pixi.js';\n\nconst roundRect = new RoundedRectangle(0, 0, 100, 100, 10);\nroundRect.contains(10, 10); // true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"triangle",children:(0,t.jsx)(n.code,{children:"Triangle"})}),"\n",(0,t.jsx)(n.p,{children:"A convenience wrapper for defining triangles with three points."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Triangle } from 'pixi.js';\n\nconst triangle = new Triangle(0, 0, 100, 0, 50, 100);\ntriangle.contains(50, 50); // true\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"optional-math-extras",children:["Optional: ",(0,t.jsx)(n.code,{children:"math-extras"})]}),"\n",(0,t.jsxs)(n.p,{children:["Importing ",(0,t.jsx)(n.code,{children:"pixi.js/math-extras"})," extends ",(0,t.jsx)(n.code,{children:"Point"})," and ",(0,t.jsx)(n.code,{children:"Rectangle"})," with additional vector and geometry utilities."]}),"\n",(0,t.jsx)(n.h3,{id:"to-enable",children:"To enable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import 'pixi.js/math-extras';\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"enhanced-point-methods",children:["Enhanced ",(0,t.jsx)(n.code,{children:"Point"})," Methods"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"add(other[, out])"})}),(0,t.jsx)(n.td,{children:"Adds another point to this one."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"subtract(other[, out])"})}),(0,t.jsx)(n.td,{children:"Subtracts another point from this one."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"multiply(other[, out])"})}),(0,t.jsx)(n.td,{children:"Multiplies this point with another point component-wise."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"multiplyScalar(scalar[, out])"})}),(0,t.jsx)(n.td,{children:"Multiplies the point by a scalar."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dot(other)"})}),(0,t.jsx)(n.td,{children:"Computes the dot product of two vectors."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"cross(other)"})}),(0,t.jsx)(n.td,{children:"Computes the scalar z-component of the 3D cross product."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"normalize([out])"})}),(0,t.jsx)(n.td,{children:"Returns a normalized (unit-length) vector."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"magnitude()"})}),(0,t.jsx)(n.td,{children:"Returns the Euclidean length."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"magnitudeSquared()"})}),(0,t.jsx)(n.td,{children:"Returns the squared length (more efficient for comparisons)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"project(onto[, out])"})}),(0,t.jsx)(n.td,{children:"Projects this point onto another vector."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"reflect(normal[, out])"})}),(0,t.jsx)(n.td,{children:"Reflects the point across a given normal."})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"enhanced-rectangle-methods",children:["Enhanced ",(0,t.jsx)(n.code,{children:"Rectangle"})," Methods"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"containsRect(other)"})}),(0,t.jsx)(n.td,{children:"Returns true if this rectangle contains the other."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"equals(other)"})}),(0,t.jsx)(n.td,{children:"Checks if all properties are equal."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"intersection(other[, out])"})}),(0,t.jsx)(n.td,{children:"Returns a new rectangle representing the overlap."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"union(other[, out])"})}),(0,t.jsx)(n.td,{children:"Returns a rectangle that encompasses both rectangles."})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.html",children:"Overview"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Matrix.html",children:"Matrix"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Point.html",children:"Point"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.ObservablePoint.html",children:"ObservablePoint"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Rectangle.html",children:"Rectangle"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Circle.html",children:"Circle"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Ellipse.html",children:"Ellipse"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Polygon.html",children:"Polygon"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.RoundedRectangle.html",children:"RoundedRectangle"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pixijs.download/release/docs/maths.Triangle.html",children:"Triangle"})}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);