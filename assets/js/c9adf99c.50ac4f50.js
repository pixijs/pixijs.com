"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["9822"],{52986:function(n,t,e){e.r(t),e.d(t,{default:()=>d,frontMatter:()=>p,metadata:()=>a,assets:()=>c,toc:()=>h,contentTitle:()=>r});var a=JSON.parse('{"id":"examples/masks/graphics","title":"Graphics","description":"","source":"@site/docs/examples/masks/graphics.mdx","sourceDirName":"examples/masks","slug":"/examples/masks/graphics","permalink":"/8.x/examples/masks/graphics","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":0,"custom_edit_url":null,"title":"Graphics"},"sidebar":"examplesSidebar","previous":{"title":"Slider","permalink":"/8.x/examples/events/slider"},"next":{"title":"Sprite","permalink":"/8.x/examples/masks/sprite"}}'),s=e("85893"),i=e("50065"),o=e("43076");let p={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:0,custom_edit_url:null,title:"Graphics"},r=void 0,c={},h=[];function l(n){return(0,s.jsx)(o.N,{files:{"index.js":"import { Application, Assets, Container, Graphics, Sprite, Text } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ antialias: true, resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    app.stage.eventMode = 'static';\n\n    // Load textures\n    await Assets.load([\n        'https://pixijs.com/assets/bg_rotate.jpg',\n        'https://pixijs.com/assets/bg_scene_rotate.jpg',\n        'https://pixijs.com/assets/light_rotate_2.png',\n        'https://pixijs.com/assets/light_rotate_1.png',\n        'https://pixijs.com/assets/panda.png',\n    ]);\n\n    const bg = Sprite.from('https://pixijs.com/assets/bg_rotate.jpg');\n\n    bg.anchor.set(0.5);\n\n    bg.x = app.screen.width / 2;\n    bg.y = app.screen.height / 2;\n\n    app.stage.addChild(bg);\n\n    const container = new Container();\n\n    container.x = app.screen.width / 2;\n    container.y = app.screen.height / 2;\n\n    // Add a bunch of sprites\n    const bgFront = Sprite.from('https://pixijs.com/assets/bg_scene_rotate.jpg');\n\n    bgFront.anchor.set(0.5);\n\n    const light2 = Sprite.from('https://pixijs.com/assets/light_rotate_2.png');\n\n    light2.anchor.set(0.5);\n\n    const light1 = Sprite.from('https://pixijs.com/assets/light_rotate_1.png');\n\n    light1.anchor.set(0.5);\n\n    const panda = Sprite.from('https://pixijs.com/assets/panda.png');\n\n    panda.anchor.set(0.5);\n\n    container.addChild(bgFront, light2, light1, panda);\n\n    app.stage.addChild(container);\n\n    // Let's create a moving shape mask\n    const thing = new Graphics();\n\n    app.stage.addChild(thing);\n    thing.x = app.screen.width / 2;\n    thing.y = app.screen.height / 2;\n\n    container.mask = thing;\n\n    let count = 0;\n\n    app.stage.on('pointertap', () =>\n    {\n        if (!container.mask)\n        {\n            container.mask = thing;\n        }\n        else\n        {\n            container.mask = null;\n        }\n    });\n\n    const help = new Text({\n        text: 'Click or tap to turn masking on / off.',\n        style: {\n            fontFamily: 'Arial',\n            fontSize: 12,\n            fontWeight: 'bold',\n            fill: 'white',\n        },\n    });\n\n    help.y = app.screen.height - 26;\n    help.x = 10;\n    app.stage.addChild(help);\n\n    // Animate the mask\n    app.ticker.add(() =>\n    {\n        bg.rotation += 0.01;\n        bgFront.rotation -= 0.01;\n\n        light1.rotation += 0.02;\n        light2.rotation += 0.01;\n\n        panda.scale.x = 1 + Math.sin(count) * 0.04;\n        panda.scale.y = 1 + Math.cos(count) * 0.04;\n\n        count += 0.1;\n\n        thing.clear();\n        thing.moveTo(-120 + Math.sin(count) * 20, -100 + Math.cos(count) * 20);\n        thing.lineTo(120 + Math.cos(count) * 20, -100 + Math.sin(count) * 20);\n        thing.lineTo(120 + Math.sin(count) * 20, 100 + Math.cos(count) * 20);\n        thing.lineTo(-120 + Math.cos(count) * 20, 100 + Math.sin(count) * 20);\n        thing.fill({ color: 0x8bc5ff, alpha: 0.4 });\n        thing.rotation = count * 0.1;\n    });\n})();\n"}})}function d(n={}){let{wrapper:t}={...(0,i.a)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}}}]);