"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["1247"],{55317:function(e,n,r){r.r(n),r.d(n,{default:()=>p,frontMatter:()=>t,metadata:()=>i,assets:()=>a,toc:()=>c,contentTitle:()=>d});var i=JSON.parse('{"id":"guides/concepts/render-loop","title":"Render Loop","description":"At the core of PixiJS lies its render loop, a repeating cycle that updates and redraws your scene every frame. Unlike traditional web development where rendering is event-based (e.g. on user input), PixiJS uses a continuous animation loop that provides full control over real-time rendering.","source":"@site/docs/guides/concepts/render-loop.md","sourceDirName":"guides/concepts","slug":"/guides/concepts/render-loop","permalink":"/8.x/guides/concepts/render-loop","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/concepts/render-loop.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"guidesSidebar","previous":{"title":"Scene Graph","permalink":"/8.x/guides/concepts/scene-graph"},"next":{"title":"Render Groups","permalink":"/8.x/guides/concepts/render-groups"}}'),s=r("85893"),l=r("50065");let t={sidebar_position:2},d="Render Loop",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Step 1: Running Ticker Callbacks",id:"step-1-running-ticker-callbacks",level:2},{value:"Example",id:"example",level:3},{value:"Step 2: Updating the Scene Graph",id:"step-2-updating-the-scene-graph",level:2},{value:"Step 3: Rendering the Scene",id:"step-3-rendering-the-scene",level:2},{value:"Full Frame Lifecycle Diagram",id:"full-frame-lifecycle-diagram",level:2}];function o(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"render-loop",children:"Render Loop"})}),"\n",(0,s.jsxs)(n.p,{children:["At the core of PixiJS lies its ",(0,s.jsx)(n.strong,{children:"render loop"}),", a repeating cycle that updates and redraws your scene every frame. Unlike traditional web development where rendering is event-based (e.g. on user input), PixiJS uses a continuous animation loop that provides full control over real-time rendering."]}),"\n",(0,s.jsx)(n.p,{children:"This guide provides a deep dive into how PixiJS structures this loop internally, from the moment a frame begins to when it is rendered to the screen. Understanding this will help you write more performant, well-structured applications."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Each frame, PixiJS performs the following sequence:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tickers are executed"})," (user logic)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scene graph is updated"})," (transforms and culling)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rendering occurs"})," (GPU draw calls)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This cycle repeats as long as your application is running and its ticker is active."}),"\n",(0,s.jsx)(n.h2,{id:"step-1-running-ticker-callbacks",children:"Step 1: Running Ticker Callbacks"}),"\n",(0,s.jsxs)(n.p,{children:["The render loop is driven by the ",(0,s.jsx)(n.code,{children:"Ticker"})," class, which uses ",(0,s.jsx)(n.code,{children:"requestAnimationFrame"})," to schedule work. Each tick:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Measures elapsed time since the previous frame"}),"\n",(0,s.jsxs)(n.li,{children:["Caps it based on ",(0,s.jsx)(n.code,{children:"minFPS"})," and ",(0,s.jsx)(n.code,{children:"maxFPS"})]}),"\n",(0,s.jsxs)(n.li,{children:["Calls every listener registered with ",(0,s.jsx)(n.code,{children:"ticker.add()"})," or ",(0,s.jsx)(n.code,{children:"app.ticker.add()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"app.ticker.add((ticker) => {\n    bunny.rotation += ticker.deltaTime * 0.1;\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Every callback receives the current ",(0,s.jsx)(n.code,{children:"Ticker"})," instance. You can access ",(0,s.jsx)(n.code,{children:"ticker.deltaTime"})," (scaled frame delta) and ",(0,s.jsx)(n.code,{children:"ticker.elapsedMS"})," (unscaled delta in ms) to time animations."]}),"\n",(0,s.jsx)(n.h2,{id:"step-2-updating-the-scene-graph",children:"Step 2: Updating the Scene Graph"}),"\n",(0,s.jsxs)(n.p,{children:["PixiJS uses a hierarchical ",(0,s.jsx)(n.strong,{children:"scene graph"})," to represent all visual objects. Before rendering, the graph needs to be traversed to:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recalculate transforms (world matrix updates)"}),"\n",(0,s.jsxs)(n.li,{children:["Apply custom logic via ",(0,s.jsx)(n.code,{children:"onRender"})," handlers"]}),"\n",(0,s.jsx)(n.li,{children:"Apply culling if enabled"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-3-rendering-the-scene",children:"Step 3: Rendering the Scene"}),"\n",(0,s.jsxs)(n.p,{children:["Once the scene graph is ready, the renderer walks the display list starting at ",(0,s.jsx)(n.code,{children:"app.stage"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Applies global and local transformations"}),"\n",(0,s.jsx)(n.li,{children:"Batches draw calls when possible"}),"\n",(0,s.jsx)(n.li,{children:"Uploads geometry, textures, and uniforms"}),"\n",(0,s.jsx)(n.li,{children:"Issues GPU commands"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["All rendering is ",(0,s.jsx)(n.strong,{children:"retained mode"}),": objects persist across frames unless explicitly removed."]}),"\n",(0,s.jsx)(n.p,{children:"Rendering is done via either WebGL or WebGPU, depending on your environment. The renderer abstracts away the differences behind a common API."}),"\n",(0,s.jsx)(n.h2,{id:"full-frame-lifecycle-diagram",children:"Full Frame Lifecycle Diagram"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"requestAnimationFrame\n        \u2502\n    [Ticker._tick()]\n        \u2502\n    \u251C\u2500 Compute elapsed time\n    \u251C\u2500 Call user listeners\n    \u2502   \u2514\u2500 sprite.onRender\n    \u251C\u2500 Cull display objects (if enabled)\n    \u251C\u2500 Update world transforms\n    \u2514\u2500 Render stage\n            \u251C\u2500 Traverse display list\n            \u251C\u2500 Upload data to GPU\n            \u2514\u2500 Draw\n"})})]})}function p(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);