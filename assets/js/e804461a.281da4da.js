"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["869"],{6042:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>d,toc:()=>c,metadata:()=>s,assets:()=>p,contentTitle:()=>l});var s=JSON.parse('{"id":"examples/masks/filter","title":"Filter","description":"","source":"@site/docs/examples/masks/filter.mdx","sourceDirName":"examples/masks","slug":"/examples/masks/filter","permalink":"/8.x/examples/masks/filter","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":2,"custom_edit_url":null,"title":"Filter"},"sidebar":"examplesSidebar","previous":{"title":"Sprite","permalink":"/8.x/examples/masks/sprite"},"next":{"title":"Inverse Mask","permalink":"/8.x/examples/masks/inverse-mask"}}'),i=t(85893),a=t(50065),r=t(31531);let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:2,custom_edit_url:null,title:"Filter"},l=void 0,p={},c=[];function u(e){return(0,i.jsx)(r.N,{files:{"index.js":"import { Application, Assets, BlurFilter, Graphics, Rectangle, SCALE_MODES, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  // Inner radius of the circle\n  const radius = 100;\n\n  // The blur amount\n  const blurSize = 32;\n\n  // Load the grass texture\n  const grassTexture = await Assets.load('https://pixijs.com/assets/bg_grass.jpg');\n\n  // Create the grass background\n  const background = new Sprite(grassTexture);\n\n  app.stage.addChild(background);\n  background.width = app.screen.width;\n  background.height = app.screen.height;\n\n  const circle = new Graphics().circle(radius + blurSize, radius + blurSize, radius).fill({ color: 0xff0000 });\n\n  circle.filters = [new BlurFilter(blurSize)];\n\n  const bounds = new Rectangle(0, 0, (radius + blurSize) * 2, (radius + blurSize) * 2);\n  const texture = app.renderer.generateTexture({\n    target: circle,\n    style: { scaleMode: SCALE_MODES.NEAREST },\n    resolution: 1,\n    frame: bounds,\n  });\n  const focus = new Sprite(texture);\n\n  app.stage.addChild(focus);\n\n  background.mask = focus;\n\n  app.stage.eventMode = 'static';\n  app.stage.hitArea = app.screen;\n  app.stage.on('pointermove', (event) => {\n    focus.position.x = event.global.x - focus.width / 2;\n    focus.position.y = event.global.y - focus.height / 2;\n  });\n})();\n"}})}function d(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},31531:function(e,n,t){t.d(n,{N:()=>r});var s=t(958),i=t(18146),a=t(85893);function r(e){return(0,i.J)("example",!0),(0,a.jsx)(s.M,{height:"calc(100vh - 325px)",fontSize:14,...e})}}}]);