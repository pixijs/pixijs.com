"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["516"],{19733:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>d,default:()=>x,toc:()=>c,metadata:()=>r,assets:()=>p,contentTitle:()=>l});var r=JSON.parse('{"id":"examples/filters-advanced/shader-toy-filter-render-texture","title":"Shader Toy Filter Render Texture","description":"","source":"@site/versioned_docs/version-7.x/examples/filters-advanced/shader-toy-filter-render-texture.mdx","sourceDirName":"examples/filters-advanced","slug":"/examples/filters-advanced/shader-toy-filter-render-texture","permalink":"/7.x/examples/filters-advanced/shader-toy-filter-render-texture","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"7.x","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":2,"custom_edit_url":null,"title":"Shader Toy Filter Render Texture"},"sidebar":"examplesSidebar","previous":{"title":"Custom","permalink":"/7.x/examples/filters-advanced/custom"},"next":{"title":"Textured Mesh Basic","permalink":"/7.x/examples/mesh-and-shaders/textured-mesh-basic"}}'),i=t(85893),s=t(50065),a=t(31531),o=t(99883);let d={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:2,custom_edit_url:null,title:"Shader Toy Filter Render Texture"},l=void 0,p={},c=[];function u(e){return(0,i.jsx)(a.N,{files:{"index.js":"import * as PIXI from 'pixi.js';\n\n/**\n * Please note that this is not the most optimal way of doing pure shader generated rendering and should be used when the\n * scene is wanted as input texture. Check the mesh version of example for more performant version if you need only shader\n * generated content.\n **/\nconst app = new PIXI.Application({ background: '#1099bb', resizeTo: window });\n\ndocument.body.appendChild(app.view);\n\nPIXI.Assets.load('https://pixijs.com/assets/perlin.jpg').then(onAssetsLoaded);\n\nlet filter = null;\n\nconst text = new PIXI.Text('PixiJS', { fill: 0xffffff, fontSize: 80 });\n\ntext.anchor.set(0.5, 0.5);\ntext.position.set(app.renderer.screen.width / 2, app.renderer.screen.height / 2);\n\napp.stage.addChild(text);\n\nlet totalTime = 0;\n\n// Fragment shader, in real use this would be much cleaner when loaded from a file\n// or embedded into the application as data resource.\nconst fragment = `//Based on this: https://www.shadertoy.com/view/wtlSWX\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform sampler2D noise;\nuniform float time;\n// Distance function. Just calculates the height (z) from x,y plane with really simple length check.\n// Its not exact as there could be shorter distances.\nvec2 dist(vec3 p)\n{\n  float id = floor(p.x)+floor(p.y);\n  id = mod(id, 2.);\n  float h = texture2D(noise, vec2(p.x, p.y)*0.04).r*5.1;\n  float h2 = texture2D(uSampler, vTextureCoord).r;\n  return vec2(h+h2-p.z,id);\n}\n//Light calculation.\nvec3 calclight(vec3 p, vec3 rd)\n{\n  vec2 eps = vec2( 0., 0.001);\n  vec3 n = normalize( vec3(\n    dist(p+eps.yxx).x - dist(p-eps.yxx).x,\n    dist(p+eps.xyx).x - dist(p-eps.xyx).x,\n    dist(p+eps.xxy).x - dist(p-eps.xxy).x\n  ));\n\n  vec3 d = vec3( max( 0., dot( -rd ,n)));\n\n  return d;\n}\n\nvoid main()\n{\n  vec2 uv = vec2(vTextureCoord.x, 1.-vTextureCoord.y);\n  uv *=2.;\n  uv-=1.;\n\n  vec3 cam = vec3(0.,time -2., -3.);\n  vec3 target = vec3(sin(time)*0.1, time+cos(time)+2., 0. );\n  float fov = 2.2;\n  vec3 forward = normalize( target - cam);\n  vec3 up = normalize(cross( forward, vec3(0., 1.,0.)));\n  vec3 right = normalize( cross( up, forward));\n  vec3 raydir = normalize(vec3( uv.x *up + uv.y * right + fov*forward));\n\n  //Do the raymarch\n  vec3 col = vec3(0.);\n  float t = 0.;\n  for( int i = 0; i < 100; i++)\n  {\n    vec3 p = t * raydir + cam;\n    vec2 d = dist(p);\n    t+=d.x*0.5;//Jump only half of the distance as height function used is not really the best for heightmaps.\n    if(d.x < 0.001)\n    {\n      vec3 bc = d.y < 0.5 ? vec3(1.0, .8, 0.) :\n                vec3(0.8,0.0, 1.0);\n      col = vec3( 1.) * calclight(p, raydir) * (1. - t/150.) *bc;\n      break;\n    }\n    if(t > 1000.)\n    {\n      break;\n    }\n  }\n  gl_FragColor = vec4(col, 1.);\n}\n`;\n\nfunction onAssetsLoaded(perlin) {\n  // Add perlin noise for filter, make sure it's wrapping and does not have mipmap.\n  perlin.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;\n  perlin.baseTexture.mipmap = false;\n\n  // Build the filter\n  filter = new PIXI.Filter(null, fragment, {\n    time: 0.0,\n    noise: perlin,\n  });\n  app.stage.filterArea = app.renderer.screen;\n  app.stage.filters = [filter];\n\n  // Listen for animate update.\n  app.ticker.add((delta) => {\n    filter.uniforms.time = totalTime;\n    totalTime += delta / 60;\n  });\n}\n"},dependencies:{"pixi.js":o.npm}})}function x(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},31531:function(e,n,t){t.d(n,{N:()=>a});var r=t(958),i=t(18146),s=t(85893);function a(e){return(0,i.J)("example",!0),(0,s.jsx)(r.M,{height:"calc(100vh - 325px)",fontSize:14,...e})}},99883:function(e){e.exports=JSON.parse('{"versionLabel":"v7.x","version":"7.4.2","releaseNotes":"https://github.com/pixijs/pixijs/releases/tag/v7.4.2","build":"https://pixijs.download/v7.4.2/pixi.min.js","docs":"https://pixijs.download/v7.4.2/docs/index.html","npm":"7.4.2","prerelease":false,"latest":false}')}}]);