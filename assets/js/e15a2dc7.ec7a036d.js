"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["2601"],{22875:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,default:()=>x,toc:()=>d,metadata:()=>r,assets:()=>u,contentTitle:()=>p});var r=JSON.parse('{"id":"examples/textures/render-texture-advanced","title":"Render Texture Advanced","description":"","source":"@site/docs/examples/textures/render-texture-advanced.mdx","sourceDirName":"examples/textures","slug":"/examples/textures/render-texture-advanced","permalink":"/8.x/examples/textures/render-texture-advanced","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":2,"custom_edit_url":null,"title":"Render Texture Advanced"},"sidebar":"examplesSidebar","previous":{"title":"Render Texture Basic","permalink":"/8.x/examples/textures/render-texture-basic"},"next":{"title":"Promise","permalink":"/8.x/examples/assets/promise"}}'),s=n(85893),i=n(50065),a=n(31531);let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:2,custom_edit_url:null,title:"Render Texture Advanced"},p=void 0,u={},d=[];function c(e){return(0,s.jsx)(a.N,{files:{"index.js":"import { Application, Assets, Container, RenderTexture, Sprite } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const stageSize = {\n    width: app.screen.width,\n    height: app.screen.height,\n  };\n\n  // Create two render textures... these dynamic textures will be used to draw the scene into itself\n  let renderTexture = RenderTexture.create(stageSize);\n  let renderTexture2 = RenderTexture.create(stageSize);\n  const currentTexture = renderTexture;\n\n  // Create a new sprite that uses the render texture we created above\n  const outputSprite = new Sprite(currentTexture);\n\n  // Align the sprite\n  outputSprite.x = 400;\n  outputSprite.y = 300;\n  outputSprite.anchor.set(0.5);\n\n  // Add to stage\n  app.stage.addChild(outputSprite);\n\n  const stuffContainer = new Container();\n\n  stuffContainer.x = 400;\n  stuffContainer.y = 300;\n\n  app.stage.addChild(stuffContainer);\n\n  // Create an array of image ids..\n  const fruits = [\n    'https://pixijs.com/assets/rt_object_01.png',\n    'https://pixijs.com/assets/rt_object_02.png',\n    'https://pixijs.com/assets/rt_object_03.png',\n    'https://pixijs.com/assets/rt_object_04.png',\n    'https://pixijs.com/assets/rt_object_05.png',\n    'https://pixijs.com/assets/rt_object_06.png',\n    'https://pixijs.com/assets/rt_object_07.png',\n    'https://pixijs.com/assets/rt_object_08.png',\n  ];\n\n  // Load the textures\n  await Assets.load(fruits);\n\n  // Create an array of items\n  const items = [];\n\n  // Now create some items and randomly position them in the stuff container\n  for (let i = 0; i < 20; i++) {\n    const item = Sprite.from(fruits[i % fruits.length]);\n\n    item.x = Math.random() * 400 - 200;\n    item.y = Math.random() * 400 - 200;\n    item.anchor.set(0.5);\n    stuffContainer.addChild(item);\n    items.push(item);\n  }\n\n  // Used for spinning!\n  let count = 0;\n\n  app.ticker.add(() => {\n    for (let i = 0; i < items.length; i++) {\n      // rotate each item\n      const item = items[i];\n\n      item.rotation += 0.1;\n    }\n\n    count += 0.01;\n\n    // Swap the buffers ...\n    const temp = renderTexture;\n\n    renderTexture = renderTexture2;\n    renderTexture2 = temp;\n\n    // Set the new texture\n    outputSprite.texture = renderTexture;\n\n    // Twist this up!\n    stuffContainer.rotation -= 0.01;\n    outputSprite.scale.set(1 + Math.sin(count) * 0.2);\n\n    // Render the stage to the texture\n    // * The 'true' clears the texture before the content is rendered *\n    app.renderer.render({\n      container: app.stage,\n      target: renderTexture2,\n      clear: false,\n    });\n  });\n})();\n"}})}function x(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);