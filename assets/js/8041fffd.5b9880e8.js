"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["3494"],{83245:function(n,e,t){t.r(e),t.d(e,{default:()=>f,frontMatter:()=>l,metadata:()=>i,assets:()=>c,toc:()=>m,contentTitle:()=>h});var i=JSON.parse('{"id":"examples/ordering/render-layer","title":"Render Layer","description":"<ExampleEditor files={{","source":"@site/docs/examples/ordering/render-layer.mdx","sourceDirName":"examples/ordering","slug":"/examples/ordering/render-layer","permalink":"/8.x/examples/ordering/render-layer","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":1,"custom_edit_url":null,"title":"Render Layer"},"sidebar":"examplesSidebar","previous":{"title":"Pixel Line","permalink":"/8.x/examples/graphics/pixel-line"},"next":{"title":"Click","permalink":"/8.x/examples/events/click"}}'),s=t("85893"),a=t("50065"),r=t("43076"),p=t("82441"),d=t("10684"),o=t("26479");let l={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:1,custom_edit_url:null,title:"Render Layer"},h=void 0,c={},m=[];function u(n){return(0,s.jsx)(r.N,{files:{"index.js":p.Z,"Fish.js":d.Z,"CharacterUI.js":o.Z}})}function f(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},26479:function(n,e,t){t.d(e,{Z:function(){return i}});let i="import { Container, Graphics, Text } from 'pixi.js';\n\nexport class CharacterUI extends Container\n{\n    constructor(name, age)\n    {\n        super();\n\n        const label = new Text({\n            text: name,\n            resolution: 2,\n            style: { fontSize: 16, fill: 0x000000 }, anchor: 0.5\n        });\n\n        const padding = 10;\n\n        const bg = new Graphics()\n            .roundRect(\n                -label.width / 2 - padding,\n                -label.height / 2 - padding,\n                label.width + padding * 2,\n                label.height + padding * 2,\n                20\n            )\n            .fill({\n                color: 0xffff00,\n                alpha: 1\n            });\n\n        this.addChild(bg, label);\n    }\n}\n"},10684:function(n,e,t){t.d(e,{Z:function(){return i}});let i="import { Container, Sprite } from 'pixi.js';\nimport { CharacterUI } from './CharacterUI';\n\nexport class Fish extends Container\n{\n    ui;\n    _speed = 1 + Number(Math.random());\n    _direction = Math.random() * Math.PI * 2;\n    fishView;\n\n    constructor(name, texture)\n    {\n        super();\n\n        this.fishView = new Sprite(texture);\n\n        this.fishView.anchor.set(0.5);\n\n        this.addChild(this.fishView);\n\n        this.ui = new CharacterUI(name, 20);\n        this.ui.y = 0;\n        this.addChild(this.ui);\n    }\n\n    update()\n    {\n        this._direction += 0.001;\n\n        this.fishView.rotation = Math.PI - this._direction;\n        this.x += this._speed * Math.cos(-this._direction);\n        this.y += this._speed * Math.sin(-this._direction);\n\n        // wrap around the screen\n        const padding = 100;\n        const width = 630;\n        const height = 410;\n\n        if (this.x > width + padding) this.x -= width + padding * 2;\n        if (this.x < -padding) this.x += width + padding * 2;\n        if (this.y > height + padding) this.y -= height + padding * 2;\n        if (this.y < -padding) this.y += height + padding * 2;\n    }\n}\n"},82441:function(n,e,t){t.d(e,{Z:function(){return i}});let i="import { Application, Assets, Container, DisplacementFilter, RenderLayer, Sprite, TilingSprite } from 'pixi.js';\nimport { Fish } from './Fish';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ width: 630, height: 410, antialias: true });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n    // move the canvas to the center of the screen\n    app.canvas.style.position = 'absolute';\n    app.canvas.style.top = `${window.innerHeight / 2 - app.canvas.height / 2}px`;\n    app.canvas.style.left = `${window.innerWidth / 2 - app.canvas.width / 2}px`;\n\n    // Load textures\n    await Assets.load([\n        `https://pixijs.com/assets/pond/displacement_BG.jpg`,\n        `https://pixijs.com/assets/pond/overlay.png`,\n        `https://pixijs.com/assets/pond/displacement_map.png`,\n        `https://pixijs.com/assets/pond/displacement_fish1.png`,\n        `https://pixijs.com/assets/pond/displacement_fish2.png`,\n    ]);\n\n    const background = Sprite.from('https://pixijs.com/assets/pond/displacement_BG.jpg');\n\n    const pondContainer = new Container();\n\n    pondContainer.addChild(background);\n\n    app.stage.addChild(pondContainer);\n\n    const displacementMap = Assets.get('https://pixijs.com/assets/pond/displacement_map.png');\n\n    displacementMap.source.wrapMode = 'repeat';\n\n    const displacementSprite = Sprite.from(displacementMap);\n    const displacementFilter = new DisplacementFilter(displacementSprite, 40);\n\n    pondContainer.addChild(displacementSprite);\n    pondContainer.filters = [displacementFilter];\n\n    const uiLayer = new RenderLayer();\n\n    const fishes = [];\n\n    const names = ['Alice', 'Bob', 'Caroline', 'David', 'Ellie', 'Frank', 'Gloria', 'Henry', 'Isabel', 'Jack'];\n    const textures = [\n        Assets.get('https://pixijs.com/assets/pond/displacement_fish1.png'),\n        Assets.get('https://pixijs.com/assets/pond/displacement_fish2.png')\n    ];\n\n    for (let i = 0; i < 10; i++)\n    {\n        const fish = new Fish(names[i % names.length], textures[i % textures.length]);\n\n        fishes.push(fish);\n        pondContainer.addChild(fish);\n\n        fish.x = Math.random() * 630;\n        fish.y = Math.random() * 410;\n\n        uiLayer.attach(fish.ui);\n    }\n\n    const waterOverlay = TilingSprite.from(Assets.get('https://pixijs.com/assets/pond/overlay.png'));\n\n    waterOverlay.width = 630;\n    waterOverlay.height = 410;\n\n    pondContainer.addChild(waterOverlay);\n\n    app.stage.addChild(uiLayer);\n\n    // Animate the mask\n    app.ticker.add(() =>\n    {\n        waterOverlay.tilePosition.x += 0.5;\n        waterOverlay.tilePosition.y += 0.5;\n\n        displacementSprite.x += 0.5;\n        displacementSprite.y += 0.5;\n\n        fishes.forEach((fish) => fish.update());\n    });\n})();\n"}}]);