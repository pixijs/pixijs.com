"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["751"],{69275:function(n,t,e){e.r(t),e.d(t,{default:()=>c,frontMatter:()=>p,metadata:()=>i,assets:()=>g,toc:()=>l,contentTitle:()=>r});var i=JSON.parse('{"id":"examples/filters-basic/displacement-map-crawlies","title":"Displacement Map Crawlies","description":"","source":"@site/docs/examples/filters-basic/displacement-map-crawlies.mdx","sourceDirName":"examples/filters-basic","slug":"/examples/filters-basic/displacement-map-crawlies","permalink":"/8.x/examples/filters-basic/displacement-map-crawlies","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":2,"custom_edit_url":null,"title":"Displacement Map Crawlies"},"sidebar":"examplesSidebar","previous":{"title":"Color Matrix","permalink":"/8.x/examples/filters-basic/color-matrix"},"next":{"title":"Displacement Map Flag","permalink":"/8.x/examples/filters-basic/displacement-map-flag"}}'),a=e("85893"),s=e("50065"),o=e("67963");let p={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:2,custom_edit_url:null,title:"Displacement Map Crawlies"},r=void 0,g={},l=[];function d(n){return(0,a.jsx)(o.N,{files:{"index.js":"import { Application, Assets, Container, DisplacementFilter, Point, Rectangle, Sprite } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // Load the textures\n    await Assets.load([\n        'https://pixijs.com/assets/maggot.png',\n        'https://pixijs.com/assets/pixi-filters/displace.png',\n        'https://pixijs.com/assets/pixi-filters/ring.png',\n        'https://pixijs.com/assets/bg_grass.jpg',\n    ]);\n\n    app.stage.eventMode = 'static';\n\n    const container = new Container();\n\n    app.stage.addChild(container);\n\n    const padding = 100;\n    const bounds = new Rectangle(-padding, -padding, app.screen.width + padding * 2, app.screen.height + padding * 2);\n    const maggots = [];\n\n    for (let i = 0; i < 20; i++)\n    {\n        const maggot = Sprite.from('https://pixijs.com/assets/maggot.png');\n\n        maggot.anchor.set(0.5);\n        container.addChild(maggot);\n\n        maggot.direction = Math.random() * Math.PI * 2;\n        maggot.speed = 1;\n        maggot.turnSpeed = Math.random() - 0.8;\n\n        maggot.x = Math.random() * bounds.width;\n        maggot.y = Math.random() * bounds.height;\n\n        maggot.scale.set(1 + Math.random() * 0.3);\n        maggot.original = new Point();\n        maggot.original.copyFrom(maggot.scale);\n        maggots.push(maggot);\n    }\n\n    const displacementSprite = Sprite.from('https://pixijs.com/assets/pixi-filters/displace.png');\n\n    // Create a displacement filter\n    const displacementFilter = new DisplacementFilter({ sprite: displacementSprite, scale: 150 });\n\n    app.stage.addChild(displacementSprite);\n\n    // Apply the filter\n    container.filters = [displacementFilter];\n\n    displacementSprite.anchor.set(0.5);\n\n    const ring = Sprite.from('https://pixijs.com/assets/pixi-filters/ring.png');\n\n    ring.anchor.set(0.5);\n\n    ring.visible = false;\n\n    app.stage.addChild(ring);\n\n    const bg = Sprite.from('https://pixijs.com/assets/bg_grass.jpg');\n\n    bg.width = app.screen.width;\n    bg.height = app.screen.height;\n\n    bg.alpha = 0.4;\n\n    container.addChild(bg);\n\n    app.stage.on('mousemove', onPointerMove).on('touchmove', onPointerMove);\n\n    function onPointerMove(eventData)\n    {\n        ring.visible = true;\n\n        displacementSprite.position.set(eventData.data.global.x - 25, eventData.data.global.y);\n        ring.position.copyFrom(displacementSprite.position);\n    }\n\n    let count = 0;\n\n    // Animate the maggots\n    app.ticker.add(() =>\n    {\n        count += 0.05;\n\n        for (let i = 0; i < maggots.length; i++)\n        {\n            const maggot = maggots[i];\n\n            maggot.direction += maggot.turnSpeed * 0.01;\n            maggot.x += Math.sin(maggot.direction) * maggot.speed;\n            maggot.y += Math.cos(maggot.direction) * maggot.speed;\n\n            maggot.rotation = -maggot.direction - Math.PI / 2;\n            maggot.scale.x = maggot.original.x + Math.sin(count) * 0.2;\n\n            // wrap the maggots around as the crawl\n            if (maggot.x < bounds.x)\n            {\n                maggot.x += bounds.width;\n            }\n            else if (maggot.x > bounds.x + bounds.width)\n            {\n                maggot.x -= bounds.width;\n            }\n\n            if (maggot.y < bounds.y)\n            {\n                maggot.y += bounds.height;\n            }\n            else if (maggot.y > bounds.y + bounds.height)\n            {\n                maggot.y -= bounds.height;\n            }\n        }\n    });\n})();\n"}})}function c(n={}){let{wrapper:t}={...(0,s.a)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);