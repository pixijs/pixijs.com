"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["6565"],{38341:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>s,default:()=>f,toc:()=>m,metadata:()=>a,assets:()=>l,contentTitle:()=>u});var a=JSON.parse('{"id":"examples/mesh-and-shaders/instanced-geometry","title":"Instanced Geometry","description":"<ExampleEditor","source":"@site/docs/examples/mesh-and-shaders/instanced-geometry.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/instanced-geometry","permalink":"/8.x/examples/mesh-and-shaders/instanced-geometry","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":8,"custom_edit_url":null,"title":"Instanced Geometry"},"sidebar":"examplesSidebar","previous":{"title":"Shared Shader","permalink":"/8.x/examples/mesh-and-shaders/shared-shader"},"next":{"title":"Shader Toy Mesh","permalink":"/8.x/examples/mesh-and-shaders/shader-toy-mesh"}}'),r=t(85893),i=t(50065),o=t(31531);let s={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:8,custom_edit_url:null,title:"Instanced Geometry"},u=void 0,l={},m=[];function c(n){return(0,r.jsx)(o.N,{files:{"index.js":"import { Application, Assets, Buffer, BufferUsage, Geometry, Mesh, Shader } from 'pixi.js';\nimport fragment from './instancedGeometry.frag';\nimport vertex from './instancedGeometry.vert';\nimport source from './instancedGeometry.wgsl';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({\n    resizeTo: window,\n    preference: 'webgl',\n  });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const spinnyBG = await Assets.load('https://pixijs.com/assets/bg_scene_rotate.jpg');\n\n  const totalTriangles = 1000;\n\n  // need a buffer big enough to store x, y of totalTriangles\n  const instancePositionBuffer = new Buffer({\n    data: new Float32Array(totalTriangles * 2),\n    usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n  });\n\n  const triangles = [];\n\n  for (let i = 0; i < totalTriangles; i++) {\n    triangles[i] = {\n      x: 800 * Math.random(),\n      y: 600 * Math.random(),\n      speed: 1 + Math.random() * 2,\n    };\n  }\n\n  const geometry = new Geometry({\n    attributes: {\n      aPosition: [\n        -10,\n        -10, // x, y\n        10,\n        -20, // x, y\n        10,\n        10,\n      ],\n      aUV: [\n        0,\n        0, // u, v\n        1,\n        0, // u, v\n        1,\n        1,\n        0,\n        1,\n      ],\n      aPositionOffset: {\n        buffer: instancePositionBuffer,\n        instance: true,\n      },\n    },\n    instanceCount: totalTriangles,\n  });\n\n  const gl = { vertex, fragment };\n\n  const gpu = {\n    vertex: {\n      entryPoint: 'mainVert',\n      source,\n    },\n    fragment: {\n      entryPoint: 'mainFrag',\n      source,\n    },\n  };\n\n  const shader = Shader.from({\n    gl,\n    gpu,\n    resources: {\n      uTexture: spinnyBG.source,\n      uSampler: spinnyBG.source.style,\n      waveUniforms: {\n        time: { value: 1, type: 'f32' },\n      },\n    },\n  });\n\n  const triangleMesh = new Mesh({\n    geometry,\n    shader,\n  });\n\n  // triangle.position.set(128 / 2, 128 / 2);\n\n  app.stage.addChild(triangleMesh);\n\n  app.ticker.add(() => {\n    const data = instancePositionBuffer.data;\n\n    let count = 0;\n\n    for (let i = 0; i < totalTriangles; i++) {\n      const triangle = triangles[i];\n\n      triangle.x += triangle.speed;\n      triangle.x %= 800;\n\n      data[count++] = triangle.x;\n      data[count++] = triangle.y;\n    }\n\n    instancePositionBuffer.update();\n  });\n})();\n","instancedGeometry.vert":"in vec2 aPosition;\nin vec2 aUV;\nin vec2 aPositionOffset;\n\nout vec2 vUV;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\nuniform mat3 uTransformMatrix;\n\n\nvoid main() {\n\n    mat3 mvp = uProjectionMatrix * uWorldTransformMatrix * uTransformMatrix;\n    gl_Position = vec4((mvp * vec3(aPosition + aPositionOffset, 1.0)).xy, 0.0, 1.0);\n\n    vUV = aUV;\n}","instancedGeometry.frag":"in vec2 vUV;\nuniform sampler2D uTexture;\nuniform float time;\n\nvoid main() {\n    gl_FragColor = texture(uTexture, vUV + sin( (time + (vUV.x) * 14.) ) * 0.1 );\n}","instancedGeometry.wgsl":"struct GlobalUniforms {\n    uProjectionMatrix:mat3x3<f32>,\n    uWorldTransformMatrix:mat3x3<f32>,\n    uWorldColorAlpha: vec4<f32>,\n    uResolution: vec2<f32>,\n}\n\nstruct LocalUniforms {\n    uTransformMatrix:mat3x3<f32>,\n    uColor:vec4<f32>,\n    uRound:f32,\n}\n\n\n@group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n@group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n\nstruct VertexOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) vUV: vec2<f32>,\n};\n\n\n@vertex\nfn mainVert(\n    @location(0) aPosition : vec2<f32>,\n    @location(1) aUV : vec2<f32>,\n    @location(2) aPositionOffset : vec2<f32>,\n) -> VertexOutput {     \n    var mvp = globalUniforms.uProjectionMatrix \n        * globalUniforms.uWorldTransformMatrix \n        * localUniforms.uTransformMatrix;\n    \n    var output: VertexOutput;\n\n    output.position = vec4<f32>(mvp * vec3<f32>(aPosition+aPositionOffset, 1.0), 1.0);\n    output.vUV = aUV;\n\n    return output; \n};\n\nstruct WaveUniforms {\n    time:f32,\n}\n\n@group(2) @binding(1) var uTexture : texture_2d<f32>;\n@group(2) @binding(2) var uSampler : sampler;\n@group(2) @binding(3) var<uniform> waveUniforms : WaveUniforms;\n\n@fragment\nfn mainFrag(\n    @location(0) vUV: vec2<f32>,\n) -> @location(0) vec4<f32> {\n    return textureSample(uTexture, uSampler, vUV + sin( (waveUniforms.time + (vUV.x) * 14.) ) * 0.1);\n};"}})}function f(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},31531:function(n,e,t){t.d(e,{N:()=>o});var a=t(958),r=t(18146),i=t(85893);function o(n){return(0,r.J)("example",!0),(0,i.jsx)(a.M,{height:"calc(100vh - 325px)",fontSize:14,...n})}}}]);