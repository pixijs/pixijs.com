"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["3627"],{23896:function(e,t,i){i.r(t),i.d(t,{default:()=>a,frontMatter:()=>d,metadata:()=>n,assets:()=>c,toc:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"guides/components/interaction","title":"Interaction","description":"PixiJS is primarily a rendering system, but it also includes support for interactivity. Adding support for mouse and touch events to your project is simple and consistent.","source":"@site/docs/guides/components/interaction.md","sourceDirName":"guides/components","slug":"/guides/components/interaction","permalink":"/8.x/guides/components/interaction","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixijs.com/tree/main/docs/guides/components/interaction.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guidesSidebar","previous":{"title":"Graphics Fill","permalink":"/8.x/guides/components/graphics-fill"},"next":{"title":"Sprites","permalink":"/8.x/guides/components/sprites"}}'),s=i("85893"),r=i("50065");let d={},o="Interaction",c={},l=[{value:"Event Modes",id:"event-modes",level:2},{value:"Event Types",id:"event-types",level:2},{value:"Enabling Interaction",id:"enabling-interaction",level:2},{value:"Checking if an Object is Interactive",id:"checking-if-an-object-is-interactive",level:3},{value:"Use Pointer Events",id:"use-pointer-events",level:2},{value:"Optimization",id:"optimization",level:2}];function h(e){let t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"interaction",children:"Interaction"})}),"\n",(0,s.jsx)(t.p,{children:"PixiJS is primarily a rendering system, but it also includes support for interactivity. Adding support for mouse and touch events to your project is simple and consistent."}),"\n",(0,s.jsx)(t.h2,{id:"event-modes",children:"Event Modes"}),"\n",(0,s.jsxs)(t.p,{children:["Prior to v7, interaction was defined and managed by the ",(0,s.jsx)(t.code,{children:"Interaction"})," package and its ",(0,s.jsx)(t.code,{children:"InteractionManager"}),".\nBeginning with v7, however, a new event-based system has replaced the previous ",(0,s.jsx)(t.code,{children:"Interaction"})," package, and\nexpanded the definition of what it means for a ",(0,s.jsx)(t.code,{children:"Container"})," to be interactive."]}),"\n",(0,s.jsxs)(t.p,{children:["With this, we have introduced ",(0,s.jsx)(t.code,{children:"eventMode"})," which allows you to control how an object responds to interaction events.\nIf you're familiar with the former ",(0,s.jsx)(t.code,{children:"Interaction"})," system, the ",(0,s.jsx)(t.code,{children:"eventMode"})," is similar to the ",(0,s.jsx)(t.code,{children:"interactive"})," property, but with more options."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"eventMode"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"none"})}),(0,s.jsxs)(t.td,{children:["Ignores all interaction events, similar to CSS's ",(0,s.jsx)(t.code,{children:"pointer-events: none"}),". Good optimization for non-interactive children."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"passive"})}),(0,s.jsxs)(t.td,{children:["The ",(0,s.jsx)(t.strong,{children:"default"})," ",(0,s.jsx)(t.code,{children:"eventMode"})," for all containers. Does not emit events and ignores hit-testing on itself, but ",(0,s.jsx)(t.em,{children:"does"})," allow for events and hit-testing on its interactive children."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"auto"})}),(0,s.jsxs)(t.td,{children:["Does not emit events, but is hit tested if parent is interactive. Same as ",(0,s.jsx)(t.code,{children:"interactive = false"})," in v7."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"static"})}),(0,s.jsxs)(t.td,{children:["Emits events and is hit tested. Same as ",(0,s.jsx)(t.code,{children:"interaction = true"})," in v7. Useful for objects like buttons that do not move."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dynamic"})}),(0,s.jsx)(t.td,{children:"Emits events and is hit tested, but will also receive mock interaction events fired from a ticker to allow for interaction when the mouse isn't moving. Useful for elements that are independently moving or animating."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"event-types",children:"Event Types"}),"\n",(0,s.jsx)(t.p,{children:"PixiJS supports the following event types:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Event Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointercancel"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device button is released outside the display object that initially registered a pointerdown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerdown"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device button is pressed on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerenter"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device enters the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerleave"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device leaves the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointermove"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device is moved while over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"globalpointermove"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device is moved, regardless of hit-testing the current object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerout"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device is moved off the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerover"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device is moved onto the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointertap"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device is tapped on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerup"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device button is released over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pointerupoutside"})}),(0,s.jsx)(t.td,{children:"Fired when a pointer device button is released outside the display object that initially registered a pointerdown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mousedown "})}),(0,s.jsx)(t.td,{children:"Fired when a mouse button is pressed on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseenter"})}),(0,s.jsx)(t.td,{children:"Fired when the mouse cursor enters the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseleave"})}),(0,s.jsx)(t.td,{children:"Fired when the mouse cursor leaves the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mousemove "})}),(0,s.jsx)(t.td,{children:"Fired when the mouse cursor is moved while over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"globalmousemove"})}),(0,s.jsx)(t.td,{children:"Fired when a mouse is moved, regardless of hit-testing the current object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseout "})}),(0,s.jsx)(t.td,{children:"Fired when the mouse cursor is moved off the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseover "})}),(0,s.jsx)(t.td,{children:"Fired when the mouse cursor is moved onto the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseup "})}),(0,s.jsx)(t.td,{children:"Fired when a mouse button is released over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseupoutside "})}),(0,s.jsx)(t.td,{children:"Fired when a mouse button is released outside the display object that initially registered a mousedown."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"click "})}),(0,s.jsx)(t.td,{children:"Fired when a mouse button is clicked (pressed and released) over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"touchcancel "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is removed outside of the display object that initially registered a touchstart."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"touchend "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is removed from the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"touchendoutside "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is removed outside of the display object that initially registered a touchstart."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"touchmove "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is moved along the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"globaltouchmove"})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is moved, regardless of hit-testing the current object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"touchstart "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is placed on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"tap "})}),(0,s.jsx)(t.td,{children:"Fired when a touch point is tapped on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"wheel "})}),(0,s.jsx)(t.td,{children:"Fired when a mouse wheel is spun over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"rightclick "})}),(0,s.jsx)(t.td,{children:"Fired when a right mouse button is clicked (pressed and released) over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"rightdown "})}),(0,s.jsx)(t.td,{children:"Fired when a right mouse button is pressed on the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"rightup "})}),(0,s.jsx)(t.td,{children:"Fired when a right mouse button is released over the display object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"rightupoutside "})}),(0,s.jsx)(t.td,{children:"Fired when a right mouse button is released outside the display object that initially registered a rightdown."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"enabling-interaction",children:"Enabling Interaction"}),"\n",(0,s.jsxs)(t.p,{children:["Any ",(0,s.jsx)(t.code,{children:"Container"}),"-derived object (",(0,s.jsx)(t.code,{children:"Sprite"}),", ",(0,s.jsx)(t.code,{children:"Container"}),", etc.) can become interactive simply by setting its ",(0,s.jsx)(t.code,{children:"eventMode"})," property to any of the eventModes listed above. Doing so will cause the object to emit interaction events that can be responded to in order to drive your project's behavior."]}),"\n",(0,s.jsxs)(t.p,{children:["Check out the ",(0,s.jsx)(t.a,{href:"../../examples/events/click",children:"click interactivity example code"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"To respond to clicks and taps, bind to the events fired on the object, like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"let sprite = Sprite.from('/some/texture.png');\nsprite.on('pointerdown', (event) => { alert('clicked!'); });\nsprite.eventMode = 'static';\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Check out the ",(0,s.jsx)(t.a,{href:"https://pixijs.download/release/docs/scene.Container.html",children:"Container"})," for the list of interaction events supported."]}),"\n",(0,s.jsx)(t.h3,{id:"checking-if-an-object-is-interactive",children:"Checking if an Object is Interactive"}),"\n",(0,s.jsxs)(t.p,{children:["You can check if an object is interactive by calling the ",(0,s.jsx)(t.code,{children:"isInteractive"})," property. This will return true if ",(0,s.jsx)(t.code,{children:"eventMode"})," is set to ",(0,s.jsx)(t.code,{children:"static"})," or ",(0,s.jsx)(t.code,{children:"dynamic"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"if (sprite.isInteractive()) {\n    // sprite is interactive\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"use-pointer-events",children:"Use Pointer Events"}),"\n",(0,s.jsx)(t.p,{children:"PixiJS supports three types of interaction events: mouse, touch, and pointer."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Mouse events are fired by mouse movement, clicks etc."}),"\n",(0,s.jsx)(t.li,{children:"Touch events are fired for touch-capable devices. And,"}),"\n",(0,s.jsxs)(t.li,{children:["Pointer events are fired for ",(0,s.jsx)(t.em,{children:"both"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["What this means is that, in many cases, you can write your project to use pointer events and it will just work when used with ",(0,s.jsx)(t.em,{children:"either"})," mouse or touch input."]}),"\n",(0,s.jsx)(t.p,{children:"Given that, the only reason to use non-pointer events is to support different modes of operation based on input type or to support multi-touch interaction. In all other cases, prefer pointer events."}),"\n",(0,s.jsx)(t.h2,{id:"optimization",children:"Optimization"}),"\n",(0,s.jsx)(t.p,{children:"Hit testing requires walking the full object tree, which in complex projects can become an optimization bottleneck."}),"\n",(0,s.jsxs)(t.p,{children:["To mitigate this issue, PixiJS ",(0,s.jsx)(t.code,{children:"Container"}),"-derived objects have a property named ",(0,s.jsx)(t.code,{children:"interactiveChildren"}),". If you have ",(0,s.jsx)(t.code,{children:"Container"}),"s or other objects with complex child trees that you know will ",(0,s.jsx)(t.em,{children:"never"})," be interactive,\nyou can set this property to ",(0,s.jsx)(t.code,{children:"false"}),", and the hit-testing algorithm will skip those children when checking for hover and click events."]}),"\n",(0,s.jsxs)(t.p,{children:["As an example, if you were building a side-scrolling game, you would probably want to set ",(0,s.jsx)(t.code,{children:"background.interactiveChildren = false"})," for your background layer with rocks, clouds, flowers, etc. Doing so would substantially speed up hit-testing due to the number of unclickable child objects the background layer would contain."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventSystem"})," can also be customised to be more performant:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const app = new Application({\n    eventMode: 'passive',\n    eventFeatures: {\n        move: true,\n        /** disables the global move events which can be very expensive in large scenes */\n        globalMove: false,\n        click: true,\n        wheel: true,\n    }\n});\n"})})]})}function a(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);