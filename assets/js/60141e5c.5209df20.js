"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["9670"],{31391:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>p,default:()=>h,toc:()=>m,metadata:()=>s,assets:()=>d,contentTitle:()=>l});var s=JSON.parse('{"id":"examples/mesh-and-shaders/sharing-geometry","title":"Sharing Geometry","description":"","source":"@site/versioned_docs/version-7.x/examples/mesh-and-shaders/sharing-geometry.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/sharing-geometry","permalink":"/7.x/examples/mesh-and-shaders/sharing-geometry","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"7.x","sidebarPosition":6,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":6,"custom_edit_url":null,"title":"Sharing Geometry"},"sidebar":"examplesSidebar","previous":{"title":"Uniforms","permalink":"/7.x/examples/mesh-and-shaders/uniforms"},"next":{"title":"Shared Shader","permalink":"/7.x/examples/mesh-and-shaders/shared-shader"}}'),i=t(85893),r=t(50065),a=t(31531),o=t(99883);let p={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:6,custom_edit_url:null,title:"Sharing Geometry"},l=void 0,d={},m=[];function u(e){return(0,i.jsx)(a.N,{files:{"index.js":"import * as PIXI from 'pixi.js';\n\nconst app = new PIXI.Application({ resizeTo: window });\n\ndocument.body.appendChild(app.view);\n\nconst geometry = new PIXI.Geometry()\n  .addAttribute(\n    'aVertexPosition', // the attribute name\n    [\n      -100,\n      -100, // x, y\n      100,\n      -100, // x, y\n      100,\n      100,\n    ], // x, y\n    2,\n  ) // the size of the attribute\n\n  .addAttribute(\n    'aUvs', // the attribute name\n    [\n      0,\n      0, // u, v\n      1,\n      0, // u, v\n      1,\n      1,\n    ], // u, v\n    2,\n  ); // the size of the attribute\n\nconst program = PIXI.Program.from(\n  `\n\n    precision mediump float;\n\n    attribute vec2 aVertexPosition;\n    attribute vec2 aUvs;\n\n    uniform mat3 translationMatrix;\n    uniform mat3 projectionMatrix;\n\n    varying vec2 vUvs;\n\n    void main() {\n\n        vUvs = aUvs;\n        gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    }`,\n\n  `precision mediump float;\n\n    varying vec2 vUvs;\n\n    uniform sampler2D uSamplerTexture;\n\n    void main() {\n\n        gl_FragColor = texture2D(uSamplerTexture, vUvs);\n    }\n\n`,\n);\n\nconst triangle = new PIXI.Mesh(\n  geometry,\n  new PIXI.Shader(program, {\n    uSamplerTexture: PIXI.Texture.from('https://pixijs.com/assets/bg_scene_rotate.jpg'),\n  }),\n);\n\nconst triangle2 = new PIXI.Mesh(\n  geometry,\n  new PIXI.Shader(program, {\n    uSamplerTexture: PIXI.Texture.from('https://pixijs.com/assets/bg_rotate.jpg'),\n  }),\n);\n\nconst triangle3 = new PIXI.Mesh(\n  geometry,\n  new PIXI.Shader(program, {\n    uSamplerTexture: PIXI.Texture.from('https://pixijs.com/assets/bg_displacement.jpg'),\n  }),\n);\n\ntriangle.position.set(400, 300);\ntriangle.scale.set(2);\n\ntriangle2.position.set(200, 100);\n\ntriangle3.position.set(500, 400);\ntriangle3.scale.set(3);\n\napp.stage.addChild(triangle3, triangle2, triangle);\n\napp.ticker.add(() => {\n  triangle.rotation += 0.01;\n  triangle2.rotation -= 0.01;\n  triangle3.rotation -= 0.005;\n});\n"},dependencies:{"pixi.js":o.npm}})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},99883:function(e){e.exports=JSON.parse('{"versionLabel":"v7.x","version":"7.4.2","releaseNotes":"https://github.com/pixijs/pixijs/releases/tag/v7.4.2","build":"https://pixijs.download/v7.4.2/pixi.min.js","docs":"https://pixijs.download/v7.4.2/docs/index.html","npm":"7.4.2","prerelease":false,"latest":false}')}}]);