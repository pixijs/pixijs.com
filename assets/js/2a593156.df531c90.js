"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["4477"],{99841:function(e,n,t){t.r(n),t.d(n,{default:()=>m,frontMatter:()=>o,metadata:()=>r,assets:()=>d,toc:()=>u,contentTitle:()=>l});var r=JSON.parse('{"id":"examples/mesh-and-shaders/triangle-textured","title":"Triangle Textured","description":"<ExampleEditor files={{","source":"@site/docs/examples/mesh-and-shaders/triangle-textured.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/triangle-textured","permalink":"/8.x/examples/mesh-and-shaders/triangle-textured","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":5,"custom_edit_url":null,"title":"Triangle Textured"},"sidebar":"examplesSidebar","previous":{"title":"Triangle Color","permalink":"/8.x/examples/mesh-and-shaders/triangle-color"},"next":{"title":"Shared Geometry","permalink":"/8.x/examples/mesh-and-shaders/shared-geometry"}}'),a=t("85893"),i=t("50065"),s=t("43076");let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:5,custom_edit_url:null,title:"Triangle Textured"},l=void 0,d={},u=[];function p(e){return(0,a.jsx)(s.N,{files:{"index.js":"import { Application, Assets, Geometry, Mesh, Shader } from 'pixi.js';\nimport fragment from './triangleTextured.frag';\nimport vertex from './triangleTextured.vert';\n\n(async () =>\n{\n    const texture = await Assets.load('https://pixijs.com/assets/bg_scene_rotate.jpg');\n\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({\n        resizeTo: window,\n        preference: 'webgl',\n    });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    const geometry = new Geometry({\n        attributes: {\n            aPosition: [\n                -100,\n                -100, // x, y\n                100,\n                -100, // x, y\n                100,\n                100,\n            ], // x, y,,\n            aColor: [1, 0, 0, 0, 1, 0, 0, 0, 1],\n            aUV: [0, 0, 1, 0, 1, 1],\n        },\n    });\n\n    const shader = Shader.from({\n        gl: {\n            vertex,\n            fragment,\n        },\n        resources: {\n            uTexture: texture.source,\n        },\n    });\n\n    const triangle = new Mesh({\n        geometry,\n        shader,\n    });\n\n    triangle.position.set(400, 300);\n\n    app.stage.addChild(triangle);\n\n    app.ticker.add(() =>\n    {\n        triangle.rotation += 0.01;\n    });\n})();\n","triangleTextured.vert":"in vec2 aPosition;\nin vec3 aColor;\nin vec2 aUV;\n\nout vec3 vColor;\nout vec2 vUV;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\n\nuniform mat3 uTransformMatrix;\n\n\nvoid main() {\n\n    mat3 mvp = uProjectionMatrix * uWorldTransformMatrix * uTransformMatrix;\n    gl_Position = vec4((mvp * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n\n    vColor = aColor;\n    vUV = aUV;\n}","triangleTextured.frag":"in vec3 vColor;\nin vec2 vUV;\n\nuniform sampler2D uTexture;\n\nvoid main() {\n    gl_FragColor = texture2D(uTexture, vUV) * vec4(vColor, 1.0);\n}"}})}function m(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);