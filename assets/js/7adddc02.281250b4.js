"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["9994"],{59115:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>s,default:()=>u,toc:()=>d,metadata:()=>a,assets:()=>m,contentTitle:()=>l});var a=JSON.parse('{"id":"examples/mesh-and-shaders/triangle","title":"Triangle","description":"<ExampleEditor","source":"@site/docs/examples/mesh-and-shaders/triangle.mdx","sourceDirName":"examples/mesh-and-shaders","slug":"/examples/mesh-and-shaders/triangle","permalink":"/8.x/examples/mesh-and-shaders/triangle","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":3,"custom_edit_url":null,"title":"Triangle"},"sidebar":"examplesSidebar","previous":{"title":"Textured Mesh Advanced","permalink":"/8.x/examples/mesh-and-shaders/textured-mesh-advanced"},"next":{"title":"Triangle Color","permalink":"/8.x/examples/mesh-and-shaders/triangle-color"}}'),t=r(85893),i=r(50065),o=r(31531);let s={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:3,custom_edit_url:null,title:"Triangle"},l=void 0,m={},d=[];function c(n){return(0,t.jsx)(o.N,{files:{"index.js":"import { Application, Geometry, Mesh, Shader } from 'pixi.js';\nimport fragment from './triangle.frag';\nimport vertex from './triangle.vert';\nimport source from './triangle.wgsl';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({\n    resizeTo: window,\n    preference: 'webgl',\n  });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const geometry = new Geometry({\n    attributes: {\n      aPosition: [-100, -50, 100, -50, 0, 100],\n    },\n  });\n\n  // Webgl vertex and fragment shader source\n  const gl = { vertex, fragment };\n\n  // WebGPU vertex and fragment shader source\n  // Here vertex and fragment shader sources are inferred from the same WGSL source\n  const gpu = {\n    vertex: {\n      entryPoint: 'main',\n      source,\n    },\n    fragment: {\n      entryPoint: 'main',\n      source,\n    },\n  };\n\n  const shader = Shader.from({\n    gl,\n    gpu,\n  });\n\n  const triangle = new Mesh({\n    geometry,\n    shader,\n  });\n\n  triangle.position.set(400, 300);\n\n  app.stage.addChild(triangle);\n\n  app.ticker.add(() => {\n    triangle.rotation += 0.01;\n  });\n})();\n","triangle.vert":"in vec2 aPosition;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\n\nuniform mat3 uTransformMatrix;\n\n\nvoid main() {\n\n    mat3 mvp = uProjectionMatrix * uWorldTransformMatrix * uTransformMatrix;\n    gl_Position = vec4((mvp * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n}","triangle.frag":"void main() {\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}","triangle.wgsl":"struct GlobalUniforms {\n    projectionMatrix:mat3x3<f32>,\n    worldTransformMatrix:mat3x3<f32>,\n    worldColorAlpha: vec4<f32>,\n    uResolution: vec2<f32>,\n}\n\nstruct LocalUniforms {\n    uTransformMatrix:mat3x3<f32>,\n    uColor:vec4<f32>,\n    uRound:f32,\n}\n\n@group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n@group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n\n@vertex\nfn main(\n    @location(0) aPosition : vec2<f32>,\n) -> @builtin(position) vec4<f32> {     \n    var mvp = globalUniforms.projectionMatrix \n        * globalUniforms.worldTransformMatrix \n        * localUniforms.uTransformMatrix;\n    return vec4<f32>(mvp * vec3<f32>(aPosition, 1.0), 1.0);\n};\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}"}})}function u(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},31531:function(n,e,r){r.d(e,{N:()=>o});var a=r(958),t=r(18146),i=r(85893);function o(n){return(0,t.J)("example",!0),(0,i.jsx)(a.M,{height:"calc(100vh - 325px)",fontSize:14,...n})}}}]);