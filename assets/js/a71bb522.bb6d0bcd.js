"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["8564"],{36364:function(n,i,e){e.r(i),e.d(i,{frontMatter:()=>c,default:()=>u,toc:()=>g,metadata:()=>t,assets:()=>l,contentTitle:()=>d});var t=JSON.parse('{"id":"examples/basic/container-origin","title":"Container Origin","description":"","source":"@site/docs/examples/basic/container-origin.mdx","sourceDirName":"examples/basic","slug":"/examples/basic/container-origin","permalink":"/8.x/examples/basic/container-origin","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":1,"custom_edit_url":null,"title":"Container Origin"},"sidebar":"examplesSidebar","previous":{"title":"Container","permalink":"/8.x/examples/basic/container"},"next":{"title":"Transparent Background","permalink":"/8.x/examples/basic/transparent-background"}}'),r=e(85893),o=e(50065),a=e(31531),s=e(34525);let c={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:1,custom_edit_url:null,title:"Container Origin"},d=void 0,l={},g=[];function p(n){return(0,r.jsx)(a.N,{files:{"index.js":s.Z}})}function u(n={}){let{wrapper:i}={...(0,o.a)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},31531:function(n,i,e){e.d(i,{N:()=>a});var t=e(958),r=e(18146),o=e(85893);function a(n){return(0,r.J)("example",!0),(0,o.jsx)(t.M,{height:"calc(100vh - 325px)",fontSize:14,...n})}},34525:function(n,i,e){e.d(i,{Z:()=>t});let t="import { Application, Container, Graphics, Point } from 'pixi.js';\n\n(async () => {\n  // Create the PIXI application\n  const app = new Application();\n  await app.init({ background: 0xffffff, resizeTo: window, antialias: true });\n  document.body.appendChild(app.canvas);\n\n  // Create grid background\n  const grid = new Graphics();\n  const gridSize = 50;\n  for (let x = 0; x < window.innerWidth; x += gridSize) {\n    grid.moveTo(x, 0).lineTo(x, window.innerHeight);\n  }\n  for (let y = 0; y < window.innerHeight; y += gridSize) {\n    grid.moveTo(0, y).lineTo(window.innerWidth, y);\n  }\n  grid.stroke({ width: 1, color: 0xcccccc });\n  app.stage.addChild(grid);\n\n  // Container to demonstrate origin\n  const container = new Container();\n  app.stage.addChild(container);\n\n  // Create a rectangle\n  const rectWidth = 150;\n  const rectHeight = 100;\n  const rect = new Graphics().rect(0, 0, rectWidth, rectHeight).fill(0x3498db).stroke({ width: 4, color: 'black' });\n  container.addChild(rect);\n\n  // Crosshair to show origin\n  const originMarker = new Graphics()\n    .moveTo(-10, 0)\n    .lineTo(10, 0)\n    .moveTo(0, -10)\n    .lineTo(0, 10)\n    .stroke({ width: 4, color: 0xff0000 });\n  container.addChild(originMarker);\n  container.addChild(originMarker);\n\n  // Position marker to show container position\n  const positionMarker = new Graphics().circle(0, 0, 8).fill('red').circle(0, 0, 3).fill(0xffffff);\n  positionMarker.position.set(100);\n  app.stage.addChild(positionMarker);\n\n  // Position the container at center\n  container.position.set(100);\n\n  const origin = new Point(rectWidth / 2, rectHeight / 2);\n  container.origin.copyFrom(origin);\n  originMarker.position.copyFrom(origin);\n\n  // Track current mode\n  let useOrigin = true;\n\n  // UI Sliders\n  const uiContainer = document.createElement('div');\n  uiContainer.style.position = 'fixed';\n  uiContainer.style.top = '20px';\n  uiContainer.style.right = '20px';\n  uiContainer.style.padding = '10px';\n  uiContainer.style.background = 'white';\n  uiContainer.style.border = '1px solid #ccc';\n  uiContainer.style.fontFamily = 'sans-serif';\n  uiContainer.innerHTML = `\n    <h3>Adjust Origin/Pivot</h3>\n    <label><input type=\"checkbox\" id=\"modeToggle\" checked> Use Origin (unchecked = Pivot)</label><br><br>\n    <label>X: <input type=\"range\" min=\"0\" max=\"${rectWidth}\" step=\"5\" value=\"${origin.x}\" id=\"originX\"></label><br>\n    <label>Y: <input type=\"range\" min=\"0\" max=\"${rectHeight}\" step=\"5\" value=\"${origin.y}\" id=\"originY\"></label><br>\n    <button id=\"resetOrigin\">Reset</button>\n  `;\n  document.body.appendChild(uiContainer);\n\n  // Event listeners\n  const originXSlider = document.getElementById('originX');\n  const originYSlider = document.getElementById('originY');\n  const resetButton = document.getElementById('resetOrigin');\n  const modeToggle = document.getElementById('modeToggle');\n\n  function updateTransform() {\n    if (useOrigin) {\n      container.origin.copyFrom(origin);\n      container.pivot.set(0, 0);\n    } else {\n      container.pivot.copyFrom(origin);\n      container.origin.set(0, 0);\n    }\n    originMarker.position.copyFrom(origin);\n  }\n\n  modeToggle.addEventListener('change', () => {\n    useOrigin = modeToggle.checked;\n    container.rotation = 0;\n    updateTransform();\n  });\n\n  originXSlider.addEventListener('change', () => {\n    origin.x = parseFloat(originXSlider.value);\n    container.rotation = 0;\n    updateTransform();\n  });\n\n  originYSlider.addEventListener('change', () => {\n    origin.y = parseFloat(originYSlider.value);\n    container.rotation = 0;\n    updateTransform();\n  });\n\n  resetButton.addEventListener('click', () => {\n    origin.set(rectWidth / 2, rectHeight / 2);\n    originXSlider.value = origin.x.toString();\n    originYSlider.value = origin.y.toString();\n    container.rotation = 0;\n    updateTransform();\n  });\n\n  // Animation loop\n  app.ticker.add((ticker) => {\n    container.rotation += 0.01 * ticker.deltaTime;\n  });\n})();\n"}}]);