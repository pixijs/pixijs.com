"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["5558"],{76882:function(e,t,i){i.r(t),i.d(t,{default:()=>g,frontMatter:()=>o,metadata:()=>n,assets:()=>c,toc:()=>d,contentTitle:()=>l});var n=JSON.parse('{"id":"examples/graphics/svg-texture-large","title":"Svg","description":"","source":"@site/docs/examples/graphics/svg-texture-large.mdx","sourceDirName":"examples/graphics","slug":"/examples/graphics/svg-texture-large","permalink":"/8.x/examples/graphics/svg-texture-large","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":3,"custom_edit_url":null,"title":"Svg"},"sidebar":"examplesSidebar","previous":{"title":"Dynamic","permalink":"/8.x/examples/graphics/dynamic"},"next":{"title":"Svg","permalink":"/8.x/examples/graphics/svg-texture"}}'),s=i("85893"),a=i("50065"),r=i("43076"),p=i("90817");let o={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:3,custom_edit_url:null,title:"Svg"},l=void 0,c={},d=[];function u(e){return(0,s.jsx)(r.N,{files:{"index.js":p.Z}})}function g(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},90817:function(e,t,i){i.d(t,{Z:function(){return n}});let n="import { Application, Assets, Graphics, Sprite } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ antialias: true, resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    const tigerTexture = await Assets.load({\n        src: 'https://pixijs.com/assets/tiger.svg',\n        data: {\n            resolution: 4\n        }\n    });\n\n    const sprite = new Sprite(tigerTexture);\n\n    // line it up as this svg is not centered\n    const bounds = sprite.getLocalBounds();\n\n    sprite.pivot.set((bounds.x + bounds.width) / 2, (bounds.y + bounds.height) / 2);\n\n    sprite.position.set(app.screen.width / 2, app.screen.height / 2);\n\n    app.stage.addChild(sprite);\n\n    app.ticker.add((time) =>\n    {\n        sprite.rotation += 0.01;\n        sprite.scale.set(2 + Math.sin(sprite.rotation));\n    });\n})();\n"}}]);