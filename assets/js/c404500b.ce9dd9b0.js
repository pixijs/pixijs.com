"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["4056"],{99190:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>s,default:()=>g,toc:()=>c,metadata:()=>o,assets:()=>p,contentTitle:()=>l});var o=JSON.parse('{"id":"examples/events/logger","title":"Logger","description":"","source":"@site/docs/examples/events/logger.mdx","sourceDirName":"examples/events","slug":"/examples/events/logger","permalink":"/8.x/examples/events/logger","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":5,"custom_edit_url":null,"title":"Logger"},"sidebar":"examplesSidebar","previous":{"title":"Custom Hitarea","permalink":"/8.x/examples/events/custom-hitarea"},"next":{"title":"Pointer Tracker","permalink":"/8.x/examples/events/pointer-tracker"}}'),a=n(85893),i=n(50065),r=n(31531);let s={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:5,custom_edit_url:null,title:"Logger"},l=void 0,p={},c=[];function d(e){return(0,a.jsx)(r.N,{files:{"index.js":"import { Application, Graphics, Text } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const title = app.stage.addChild(\n    new Text({\n      text: `Move your mouse slowly over the boxes to\n        see the order of pointerenter, pointerleave,\n        pointerover, pointerout events on each target!`,\n      style: {\n        fontSize: 16,\n      },\n    }),\n  );\n\n  title.x = 2;\n\n  const logs = [];\n  const logText = app.stage.addChild(\n    new Text({\n      text: '',\n      style: {\n        fontSize: 14,\n      },\n    }),\n  );\n\n  logText.y = 80;\n  logText.x = 2;\n\n  app.stage.name = 'stage';\n\n  // Mount outer black box\n  const blackBox = app.stage.addChild(new Graphics().rect(0, 0, 400, 400).fill({ color: 0 }));\n\n  blackBox.name = 'black box';\n  blackBox.x = 400;\n\n  // Mount white box inside the white one\n  const whiteBox = blackBox.addChild(new Graphics().rect(100, 100, 200, 200).fill({ color: 0xffffff }));\n\n  whiteBox.name = 'white box';\n\n  // Enable interactivity everywhere!\n  app.stage.eventMode = 'static';\n  app.stage.hitArea = app.screen;\n  whiteBox.eventMode = 'static';\n  blackBox.eventMode = 'static';\n\n  function onEvent(e) {\n    const type = e.type;\n    const targetName = e.target.name;\n    const currentTargetName = e.currentTarget.name;\n\n    // Add event to top of logs\n    logs.push(`${currentTargetName} received ${type} event (target is ${targetName})`);\n\n    if (currentTargetName === 'stage' || type === 'pointerenter' || type === 'pointerleave') {\n      logs.push('-----------------------------------------', '');\n    }\n\n    // Prevent logs from growing too long\n    if (logs.length > 30) {\n      while (logs.length > 30) {\n        logs.shift();\n      }\n    }\n\n    // Update logText\n    logText.text = logs.join('\\n');\n  }\n\n  [app.stage, whiteBox, blackBox].forEach((object) => {\n    object.addEventListener('pointerenter', onEvent);\n    object.addEventListener('pointerleave', onEvent);\n    object.addEventListener('pointerover', onEvent);\n    object.addEventListener('pointerout', onEvent);\n  });\n})();\n"}})}function g(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);