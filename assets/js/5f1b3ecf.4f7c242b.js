"use strict";(self.webpackChunkpixi_docusaurus=self.webpackChunkpixi_docusaurus||[]).push([["9113"],{89112:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,default:()=>c,toc:()=>p,metadata:()=>a,assets:()=>o,contentTitle:()=>l});var a=JSON.parse('{"id":"examples/events/slider","title":"Slider","description":"","source":"@site/docs/examples/events/slider.mdx","sourceDirName":"examples/events","slug":"/examples/events/slider","permalink":"/8.x/examples/events/slider","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"hide_table_of_contents":true,"hide_edit_this_page":true,"sidebar_position":7,"custom_edit_url":null,"title":"Slider"},"sidebar":"examplesSidebar","previous":{"title":"Pointer Tracker","permalink":"/8.x/examples/events/pointer-tracker"},"next":{"title":"Graphics","permalink":"/8.x/examples/masks/graphics"}}'),i=t(85893),s=t(50065),d=t(31531);let r={hide_table_of_contents:!0,hide_edit_this_page:!0,sidebar_position:7,custom_edit_url:null,title:"Slider"},l=void 0,o={},p=[];function h(e){return(0,i.jsx)(d.N,{files:{"index.js":"import { Application, Assets, Graphics, SCALE_MODES, Sprite, Text } from 'pixi.js';\n\n(async () => {\n  // Create a new application\n  const app = new Application();\n\n  // Initialize the application\n  await app.init({ antialias: true, background: '#1099bb', resizeTo: window });\n\n  // Append the application canvas to the document body\n  document.body.appendChild(app.canvas);\n\n  const stageHeight = app.screen.height;\n  const stageWidth = app.screen.width;\n\n  // Make sure stage covers the whole scene\n  app.stage.hitArea = app.screen;\n\n  // Make the slider\n  const sliderWidth = 320;\n  const slider = new Graphics().rect(0, 0, sliderWidth, 4).fill({ color: 0x272d37 });\n\n  slider.x = (stageWidth - sliderWidth) / 2;\n  slider.y = stageHeight * 0.75;\n\n  // Draw the handle\n  const handle = new Graphics().circle(0, 0, 8).fill({ color: 0xffffff });\n\n  handle.y = slider.height / 2;\n  handle.x = sliderWidth / 2;\n  handle.eventMode = 'static';\n  handle.cursor = 'pointer';\n\n  handle.on('pointerdown', onDragStart).on('pointerup', onDragEnd).on('pointerupoutside', onDragEnd);\n\n  app.stage.addChild(slider);\n  slider.addChild(handle);\n\n  // Load the bunny texture\n  const texture = await Assets.load('https://pixijs.com/assets/bunny.png');\n\n  // Add bunny whose scale can be changed by user using slider\n  const bunny = app.stage.addChild(Sprite.from(texture));\n\n  bunny.texture.baseTexture.scaleMode = SCALE_MODES.NEAREST;\n  bunny.scale.set(3);\n  bunny.anchor.set(0.5);\n  bunny.x = stageWidth / 2;\n  bunny.y = stageHeight / 2;\n\n  // Add title\n  const title = new Text({\n    text: 'Drag the handle to change the scale of bunny.',\n    style: {\n      fill: '#272d37',\n      fontFamily: 'Roboto',\n      fontSize: 20,\n      align: 'center',\n    },\n  });\n\n  title.roundPixels = true;\n  title.x = stageWidth / 2;\n  title.y = 40;\n  title.anchor.set(0.5, 0);\n  app.stage.addChild(title);\n\n  // Listen to pointermove on stage once handle is pressed.\n  function onDragStart() {\n    app.stage.eventMode = 'static';\n    app.stage.addEventListener('pointermove', onDrag);\n  }\n\n  // Stop dragging feedback once the handle is released.\n  function onDragEnd() {\n    app.stage.eventMode = 'auto';\n    app.stage.removeEventListener('pointermove', onDrag);\n  }\n\n  // Update the handle's position & bunny's scale when the handle is moved.\n  function onDrag(e) {\n    const halfHandleWidth = handle.width / 2;\n    // Set handle y-position to match pointer, clamped to (4, screen.height - 4).\n\n    handle.x = Math.max(halfHandleWidth, Math.min(slider.toLocal(e.global).x, sliderWidth - halfHandleWidth));\n    // Normalize handle position between -1 and 1.\n    const t = 2 * (handle.x / sliderWidth - 0.5);\n\n    bunny.scale.set(3 * (1.1 + t));\n  }\n})();\n"}})}function c(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);